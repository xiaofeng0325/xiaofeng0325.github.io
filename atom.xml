<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zm.blog</title>
  
  <subtitle>select * from learn</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhangmiao.cc/"/>
  <updated>2020-08-26T07:12:41.197Z</updated>
  <id>https://zhangmiao.cc/</id>
  
  <author>
    <name>ZhangMiao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flutter插件开发指南</title>
    <link href="https://zhangmiao.cc/posts/f946bb65.html"/>
    <id>https://zhangmiao.cc/posts/f946bb65.html</id>
    <published>2020-08-26T07:06:49.000Z</published>
    <updated>2020-08-26T07:12:41.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flutter插件开发"><a href="#Flutter插件开发" class="headerlink" title="Flutter插件开发"></a>Flutter插件开发</h1><h2 id="Flutter插件开发-1"><a href="#Flutter插件开发-1" class="headerlink" title="Flutter插件开发"></a>Flutter插件开发</h2><h3 id="创建插件目录"><a href="#创建插件目录" class="headerlink" title="创建插件目录"></a>创建插件目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">flutter create -i objc -a java --template=plugin demo</span><br><span class="line"></span><br><span class="line">-i, 表示指定iOS的语言, objc, swift</span><br><span class="line">-a, 表示指定安卓的语言, java, kotlin</span><br></pre></td></tr></table></figure><p>通过上面命令，创建一个名为<code>demo</code>的plugin模板, 并生成以下目录结构</p><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- android // 插件相关 Android 代码</span><br><span class="line">- ios // 插件相关 iOS 代码</span><br><span class="line">- lib // 插件相关 Dart 代码</span><br><span class="line">- example // 示例项目, 用于调试当前开发的插件</span><br><span class="line">- pubspec.yaml // 插件配置文件</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="example目录"><a href="#example目录" class="headerlink" title="example目录"></a>example目录</h4><p>example目录, 是一个示例项目, 用于调试当前开发的插件</p><p>在example/lib/main.dart中, 默认生成一些示例代码. 代码如下:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'dart:async'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/services.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:demo/demo.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _MyAppState createState() =&gt; _MyAppState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyApp</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> _platformVersion = <span class="string">'Unknown'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    initPlatformState();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future&lt;<span class="keyword">void</span>&gt; initPlatformState() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="built_in">String</span> platformVersion;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      platformVersion = <span class="keyword">await</span> Demo.platformVersion;</span><br><span class="line">    &#125; on PlatformException &#123;</span><br><span class="line">      platformVersion = <span class="string">'Failed to get platform version.'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!mounted) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _platformVersion = platformVersion;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: <span class="keyword">const</span> Text(<span class="string">'Plugin example app'</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: Center(</span><br><span class="line">          child: Text(<span class="string">'Running on: $_platformVersion\n'</span>),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例中的代码, <code>Demo.platformVersion</code>, 实际上是调用了lib目录中, <code>Demo</code>类的get方法<code>platformVersion</code>, 也就是我们写的插件代码</p><h3 id="lib目录"><a href="#lib目录" class="headerlink" title="lib目录"></a>lib目录</h3><p>lib目录, 主要用来存放, 开发的插件所需要的dart代码</p><p>在lib/demo.dart, 中可以找到默认生成的示例代码, 代码如下:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:async'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/services.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> MethodChannel _channel =</span><br><span class="line">      <span class="keyword">const</span> MethodChannel(<span class="string">'demo'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> Future&lt;<span class="built_in">String</span>&gt; <span class="keyword">get</span> platformVersion <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">String</span> version = <span class="keyword">await</span> _channel.invokeMethod(<span class="string">'getPlatformVersion'</span>);</span><br><span class="line">    <span class="keyword">return</span> version;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码, 创建了一个名字为<code>demo</code>的MethodChannel对象, 并提供一个<code>get platformVersion</code>方法, 在该方法中调用invokeMethod方法, 去调用原生代码中, 名字为<code>getPlatformVersion</code>的方法.</p><h4 id="MethodChannel"><a href="#MethodChannel" class="headerlink" title="MethodChannel"></a>MethodChannel</h4><p>flutter与原生的交互, 可以通过MethodChannel来实现, MethodChannel是双向的, 通过它可以在flutter中调用原生代码, 也可以在原生代码调用flutter代码</p><h3 id="ios目录"><a href="#ios目录" class="headerlink" title="ios目录"></a>ios目录</h3><p>ios目录, 主要用来存放, 开发的插件所需要的iOS代码</p><p>在ios目录中, ios/Classes/DemoPlugin.m, 中可以找到<code>getPlatformVersion</code>对应的原生代码, 代码如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;DemoPlugin.h&quot;</span><br><span class="line"></span><br><span class="line">@implementation DemoPlugin</span><br><span class="line">+ (void)registerWithRegistrar:(NSObject&lt;FlutterPluginRegistrar&gt;*)registrar &#123;</span><br><span class="line">  FlutterMethodChannel* channel = [FlutterMethodChannel</span><br><span class="line">      methodChannelWithName:@&quot;demo&quot;</span><br><span class="line">            binaryMessenger:[registrar messenger]];</span><br><span class="line">  DemoPlugin* instance = [[DemoPlugin alloc] init];</span><br><span class="line">  [registrar addMethodCallDelegate:instance channel:channel];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)handleMethodCall:(FlutterMethodCall*)call result:(FlutterResult)result &#123;</span><br><span class="line">  if ([@&quot;getPlatformVersion&quot; isEqualToString:call.method]) &#123;</span><br><span class="line">    result([@&quot;iOS &quot; stringByAppendingString:[[UIDevice currentDevice] systemVersion]]);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    result(FlutterMethodNotImplemented);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h3 id="android目录"><a href="#android目录" class="headerlink" title="android目录"></a>android目录</h3><p>android目录, 主要用来存放, 开发的插件所需要的android代码</p><p>在android目录中, android/src/main/java/com/example/demo/DemoPlugin.java, 中可以找到<code>getPlatformVersion</code>对应的原生代码, 代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.flutter.plugin.common.MethodCall;</span><br><span class="line"><span class="keyword">import</span> io.flutter.plugin.common.MethodChannel;</span><br><span class="line"><span class="keyword">import</span> io.flutter.plugin.common.MethodChannel.MethodCallHandler;</span><br><span class="line"><span class="keyword">import</span> io.flutter.plugin.common.MethodChannel.Result;</span><br><span class="line"><span class="keyword">import</span> io.flutter.plugin.common.PluginRegistry.Registrar;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** DemoPlugin */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoPlugin</span> <span class="keyword">implements</span> <span class="title">MethodCallHandler</span> </span>&#123;</span><br><span class="line">  <span class="comment">/** Plugin registration. */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerWith</span><span class="params">(Registrar registrar)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> MethodChannel channel = <span class="keyword">new</span> MethodChannel(registrar.messenger(), <span class="string">"demo"</span>);</span><br><span class="line">    channel.setMethodCallHandler(<span class="keyword">new</span> DemoPlugin());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMethodCall</span><span class="params">(MethodCall call, Result result)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (call.method.equals(<span class="string">"getPlatformVersion"</span>)) &#123;</span><br><span class="line">      result.success(<span class="string">"Android "</span> + android.os.Build.VERSION.RELEASE);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result.notImplemented();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="原生代码"><a href="#原生代码" class="headerlink" title="原生代码"></a>原生代码</h4><p>原生代码中, 也都创建一个名为<code>demo</code>的MethodChannel对象. (与lib目中的dart代码中的MethodChannel名字一致).</p><p>通过注册, 监听该channel的回调. 在回调中通过判断call.method的值, 来区分flutter中调用的哪个方法.</p><p>如示例中判断是否等于<code>getPlatformVersion</code>, 并在当中执行对应的原生代码, 获取设备相关的系统版本.</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>另外, 在flutter中, 如果想使用原生的视图, 需要使用flutter的UiKitView和AndroidView.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Flutter插件开发&quot;&gt;&lt;a href=&quot;#Flutter插件开发&quot; class=&quot;headerlink&quot; title=&quot;Flutter插件开发&quot;&gt;&lt;/a&gt;Flutter插件开发&lt;/h1&gt;&lt;h2 id=&quot;Flutter插件开发-1&quot;&gt;&lt;a href=&quot;#Flutter插件开发-1&quot; class=&quot;headerlink&quot; title=&quot;Flutter插件开发&quot;&gt;&lt;/a&gt;Flutter插件开发&lt;/h2&gt;&lt;h3 id=&quot;创建插件目录&quot;&gt;&lt;a href=&quot;#创建插件目录&quot; class=&quot;headerlink&quot; title=&quot;创建插件目录&quot;&gt;&lt;/a&gt;创建插件目录&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;flutter create -i objc -a java --template=plugin demo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-i, 表示指定iOS的语言, objc, swift&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-a, 表示指定安卓的语言, java, kotlin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;通过上面命令，创建一个名为&lt;code&gt;demo&lt;/code&gt;的plugin模板, 并生成以下目录结构&lt;/p&gt;
&lt;h3 id=&quot;目录结构&quot;&gt;&lt;a href=&quot;#目录结构&quot; class=&quot;headerlink&quot; title=&quot;目录结构&quot;&gt;&lt;/a&gt;目录结构&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- android // 插件相关 Android 代码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- ios // 插件相关 iOS 代码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- lib // 插件相关 Dart 代码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- example // 示例项目, 用于调试当前开发的插件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- pubspec.yaml // 插件配置文件&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Android" scheme="https://zhangmiao.cc/categories/Android/"/>
    
      <category term="Flutter Tips" scheme="https://zhangmiao.cc/categories/Android/Flutter-Tips/"/>
    
    
      <category term="Android" scheme="https://zhangmiao.cc/tags/Android/"/>
    
      <category term="Flutter Tips" scheme="https://zhangmiao.cc/tags/Flutter-Tips/"/>
    
  </entry>
  
  <entry>
    <title>Flutter - 监视页面的切换(RouteObserver &amp; RouteAware)</title>
    <link href="https://zhangmiao.cc/posts/97bcffb.html"/>
    <id>https://zhangmiao.cc/posts/97bcffb.html</id>
    <published>2020-08-10T02:49:37.000Z</published>
    <updated>2020-08-10T03:02:32.183Z</updated>
    
    <content type="html"><![CDATA[<p>经常性的，我们需要监视页面的切换，用以在合适的时候对控件进行动画暂停或者资源释放。</p><p>举个栗子：<br>相机拍照是我们需要经常用到的功能，但是当我们在切换到相机配置页面时，需要暂停当前相机预览，这种情况下我们就需要监视页面的路由变化情况，又或者用户回到应用桌面，此时也需要对相机进行暂停，返回又恢复相机。</p><p>在这里主要关系到下面两个方面的：</p><ol><li>AppStateLifeRecycle - 今天我们不说这个；</li><li>RouteAware</li></ol><p>先看看RouteAware是如何定义的？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/// An interface for objects that are aware of their current [Route].</span><br><span class="line">///</span><br><span class="line">/// This is used with [RouteObserver] to make a widget aware of changes to the</span><br><span class="line">/// [Navigator]&apos;s session history.</span><br><span class="line">abstract class RouteAware &#123;</span><br><span class="line">  /// Called when the top route has been popped off, and the current route</span><br><span class="line">  /// shows up.</span><br><span class="line">  void didPopNext() &#123; &#125;</span><br><span class="line"> </span><br><span class="line">  /// Called when the current route has been pushed.</span><br><span class="line">  void didPush() &#123; &#125;</span><br><span class="line"> </span><br><span class="line">  /// Called when the current route has been popped off.</span><br><span class="line">  void didPop() &#123; &#125;</span><br><span class="line"> </span><br><span class="line">  /// Called when a new route has been pushed, and the current route is no</span><br><span class="line">  /// longer visible.</span><br><span class="line">  void didPushNext() &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>上面提交到4个方法，分别都有什么用呢？<br>假如有3个页面，分别是A、B、C，跳转逻辑由A-&gt;B-&gt;C，而RouteAware使用with混淆在B中。</p><ul><li><strong>didPopNext</strong>：在C页面关闭后，B页面调起该方法；</li><li><strong>didPush</strong>: 当由A打开B页面时，B页面调起该方法；</li><li><strong>didPop</strong>: 当B页面关闭时，B页面调起该方法；</li><li><strong>didPushNext</strong>: 当从B页面打开C页面时，该方法被调起。</li></ul><blockquote><p>如何使用？</p></blockquote><ol><li>使用<strong>with</strong>关键字在State类中使用，使用前在<strong>MaterialApp</strong>中定义一个<strong>RouteObserver</strong>对象。<br>如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">final RouteObserver&lt;PageRoute&gt; routeObserver = RouteObserver();</span><br><span class="line"> </span><br><span class="line">class MyApp extends StatelessWidget &#123;</span><br><span class="line">    ... \\此处省略一些代码</span><br><span class="line"> </span><br><span class="line">    Widget _buildMaterialApp() =&gt; MaterialApp(</span><br><span class="line">      initialRoute: &apos;/&apos;,</span><br><span class="line">      navigatorObservers: [routeObserver], //添加路由观察者</span><br><span class="line">      onGenerateRoute: _onGenerateRoute);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在B页面中混淆<strong>RouteAware</strong>, 并注册<strong>RouteObserver</strong><br>如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">class B extends StatefulWidget &#123;</span><br><span class="line">     B(&#123;Key key&#125;) : super(key: key);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class BState extends State&lt;B&gt;  with RouteAware &#123;</span><br><span class="line"> </span><br><span class="line">  @override</span><br><span class="line">  void didChangeDependencies() &#123;</span><br><span class="line">    routeObserver.subscribe(this, ModalRoute.of(context)); //订阅</span><br><span class="line">    super.didChangeDependencies();</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  @override</span><br><span class="line">  void didPush() &#123;</span><br><span class="line">    debugPrint(&quot;------&gt; didPush&quot;);</span><br><span class="line">    super.didPush();</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  @override</span><br><span class="line">  void didPop() &#123;</span><br><span class="line">    debugPrint(&quot;------&gt; didPop&quot;);</span><br><span class="line">    super.didPop();</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  @override</span><br><span class="line">  void didPopNext() &#123;</span><br><span class="line">    debugPrint(&quot;------&gt; didPopNext&quot;);</span><br><span class="line">    super.didPopNext();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">@override</span><br><span class="line">  void didPushNext() &#123;</span><br><span class="line">    debugPrint(&quot;------&gt; didPushNext&quot;);</span><br><span class="line">    super.didPushNext();</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  @override</span><br><span class="line">  void dispose() &#123;</span><br><span class="line">    routeObserver.unsubscribe(this); //取消订阅</span><br><span class="line">    super.dispose();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结 :</p></blockquote><ol><li>路由观察者添加订阅与取消订阅必须成对出现；</li><li>一些对象在使用后一定要记得及时释放资源。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经常性的，我们需要监视页面的切换，用以在合适的时候对控件进行动画暂停或者资源释放。&lt;/p&gt;
&lt;p&gt;举个栗子：&lt;br&gt;相机拍照是我们需要经常用到的功能，但是当我们在切换到相机配置页面时，需要暂停当前相机预览，这种情况下我们就需要监视页面的路由变化情况，又或者用户回到应用桌面，此时也需要对相机进行暂停，返回又恢复相机。&lt;/p&gt;
&lt;p&gt;在这里主要关系到下面两个方面的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;AppStateLifeRecycle - 今天我们不说这个；&lt;/li&gt;
&lt;li&gt;RouteAware&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;先看看RouteAware是如何定义的？&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/// An interface for objects that are aware of their current [Route].&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;///&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/// This is used with [RouteObserver] to make a widget aware of changes to the&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/// [Navigator]&amp;apos;s session history.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;abstract class RouteAware &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /// Called when the top route has been popped off, and the current route&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /// shows up.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  void didPopNext() &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /// Called when the current route has been pushed.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  void didPush() &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /// Called when the current route has been popped off.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  void didPop() &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /// Called when a new route has been pushed, and the current route is no&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /// longer visible.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  void didPushNext() &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Android" scheme="https://zhangmiao.cc/categories/Android/"/>
    
      <category term="Flutter Tips" scheme="https://zhangmiao.cc/categories/Android/Flutter-Tips/"/>
    
    
      <category term="Android" scheme="https://zhangmiao.cc/tags/Android/"/>
    
      <category term="Flutter Tips" scheme="https://zhangmiao.cc/tags/Flutter-Tips/"/>
    
  </entry>
  
  <entry>
    <title>FlutterBoost混合开发实践与源码解析</title>
    <link href="https://zhangmiao.cc/posts/dd9d0434.html"/>
    <id>https://zhangmiao.cc/posts/dd9d0434.html</id>
    <published>2020-07-06T08:31:24.000Z</published>
    <updated>2020-07-06T08:32:43.770Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p><a href="https://link.zhihu.com/?target=https%3A//github.com/alibaba/flutter_boost" target="_blank" rel="noopener">Flutter Boost</a> 是闲鱼团队开发的一个 Flutter 混合开发框架，项目背景可以看看闲鱼的这篇文章：<a href="https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s%3F__biz%3DMzU4MDUxOTI5NA%3D%3D%26mid%3D2247484367%26idx%3D1%26sn%3Dfcbc485f068dae5de9f68d52607ea08f%26chksm%3Dfd54d7deca235ec86249a9e3714ec18be8b2d6dc580cae19e4e5113533a6c5b44dfa5813c4c3%26scene%3D0%26subscene%3D131%26clicktime%3D1551942425%26ascene%3D7%26devicetype%3Dandroid-28%26version%3D2700033b%26nettype%3Dctnet%26abtest_cookie%3DBAABAAoACwASABMABAAklx4AVpkeAMSZHgDWmR4AAAA%3D%26lang%3Dzh_CN%26pass_ticket%3D1qvHqOsbLBHv3wwAcw577EHhNjg6EKXqTfnOiFbbbaw%3D%26wx_header%3D1" target="_blank" rel="noopener">码上用它开始Flutter混合开发——FlutterBoost</a>。</p><p>文章中主要讲述了多引擎存在一些实际问题，所以闲鱼目前采用的混合方案是共享同一个引擎的方案。而 Flutter Boost 的 Feature 如下：</p><ul><li>可复用通用型混合方案</li><li>支持更加复杂的混合模式，比如支持主页Tab这种情况</li><li>无侵入性方案：不再依赖修改Flutter的方案</li><li>支持通用页面生命周期</li><li>统一明确的设计概念</li></ul><p>Flutter Boost 采用共享引擎的模式来实现，主要思路是由 Native 容器 Container 通过消息驱动 Flutter 页面容器 Container，从而达到 Native Container 与 Flutter Container 的同步目的。简单的理解，闲鱼想做到把 Flutter 容器做成浏览器的感觉。填写一个页面地址，然后由容器去管理页面的绘制。在 Native 侧我们只需要关心如果初始化容器，然后设置容器对应的页面标志即可。</p><p>鉴于网上没有相关的接入文档和使用教程，我这几天也恰好抽空研究了一下，遂整理成文，仅供参考。由于篇幅原因，本文只研究 Android 端的接入与源码，iOS 的部分后续有机会则补充文章来讲解。</p><blockquote><p>注：本文接入的 Flutter Boost 版本为 1.12.13，对应支持的 Flutter SDK 版本为 1.12.13-hotfixes，是目前最新的版本。但 Flutter Boost 版本更新之后，接入方式和使用方式可能会有一些改变，故参考本文时请认准 1.12.13 版本。</p></blockquote><a id="more"></a><h2 id="2-接入"><a href="#2-接入" class="headerlink" title="2. 接入"></a>2. 接入</h2><h3 id="2-1-创建-Flutter-Module"><a href="#2-1-创建-Flutter-Module" class="headerlink" title="2.1 创建 Flutter Module"></a>2.1 创建 Flutter Module</h3><p>在开始之前，我们需要保证工程目录如下结构所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--- flutter_hybrid</span><br><span class="line">        --- flutter_module</span><br><span class="line">--- FlutterHybridAndroid </span><br><span class="line">--- FlutterHybridiOS</span><br></pre></td></tr></table></figure><p>即，iOS 工程与 Android 工程与 flutter_module 目录在同一层级。如此，方便管理，同时也保证后续集成代码中路径的一致性。</p><p>接着，我们来创建 Flutter Module：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> flutter_hybrid</span><br><span class="line">flutter create -t module flutter_module</span><br></pre></td></tr></table></figure><p>需要注意的是，如果要创建支持 Android X 的 flutter module，命令上需要加上 <code>--androidx</code> 参数，即：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter create --androidx -t module flutter_module</span><br></pre></td></tr></table></figure><p>注：如果安装依赖过慢，可以切换为国内的依赖镜像源。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PUB_HOSTED_URL=https://pub.flutter-io.cn</span><br><span class="line"><span class="built_in">export</span> FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span><br></pre></td></tr></table></figure><p>当然我们也可以通过新版的 Android Studio 来可视化创建一个 Flutter Module （需 3.6.1 以上版本，并给 IDE 装上 Flutter 与 Dart 插件），具体方法可以见官网介绍（<a href="https://link.zhihu.com/?target=https%3A//flutter.dev/docs/development/add-to-app/android/project-setup" target="_blank" rel="noopener">https://flutter.dev/docs/development/add-to-app/android/project-setup</a>），此处不再赘述。但个人建议使用本文介绍的更为通用的方法去创建并集成 Flutter Module。</p><h3 id="2-2-集成-Flutter-Module"><a href="#2-2-集成-Flutter-Module" class="headerlink" title="2.2 集成 Flutter Module"></a>2.2 集成 Flutter Module</h3><p>创建好 Flutter Module 之后，需要在 Native 工程中集成 flutter_module。具体有两种方式：</p><ol><li>源码依赖</li><li>arr 依赖</li></ol><h3 id="2-2-1-源码依赖集成"><a href="#2-2-1-源码依赖集成" class="headerlink" title="2.2.1 源码依赖集成"></a>2.2.1 源码依赖集成</h3><p>源码依赖的优点是开发、调试方便，也就是在 Android 工程的 <code>settings.gradle</code> 和 app 目录下的 <code>build.gradle</code> 文件中加入对 flutter_module 的依赖即可。</p><p>首先，在 <code>settings.gradle</code> 文件中，增加以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">include &apos;:app&apos;                                     // 已存在的内容</span><br><span class="line"></span><br><span class="line">setBinding(new Binding([gradle: this]))                                </span><br><span class="line">evaluate(new File(                                                     </span><br><span class="line">  settingsDir.parentFile,                                               </span><br><span class="line">  &apos;flutter_module/.android/include_flutter.groovy&apos;                      </span><br><span class="line">))</span><br></pre></td></tr></table></figure><p><code>setBinding</code> 与 <code>evaluate</code> 增加之后我们就可以在 <code>app/build.gradle</code> 中增加 <code>:flutter</code> 依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">dependencies &#123;</span><br><span class="line">  implementation project(&apos;:flutter&apos;)</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时也需要在该文件中的 android() 配置指定一下编译时的 Java 版本为 Java 8，否则会报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">compileOptions &#123;</span><br><span class="line">  sourceCompatibility 1.8</span><br><span class="line">  targetCompatibility 1.8</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后执行一下 gradle sync 下载依赖库。如果集成成功，会在左侧的项目目录中看到与项目同级的 flutter_module 文件夹。</p><h3 id="2-2-2-arr-依赖集成"><a href="#2-2-2-arr-依赖集成" class="headerlink" title="2.2.2 arr 依赖集成"></a>2.2.2 arr 依赖集成</h3><p>如果需要用远程打包，而远程的机器上没有 flutter 环境，就可以把 flutter 打包成 arr 文件进行依赖。生成 aar 文件之后再在主工程里引用，flutter aar 中包含了 flutter sdk 的代码，所以这种方式是不需要flutter 环境的，也适合第三方快速接入。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> .android/</span><br><span class="line">./gradlew flutter:assembleDebug</span><br></pre></td></tr></table></figure><h3 id="2-3-添加-Flutter-Boost-依赖"><a href="#2-3-添加-Flutter-Boost-依赖" class="headerlink" title="2.3 添加 Flutter Boost 依赖"></a>2.3 添加 Flutter Boost 依赖</h3><p>首先在 Flutter Module 项目中加入 flutter-boost 依赖，即在 pubspec.yaml 文件中的 dev_dependencies 配置增加 flutter-boost 依赖：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dev_dependencies:</span></span><br><span class="line"><span class="attr">  flutter_boost:</span></span><br><span class="line"><span class="attr">     git:</span></span><br><span class="line"><span class="attr">        url:</span> <span class="string">'https://github.com/alibaba/flutter_boost.git'</span></span><br><span class="line"><span class="attr">        ref:</span> <span class="string">'1.12.13'</span></span><br></pre></td></tr></table></figure><p>以上 flutter boost 支持 AndroidX，如果想支持 support，则需要切换分支：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">flutter_boost:</span></span><br><span class="line"><span class="attr">    git:</span></span><br><span class="line"><span class="attr">        url:</span> <span class="string">'https://github.com/alibaba/flutter_boost.git'</span></span><br><span class="line"><span class="attr">        ref:</span> <span class="string">'task/task_v1.12.13_support_hotfixes'</span></span><br></pre></td></tr></table></figure><p>编辑完之后在 flutter_module 目录下执行以下命令安装依赖。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter packages get</span><br></pre></td></tr></table></figure><p>之后在 Android 工程中的 app 目录下的 build.gradle 文件中增加 <code>:flutter_boost</code> 依赖，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">    implementation project(&apos;:flutter&apos;)</span><br><span class="line">    implementation project(&apos;:flutter_boost&apos;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为 Flutter Boost 是以 Flutter Plugin 的形式集成到我们的项目中来的，所以我们还需要做一些工作，首先在 app 目录下的 build.gradle 文件的头部增加以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">def localProperties = new Properties()</span><br><span class="line">def localPropertiesFile = rootProject.file(&apos;local.properties&apos;)</span><br><span class="line">if (localPropertiesFile.exists()) &#123;</span><br><span class="line">    localPropertiesFile.withReader(&apos;UTF-8&apos;) &#123; reader -&gt;</span><br><span class="line">        localProperties.load(reader)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def flutterRoot = localProperties.getProperty(&apos;flutter.sdk&apos;)</span><br><span class="line">if (flutterRoot == null) &#123;</span><br><span class="line">    throw new GradleException(&quot;Flutter SDK not found. Define location with flutter.sdk in the local.properties file.&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def flutterVersionCode = localProperties.getProperty(&apos;flutter.versionCode&apos;)</span><br><span class="line">if (flutterVersionCode == null) &#123;</span><br><span class="line">    flutterVersionCode = &apos;1&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def flutterVersionName = localProperties.getProperty(&apos;flutter.versionName&apos;)</span><br><span class="line">if (flutterVersionName == null) &#123;</span><br><span class="line">    flutterVersionName = &apos;1.0&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这需要我们在 Android 工程下的 local.properties 文件中指定以下我们本地的 Flutter SDK 的位置（没有改文件就新建一个）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter.sdk = /Users/airing/flutter</span><br></pre></td></tr></table></figure><p>最后再在工程目录下的 settings.gradle 中增加以下代码引入 flutter-plugin：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def flutterProjectRoot = rootProject.projectDir.parentFile.toPath()</span><br><span class="line"></span><br><span class="line">def plugins = new Properties()</span><br><span class="line">def pluginsFile = new File(flutterProjectRoot.toFile(), &apos;.flutter-plugins&apos;)</span><br><span class="line">if (pluginsFile.exists()) &#123;</span><br><span class="line">    pluginsFile.withReader(&apos;UTF-8&apos;) &#123; reader -&gt; plugins.load(reader) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">plugins.each &#123; name, path -&gt;</span><br><span class="line">    def pluginDirectory = flutterProjectRoot.resolve(path).resolve(&apos;android&apos;).toFile()</span><br><span class="line">    include &quot;:$name&quot;</span><br><span class="line">    project(&quot;:$name&quot;).projectDir = pluginDirectory</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的，修改完 Android 工程的依赖之后，需要 gradle sync 一下。</p><p>至此，Flutter Boost 集成成功。接下来，我们使用 Flutter Boost 进行混合开发。而混合开发，主要涉及到两个场景：</p><ol><li>在 Native 项目中加入 Flutter 页面，即 Add a single Flutter screen。</li><li>在 Native 页面中嵌入 Flutter 模块，即 Add a Flutter Fragment。</li></ol><p>这两种方式在 Flutter 的官网上都有实践讲解，我们这里主要看看如果使用 Flutter boost 究竟要如何实现的，并顺便探究一下其实现原理。</p><h2 id="3-混合开发1：-Flutter-View"><a href="#3-混合开发1：-Flutter-View" class="headerlink" title="3. 混合开发1： Flutter View"></a>3. 混合开发1： Flutter View</h2><p><img src="https://pic3.zhimg.com/80/v2-0b258f4732ef0c884a9e831d04853302_720w.jpg" alt="img"></p><h3 id="3-1-在-Flutter-Module-中使用-Flutter-Boost"><a href="#3-1-在-Flutter-Module-中使用-Flutter-Boost" class="headerlink" title="3.1 在 Flutter Module 中使用 Flutter Boost"></a>3.1 在 Flutter Module 中使用 Flutter Boost</h3><p>首先引入依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &apos;package:flutter_boost/flutter_boost.dart&apos;;</span><br></pre></td></tr></table></figure><p>随后在 main 方法中运行的 rootWidget 中注册两个新的页面，以便 Native 工程可以跳转过来。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter_boost/flutter_boost.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'simple_page_widgets.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _MyAppState createState() =&gt; _MyAppState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyApp</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line"></span><br><span class="line">    FlutterBoost.singleton.registerPageBuilders(&#123;</span><br><span class="line">      <span class="string">'first'</span>: (pageName, params, _) =&gt; FirstRouteWidget(),</span><br><span class="line">      <span class="string">'second'</span>: (pageName, params, _) =&gt; SecondRouteWidget(),</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">        title: <span class="string">'Flutter Boost example'</span>,</span><br><span class="line">        builder: FlutterBoost.init(),</span><br><span class="line">        home: Container(</span><br><span class="line">            color:Colors.white</span><br><span class="line">        ));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码很简单：</p><ol><li>在 initState 的时候使用 <code>FlutterBoost.singleton.registerPageBuilders</code> 注册页面</li><li>在 bulider 中初始化 FlutterBoost。</li></ol><h3 id="3-2-在-Android-工程中使用-Flutter-Boost"><a href="#3-2-在-Android-工程中使用-Flutter-Boost" class="headerlink" title="3.2 在 Android 工程中使用 Flutter Boost"></a>3.2 在 Android 工程中使用 Flutter Boost</h3><p>在 Android 项目中增加一个 Flutter 页面，即是添加一个 Flutter Activity（iOS 即是添加一个新的 FlutterViewController，这里不再花篇幅去讲解 iOS 的实现了，有兴趣的同学可以自己去阅读 Flutter Boost 的示例代码和源码）。</p><p>这里我们在 AndroidManifest.xml 的 Application 配置中添加一个 Flutter Boost Activity：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:name</span>=<span class="string">"com.idlefish.flutterboost.containers.BoostFlutterActivity"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:theme</span>=<span class="string">"@style/Theme.AppCompat"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:configChanges</span>=<span class="string">"orientation|keyboardHidden|keyboard|screenSize|locale|layoutDirection|fontScale|screenLayout|density"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:hardwareAccelerated</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:windowSoftInputMode</span>=<span class="string">"adjustResize"</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">"io.flutter.embedding.android.SplashScreenDrawable"</span> <span class="attr">android:resource</span>=<span class="string">"@drawable/page_loading"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><p>除此之外还需要在 AndroidManifest.xml 中添加 flutterEmbedding 版本设置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">"flutterEmbedding"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:value</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">meta-data</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着要进行初始化 FlutterBoost 的工作，建议在 Application 的 onCreate 方法中初始化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line"></span><br><span class="line">        INativeRouter router = <span class="keyword">new</span> INativeRouter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openContainer</span><span class="params">(Context context, String url, Map&lt;String, Object&gt; urlParams, <span class="keyword">int</span> requestCode, Map&lt;String, Object&gt; exts)</span> </span>&#123;</span><br><span class="line">               String  assembleUrl=Utils.assembleUrl(url,urlParams);</span><br><span class="line">                PageRouter.openPageByUrl(context,assembleUrl, urlParams);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        FlutterBoost.BoostLifecycleListener boostLifecycleListener= <span class="keyword">new</span> FlutterBoost.BoostLifecycleListener()&#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeCreateEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEngineCreated</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPluginsRegistered</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEngineDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Platform platform = <span class="keyword">new</span> FlutterBoost</span><br><span class="line">                .ConfigBuilder(<span class="keyword">this</span>,router)</span><br><span class="line">                .isDebug(<span class="keyword">true</span>)</span><br><span class="line">                .whenEngineStart(FlutterBoost.ConfigBuilder.ANY_ACTIVITY_CREATED)</span><br><span class="line">                .renderMode(FlutterView.RenderMode.texture)</span><br><span class="line">                .lifecycleListener(boostLifecycleListener)</span><br><span class="line">                .build();</span><br><span class="line">        FlutterBoost.instance().init(platform);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FlutterBoost 在 Android 工程中初始化需要进行 4 步工作：</p><ol><li>注册路由跳转方法（后续会说 PageRouter 的实现）</li><li>增加 flutter boost 的生命周期监听函数，可以在 Flutter Engine 创建之前、创建之后、销毁之后与 Flutter Plugin 注册之后回调事件。</li><li>声明 Flutter boost 配置，把路由和生命周期函数配置上。</li><li>初始化 Flutter boost。</li></ol><p>接着要在 Android 工程中实现一个页面路由的工具类 PageRouter，这里直接摆上 Flutter Boost 示例代码中的实现了，比较全面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageRouter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> Map&lt;String, String&gt; pageName = <span class="keyword">new</span> HashMap&lt;String, String&gt;() &#123;&#123;</span><br><span class="line"></span><br><span class="line">        put(<span class="string">"first"</span>, <span class="string">"first"</span>);</span><br><span class="line">        put(<span class="string">"second"</span>, <span class="string">"second"</span>);</span><br><span class="line">        put(<span class="string">"tab"</span>, <span class="string">"tab"</span>);</span><br><span class="line">        put(<span class="string">"sample://flutterPage"</span>, <span class="string">"flutterPage"</span>);</span><br><span class="line">    &#125;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NATIVE_PAGE_URL = <span class="string">"sample://nativePage"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FLUTTER_PAGE_URL = <span class="string">"sample://flutterPage"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FLUTTER_FRAGMENT_PAGE_URL = <span class="string">"sample://flutterFragmentPage"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">openPageByUrl</span><span class="params">(Context context, String url, Map params)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> openPageByUrl(context, url, params, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">openPageByUrl</span><span class="params">(Context context, String url, Map params, <span class="keyword">int</span> requestCode)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String path = url.split(<span class="string">"\\?"</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        Log.i(<span class="string">"openPageByUrl"</span>,path);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (pageName.containsKey(path)) &#123;</span><br><span class="line">                Intent intent = BoostFlutterActivity.withNewEngine().url(pageName.get(path)).params(params)</span><br><span class="line">                        .backgroundMode(BoostFlutterActivity.BackgroundMode.opaque).build(context);</span><br><span class="line">                <span class="keyword">if</span>(context <span class="keyword">instanceof</span> Activity)&#123;</span><br><span class="line">                    Activity activity=(Activity)context;</span><br><span class="line">                    activity.startActivityForResult(intent,requestCode);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    context.startActivity(intent);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url.startsWith(FLUTTER_FRAGMENT_PAGE_URL)) &#123;</span><br><span class="line">                context.startActivity(<span class="keyword">new</span> Intent(context, FlutterFragmentPageActivity.class));</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url.startsWith(NATIVE_PAGE_URL)) &#123;</span><br><span class="line">                context.startActivity(<span class="keyword">new</span> Intent(context, NativePageActivity.class));</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-在-Native-项目中打开-Flutter-页面"><a href="#3-3-在-Native-项目中打开-Flutter-页面" class="headerlink" title="3.3 在 Native 项目中打开 Flutter 页面"></a>3.3 在 Native 项目中打开 Flutter 页面</h3><p>调用比较简单，在 Native 页面上的按钮绑定上 onClick 监听来实现点击打开我们注册的 Flutter 中的 first 页面，还可以顺便传上一个 map 参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">    Map params = <span class="keyword">new</span> HashMap();</span><br><span class="line">    params.put(<span class="string">"test1"</span>,<span class="string">"v_test1"</span>);</span><br><span class="line">    params.put(<span class="string">"test2"</span>,<span class="string">"v_test2"</span>);</span><br><span class="line"></span><br><span class="line">    PageRouter.openPageByUrl(<span class="keyword">this</span>, <span class="string">"first"</span>, params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们回顾一下我们在 3.1 中 Flutter 中注册页面的代码，发现有一个 params 参数，没错那就是 Native 打开 Flutter 时传过来的参数，我们可以打印出来或者传给 widget 做额外的处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FlutterBoost.singleton.registerPageBuilders(&#123;</span><br><span class="line">      <span class="string">'first'</span>: (pageName, params, _) =&gt; &#123;</span><br><span class="line">        print(<span class="string">"flutterPage params:$params"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> FirstRouteWidget(params:params);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">'second'</span>: (pageName, params, _) =&gt; SecondRouteWidget(),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-4-在-Flutter-页面中打开-Native-页面"><a href="#3-4-在-Flutter-页面中打开-Native-页面" class="headerlink" title="3.4 在 Flutter 页面中打开 Native 页面"></a>3.4 在 Flutter 页面中打开 Native 页面</h3><p>同样的，我们可能还会遇到一种场景，在 Native 中打开 Flutter 页面之后，我们 Flutter 中的业务又需要再打开一个新的 Native 页面，那需要怎么做？在 Flutter 中使用 <code>FlutterBoost.singleton.open</code> 即可，如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 后面的参数会在native的IPlatform.startActivity方法回调中拼接到url的query部分。</span></span><br><span class="line"><span class="comment">// 例如：sample://nativePage?aaa=bbb</span></span><br><span class="line">onTap: () =&gt; FlutterBoost.singleton</span><br><span class="line">     .open(<span class="string">"sample://nativePage"</span>, urlParams: &lt;<span class="keyword">dynamic</span>,<span class="keyword">dynamic</span>&gt;&#123;</span><br><span class="line">      <span class="string">"query"</span>: &#123;<span class="string">"aaa"</span>: <span class="string">"bbb"</span>&#125;</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><p>当然，这个方法不单单支持打开 Native 页面，也可以打开一个新的 Flutter 页面，只需要写好路由名就好，这里不再赘述。</p><blockquote><p>注：得益于 Flutter 的 JIT 编译模式，我们可以通过 flutter attach 命令来实现 hot reload 功能，在开发 Flutter 页面时无需重新编译工程。</p></blockquote><h2 id="4-混合开发2：Flutter-Fragment"><a href="#4-混合开发2：Flutter-Fragment" class="headerlink" title="4. 混合开发2：Flutter Fragment"></a>4. 混合开发2：Flutter Fragment</h2><p><img src="https://pic4.zhimg.com/80/v2-6c9bd1112d2cf2e32e0dbd448d8daf37_720w.jpg" alt="img"></p><p>我们假设工程中存在一个 Activity，配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:name</span>=<span class="string">".FlutterFragmentPageActivity"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:theme</span>=<span class="string">"@style/Theme.AppCompat"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:configChanges</span>=<span class="string">"orientation|keyboardHidden|keyboard|screenSize|locale|layoutDirection|fontScale|screenLayout|density"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:hardwareAccelerated</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:windowSoftInputMode</span>=<span class="string">"adjustResize"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">"io.flutter.embedding.android.SplashScreenDrawable"</span> <span class="attr">android:resource</span>=<span class="string">"@drawable/page_loading"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><p>而对应 layout 中我们要加入一个 FrameLayout 组件作为占位符：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/fragment_stub"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>最后，在代码中拿到对应 url 的 Flutter widget，塞到占位组件里即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">    FlutterFragment mFragment = <span class="keyword">new</span> FlutterFragment.NewEngineFragmentBuilder().url(<span class="string">"flutterFragment"</span>).build();</span><br><span class="line">    getSupportFragmentManager()</span><br><span class="line">        .beginTransaction()</span><br><span class="line">        .replace(R.id.fragment_stub, mFragment)</span><br><span class="line">        .commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-Flutter-Boost-源码解析"><a href="#5-Flutter-Boost-源码解析" class="headerlink" title="5. Flutter Boost 源码解析"></a>5. Flutter Boost 源码解析</h2><p>本节主要简单分析一下 Flutter Boost 的原理，只有知根知底才能用得得心应手。由于篇幅问题，不可能全部的源码都分析一遍，本节只分析具有代表性的源码，其余的原理基本一致，留给读者自行阅读。</p><p>那本节就从 Dart 端切入，关注其中两个 api，一个是注册页面的 registerPageBuilders，另一个是打开页面的 open，看看 Flutter Boost 是如何实现它们的。</p><h3 id="5-1-注册页面"><a href="#5-1-注册页面" class="headerlink" title="5.1 注册页面"></a>5.1 注册页面</h3><p>我们在使用 Flutter Boost 的流程中，第一步是要在 Flutter 中注册页面，调用了 registerPageBuilders 函数，那我们来看一下这个函数是如何实现的。</p><p>在 flutter_boost.dart 文件中，我们很容易就找到了这个函数的入口：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///Register a map builders</span></span><br><span class="line"><span class="keyword">void</span> registerPageBuilders(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, PageBuilder&gt; builders) &#123;</span><br><span class="line">  ContainerCoordinator.singleton.registerPageBuilders(builders);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它调用了 ContainerCoordinator 单例的 registerPageBuilders，那我们接着看 container_coordinator.dart 文件中这个函数的实现：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, PageBuilder&gt; _pageBuilders = &lt;<span class="built_in">String</span>, PageBuilder&gt;&#123;&#125;;</span><br><span class="line">  PageBuilder _defaultPageBuilder;</span><br><span class="line"></span><br><span class="line"><span class="comment">///Register page builder for a key.</span></span><br><span class="line"><span class="keyword">void</span> registerPageBuilder(<span class="built_in">String</span> pageName, PageBuilder builder) &#123;</span><br><span class="line">  <span class="keyword">if</span> (pageName != <span class="keyword">null</span> &amp;&amp; builder != <span class="keyword">null</span>) &#123;</span><br><span class="line">    _pageBuilders[pageName] = builder;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 PageBuilder 我们可以找到定义，是一个 Widget，那么这个函数其实就将我们注册的 Widget 塞到一个 Map 里，而我们指定的路由名，就是它的 key。那我们接着要关注的是 _pageBuilders 定义好之后会怎么被使用？</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">BoostContainerSettings _createContainerSettings(</span><br><span class="line">      <span class="built_in">String</span> name, <span class="built_in">Map</span> params, <span class="built_in">String</span> pageId) &#123;</span><br><span class="line">    Widget page;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> BoostContainerSettings routeSettings = BoostContainerSettings(</span><br><span class="line">        uniqueId: pageId,</span><br><span class="line">        name: name,</span><br><span class="line">        params: params,</span><br><span class="line">        builder: (BuildContext ctx) &#123;</span><br><span class="line">          <span class="comment">//Try to build a page using keyed builder.</span></span><br><span class="line">          <span class="keyword">if</span> (_pageBuilders[name] != <span class="keyword">null</span>) &#123;</span><br><span class="line">            page = _pageBuilders[name](name, params, pageId);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">//Build a page using default builder.</span></span><br><span class="line">          <span class="keyword">if</span> (page == <span class="keyword">null</span> &amp;&amp; _defaultPageBuilder != <span class="keyword">null</span>) &#123;</span><br><span class="line">            page = _defaultPageBuilder(name, params, pageId);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">assert</span>(page != <span class="keyword">null</span>);</span><br><span class="line">          Logger.log(<span class="string">'build widget:$page for page:$name($pageId)'</span>);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> page;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> routeSettings;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以发现，它在 _createContainerSettings 中 build widget 之后返回一个 routeSetting，该变量在 _nativeContainerWillShow 中被 pushContainer 调用，而 _nativeContainerWillShow 会在 _onMethodCall 中被调用。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bool</span> _nativeContainerWillShow(<span class="built_in">String</span> name, <span class="built_in">Map</span> params, <span class="built_in">String</span> pageId) &#123;</span><br><span class="line">    <span class="keyword">if</span> (FlutterBoost.containerManager?.containsContainer(pageId) != <span class="keyword">true</span>) &#123;</span><br><span class="line">      FlutterBoost.containerManager</span><br><span class="line">          ?.pushContainer(_createContainerSettings(name, params, pageId));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">Future&lt;<span class="keyword">dynamic</span>&gt; _onMethodCall(MethodCall call) &#123;</span><br><span class="line">    Logger.log(<span class="string">"onMetohdCall <span class="subst">$&#123;call.method&#125;</span>"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (call.method) &#123;</span><br><span class="line">      <span class="comment">// 省略无关代码</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"willShowPageContainer"</span>:</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">String</span> pageName = call.arguments[<span class="string">"pageName"</span>];</span><br><span class="line">          <span class="built_in">Map</span> params = call.arguments[<span class="string">"params"</span>];</span><br><span class="line">          <span class="built_in">String</span> uniqueId = call.arguments[<span class="string">"uniqueId"</span>];</span><br><span class="line">          _nativeContainerWillShow(pageName, params, uniqueId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// 省略无关代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上两段代码的作用是当 Dart 端监听到来自 Native 的通信之后，如果 Native 传递了一个要打开一个页面容器的信息（willShowPageContainer）之后，FlutterBoost 的容器管理器就会根据用户注册配置的路由页面去打开一个新的容器。而这里的 pushContainer 主要做一些路由管理和绑定监听等操作，我们就不再细看这部分的逻辑了，主要还是看看 _onMethodCall 的 Native 与 Dart 的互相通信。</p><h3 id="5-2-通信"><a href="#5-2-通信" class="headerlink" title="5.2 通信"></a>5.2 通信</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ContainerCoordinator(BoostChannel channel) &#123;</span><br><span class="line">    <span class="keyword">assert</span>(_instance == <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    _instance = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    channel.addEventListener(<span class="string">"lifecycle"</span>,</span><br><span class="line">        (<span class="built_in">String</span> name, <span class="built_in">Map</span> arguments) =&gt; _onChannelEvent(arguments));</span><br><span class="line"></span><br><span class="line">    channel.addMethodHandler((MethodCall call) =&gt; _onMethodCall(call));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Flutter Boost 中负责通信的是 BoostChannel，它的本质上是 MethodChannel 的一层封装，而 MethodChannel 是 Native 与 Flutter 通信的方案之一，有兴趣的同学可以自己查阅 MethodChannel 相关的资料加以了解。</p><p><img src="https://pic4.zhimg.com/80/v2-31df6b737954e158dabe0f573c34eaab_720w.jpg" alt="img"></p><blockquote><p>可以阅读 Flutter 官网对 MethodChannel 的介绍：<a href="https://link.zhihu.com/?target=https%3A//flutter.dev/docs/development/platform-integration/platform-channels" target="_blank" rel="noopener">https://flutter.dev/docs/development/platform-integration/platform-channels</a></p></blockquote><h3 id="5-3-打开页面"><a href="#5-3-打开页面" class="headerlink" title="5.3 打开页面"></a>5.3 打开页面</h3><p>最后我们再来看一个打开页面的函数 open，它的实现在库中也容易找到：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Future&lt;<span class="built_in">Map</span>&lt;<span class="keyword">dynamic</span>, <span class="keyword">dynamic</span>&gt;&gt; open(<span class="built_in">String</span> url,</span><br><span class="line">      &#123;<span class="built_in">Map</span>&lt;<span class="keyword">dynamic</span>, <span class="keyword">dynamic</span>&gt; urlParams, <span class="built_in">Map</span>&lt;<span class="keyword">dynamic</span>, <span class="keyword">dynamic</span>&gt; exts&#125;) &#123;</span><br><span class="line">    <span class="built_in">Map</span>&lt;<span class="keyword">dynamic</span>, <span class="keyword">dynamic</span>&gt; properties = <span class="keyword">new</span> <span class="built_in">Map</span>&lt;<span class="keyword">dynamic</span>, <span class="keyword">dynamic</span>&gt;();</span><br><span class="line">    properties[<span class="string">"url"</span>] = url;</span><br><span class="line">    properties[<span class="string">"urlParams"</span>] = urlParams;</span><br><span class="line">    properties[<span class="string">"exts"</span>] = exts;</span><br><span class="line">    <span class="keyword">return</span> channel.invokeMethod&lt;<span class="built_in">Map</span>&lt;<span class="keyword">dynamic</span>, <span class="keyword">dynamic</span>&gt;&gt;(<span class="string">'openPage'</span>, properties);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以发现，它的工作其实就是包装好参数后把 openPage 的消息发送给 Native。那我们再来看看 Native 侧接受到这个消息之后作何处理吧！在 Android 侧的 Flutter Boost 源码中可以找到 FlutterBoostPlugin.java 这个文件，其中有 MethodChannel 的逻辑来监听 Dart 侧的消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BoostMethodHandler</span> <span class="keyword">implements</span> <span class="title">MethodChannel</span>.<span class="title">MethodCallHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMethodCall</span><span class="params">(MethodCall methodCall, <span class="keyword">final</span> MethodChannel.Result result)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            FlutterViewContainerManager mManager = (FlutterViewContainerManager) FlutterBoost.instance().containerManager();</span><br><span class="line">            <span class="keyword">switch</span> (methodCall.method) &#123;</span><br><span class="line">                <span class="comment">// 省略无关的分支</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">"openPage"</span>: &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Map&lt;String, Object&gt; params = methodCall.argument(<span class="string">"urlParams"</span>);</span><br><span class="line">                        Map&lt;String, Object&gt; exts = methodCall.argument(<span class="string">"exts"</span>);</span><br><span class="line">                        String url = methodCall.argument(<span class="string">"url"</span>);</span><br><span class="line"></span><br><span class="line">                        mManager.openContainer(url, params, exts, <span class="keyword">new</span> FlutterViewContainerManager.OnResult() &#123;</span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResult</span><span class="params">(Map&lt;String, Object&gt; rlt)</span> </span>&#123;</span><br><span class="line">                                <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                    result.success(rlt);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                        result.error(<span class="string">"open page error"</span>, t.getMessage(), t);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>: &#123;</span><br><span class="line">                    result.notImplemented();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在收到来自 Dart 的 openPage 消息后，Android 侧的容器管理器（FlutterViewContainerMananger）会根据 Dart 侧携带来的配置数据打开一个容器，而这个 openContainer 通过阅读源码，可以发现它最后是一个抽象方法，需要我们自己在业务侧实现。回看我们在 3.2 节中在 Android 中初始化 Flutter Boost 第一步工作，做的就是实现这个 openContainer，而它最后交由我们封装的 PageRouter 工具类来实现了，即 context.startActivity()。</p><p>至此，我们在 Android 工程中集成了 Flutter Boost 来实现 Flutter 在 Android 项目中的混合开发。本文只是初步分析了下 Flutter Boost 的源码，后续有机会会补上详细的分析。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1. 简介&quot;&gt;&lt;/a&gt;1. 简介&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//github.com/alibaba/flutter_boost&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Flutter Boost&lt;/a&gt; 是闲鱼团队开发的一个 Flutter 混合开发框架，项目背景可以看看闲鱼的这篇文章：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s%3F__biz%3DMzU4MDUxOTI5NA%3D%3D%26mid%3D2247484367%26idx%3D1%26sn%3Dfcbc485f068dae5de9f68d52607ea08f%26chksm%3Dfd54d7deca235ec86249a9e3714ec18be8b2d6dc580cae19e4e5113533a6c5b44dfa5813c4c3%26scene%3D0%26subscene%3D131%26clicktime%3D1551942425%26ascene%3D7%26devicetype%3Dandroid-28%26version%3D2700033b%26nettype%3Dctnet%26abtest_cookie%3DBAABAAoACwASABMABAAklx4AVpkeAMSZHgDWmR4AAAA%3D%26lang%3Dzh_CN%26pass_ticket%3D1qvHqOsbLBHv3wwAcw577EHhNjg6EKXqTfnOiFbbbaw%3D%26wx_header%3D1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;码上用它开始Flutter混合开发——FlutterBoost&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;文章中主要讲述了多引擎存在一些实际问题，所以闲鱼目前采用的混合方案是共享同一个引擎的方案。而 Flutter Boost 的 Feature 如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可复用通用型混合方案&lt;/li&gt;
&lt;li&gt;支持更加复杂的混合模式，比如支持主页Tab这种情况&lt;/li&gt;
&lt;li&gt;无侵入性方案：不再依赖修改Flutter的方案&lt;/li&gt;
&lt;li&gt;支持通用页面生命周期&lt;/li&gt;
&lt;li&gt;统一明确的设计概念&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Flutter Boost 采用共享引擎的模式来实现，主要思路是由 Native 容器 Container 通过消息驱动 Flutter 页面容器 Container，从而达到 Native Container 与 Flutter Container 的同步目的。简单的理解，闲鱼想做到把 Flutter 容器做成浏览器的感觉。填写一个页面地址，然后由容器去管理页面的绘制。在 Native 侧我们只需要关心如果初始化容器，然后设置容器对应的页面标志即可。&lt;/p&gt;
&lt;p&gt;鉴于网上没有相关的接入文档和使用教程，我这几天也恰好抽空研究了一下，遂整理成文，仅供参考。由于篇幅原因，本文只研究 Android 端的接入与源码，iOS 的部分后续有机会则补充文章来讲解。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：本文接入的 Flutter Boost 版本为 1.12.13，对应支持的 Flutter SDK 版本为 1.12.13-hotfixes，是目前最新的版本。但 Flutter Boost 版本更新之后，接入方式和使用方式可能会有一些改变，故参考本文时请认准 1.12.13 版本。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="https://zhangmiao.cc/categories/Android/"/>
    
      <category term="Flutter Tips" scheme="https://zhangmiao.cc/categories/Android/Flutter-Tips/"/>
    
    
      <category term="Android" scheme="https://zhangmiao.cc/tags/Android/"/>
    
      <category term="Flutter Tips" scheme="https://zhangmiao.cc/tags/Flutter-Tips/"/>
    
  </entry>
  
  <entry>
    <title>FlutterUnit开源篇</title>
    <link href="https://zhangmiao.cc/posts/d75d6183.html"/>
    <id>https://zhangmiao.cc/posts/d75d6183.html</id>
    <published>2020-04-24T09:36:43.000Z</published>
    <updated>2020-06-03T10:30:01.384Z</updated>
    
    <content type="html"><![CDATA[<h3 id="FlutterUnit-下载体验"><a href="#FlutterUnit-下载体验" class="headerlink" title="FlutterUnit 下载体验:"></a>FlutterUnit 下载体验:</h3><table><thead><tr><th>FlutterUnit.apk 下载</th><th>FlutterUnit mac版 下载</th><th>Github仓库地址</th></tr></thead><tbody><tr><td><img src="https://user-gold-cdn.xitu.io/2020/5/10/171fc4325dbf90b0?w=300&h=390&f=png&s=23688" alt></td><td><img src="https://user-gold-cdn.xitu.io/2020/5/4/171e051a0d2cbf37?w=300&h=390&f=png&s=24001" alt></td><td><img src="https://user-gold-cdn.xitu.io/2020/5/4/171e051a0cd9efd7?w=300&h=390&f=png&s=7596" alt></td></tr></tbody></table><ul><li><p>Android下载链接: <a href="http://photo.toly1994.com/release/FlutterUnit.apk" target="_blank" rel="noopener">http://photo.toly1994.com/release/FlutterUnit.apk</a></p></li><li><p>Mac下载链接: <a href="http://photo.toly1994.com/release$flutter_unit_mac.zip" target="_blank" rel="noopener">http://photo.toly1994.com/release$flutter_unit_mac.zip</a></p></li><li><p>✨ <a href="https://github.com/toly1994328/FlutterUnit/tree/flutter_unit_mac" target="_blank" rel="noopener">Flutter Unit mac版支持 </a></p></li></ul><hr><blockquote><p>当前Flutter 版本</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a1@toly ~ % flutter --version</span><br><span class="line">Flutter 1.17.0 • channel stable • https://github.com/flutter/flutter.git</span><br><span class="line">Framework • revision e6b34c2b5c (5 days ago) • 2020-05-02 11:39:18 -0700</span><br><span class="line">Engine • revision 540786dd51</span><br><span class="line">Tools • Dart 2.8.1</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="Flutter-Unit-周边"><a href="#Flutter-Unit-周边" class="headerlink" title="Flutter Unit 周边"></a>Flutter Unit 周边</h4><ul><li>🔥 <a href="http://king.toly1994.com/FlutterUnit_update.html" target="_blank" rel="noopener">Flutter Unit 更新记录 </a></li></ul><hr><h3 id="一、组件的展示页面"><a href="#一、组件的展示页面" class="headerlink" title="一、组件的展示页面"></a>一、组件的展示页面</h3><h4 id="1-210-组件收录"><a href="#1-210-组件收录" class="headerlink" title="1. 210+组件收录"></a>1. <code>210+组件收录</code></h4><blockquote><p>Flutter源码中的可用的组件一共350个左右，纷繁复杂，也没有明确的分类标准<br>FlutterUnit 对<code>大大小小，常用不常用</code>的组件能收的尽量收录。并<code>根据个人感觉进行评星</code><br><code>目前收录组件213个</code>，每个都有至少一个演示展现和代码展示。</p></blockquote><table><thead><tr><th>.</th><th>.</th><th>.</th></tr></thead><tbody><tr><td><img src="https://user-gold-cdn.xitu.io/2020/4/14/17175af35f63c8fb?w=1080&h=2340&f=jpeg&s=158267" alt></td><td><img src="https://user-gold-cdn.xitu.io/2020/4/14/17175b0c1c92a004?w=1080&h=2340&f=jpeg&s=161619" alt></td><td><img src="https://user-gold-cdn.xitu.io/2020/4/14/17175b0a95d5c549?w=1080&h=2340&f=jpeg&s=150406" alt></td></tr><tr><td><img src="https://user-gold-cdn.xitu.io/2020/4/14/17175af9b09f76f6?w=1080&h=2340&f=jpeg&s=153575" alt></td><td><img src="https://user-gold-cdn.xitu.io/2020/4/14/17175b0766ed455b?w=1080&h=2340&f=jpeg&s=166128" alt></td><td><img src="https://user-gold-cdn.xitu.io/2020/4/14/17175af6b9523083?w=1080&h=2340&f=jpeg&s=163290" alt></td></tr></tbody></table><hr><h4 id="2-组件详情页"><a href="#2-组件详情页" class="headerlink" title="2. 组件详情页"></a>2. 组件详情页</h4><blockquote><p><code>213个组件</code>全部都有详情页。对于重要的组件会详细展现<br>一般都会有某个演示对应的组件和属性,尽量做到细致，如果有需要补充，欢迎联系我。<br><code>最重要的是: 所有的演示展现都是Flutter的组件形成的，而非图片，这就意味着可操作性更高。</code></p></blockquote><table><thead><tr><th>.</th><th>.</th><th>.</th></tr></thead><tbody><tr><td><img src="https://user-gold-cdn.xitu.io/2020/4/14/17175c3f21476fc5?w=1080&h=2340&f=jpeg&s=67728" alt></td><td><img src="https://user-gold-cdn.xitu.io/2020/4/14/17175c44a1cfa94c?w=1080&h=2340&f=jpeg&s=92664" alt></td><td><img src="https://user-gold-cdn.xitu.io/2020/4/14/17175c4a7cd90126?w=1080&h=2340&f=jpeg&s=114306" alt></td></tr><tr><td><img src="https://user-gold-cdn.xitu.io/2020/4/14/17175c5171d0373f?w=1080&h=2340&f=jpeg&s=159437" alt></td><td><img src="https://user-gold-cdn.xitu.io/2020/4/14/17175c56ce136676?w=1080&h=2340&f=jpeg&s=87311" alt></td><td><img src="https://user-gold-cdn.xitu.io/2020/4/14/17175c61623c6462?w=1080&h=2340&f=jpeg&s=108215" alt></td></tr></tbody></table><hr><h4 id="3-组件的可操作性"><a href="#3-组件的可操作性" class="headerlink" title="3. 组件的可操作性"></a>3. 组件的可操作性</h4><blockquote><p>对一些操作交互的组件或有可操作性的某些组件，<code>提供操作演示</code></p></blockquote><table><thead><tr><th>.</th><th>.</th><th>.</th></tr></thead><tbody><tr><td><img src="https://user-gold-cdn.xitu.io/2020/4/14/17175df98f83e05c?w=362&h=724&f=gif&s=1061771" alt></td><td><img src="https://user-gold-cdn.xitu.io/2020/4/14/17175dcce9022ddc?w=362&h=724&f=gif&s=232124" alt></td><td><img src="https://user-gold-cdn.xitu.io/2020/4/14/17175de9b348a26a?w=362&h=724&f=gif&s=946647" alt></td></tr></tbody></table><hr><h4 id="4-相关组件的关联切换"><a href="#4-相关组件的关联切换" class="headerlink" title="4. 相关组件的关联切换"></a>4. 相关组件的关联切换</h4><blockquote><p><code>相关组件通过link to 可以进行切换, 满足你的探索欲。</code><br>如果有的关联未加入，欢迎联系我，对我来说，加个数字就行了。</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2020/4/14/17175ea0ea610669?w=610&h=226&f=png&s=37961" alt></p><table><thead><tr><th>.</th><th>.</th><th>.</th></tr></thead><tbody><tr><td><img src="https://user-gold-cdn.xitu.io/2020/4/14/17175e8c2a46e1f3?w=362&h=724&f=gif&s=471182" alt></td><td><img src="https://user-gold-cdn.xitu.io/2020/4/14/17175e921dfc5c81?w=362&h=724&f=gif&s=658708" alt></td><td><img src="https://user-gold-cdn.xitu.io/2020/4/14/17175e968c4f68e4?w=362&h=724&f=gif&s=300803" alt></td></tr></tbody></table><hr><h4 id="5-代码的查看和分享"><a href="#5-代码的查看和分享" class="headerlink" title="5. 代码的查看和分享"></a>5. 代码的查看和分享</h4><blockquote><p>激动人心的是，你可以通过右侧的图标<code>展开/隐藏 实现下面效果的代码</code><br>并且<code>支持分享</code>，如果你想亲自体验，so，easy ! 而且<code>代码高亮样式可以自定义</code>。</p></blockquote><table><thead><tr><th>.</th><th>.</th><th>.</th></tr></thead><tbody><tr><td><img src="https://user-gold-cdn.xitu.io/2020/4/14/171760369b9ae9d6?w=362&h=724&f=gif&s=1207409" alt></td><td><img src="https://user-gold-cdn.xitu.io/2020/4/14/1717603ad9119f2a?w=362&h=724&f=gif&s=1064037" alt></td><td><img src="https://user-gold-cdn.xitu.io/2020/4/14/1717604b10154271?w=362&h=724&f=gif&s=2849830" alt></td></tr></tbody></table><hr><h3 id="二、全局配置"><a href="#二、全局配置" class="headerlink" title="二、全局配置"></a>二、全局配置</h3><h4 id="1-颜色主题"><a href="#1-颜色主题" class="headerlink" title="1. 颜色主题"></a>1. 颜色主题</h4><blockquote><p>只提供八种颜色，可在<code>右滑菜单页</code>的<code>我的主题</code>配置,<code>可以拓展</code></p></blockquote><table><thead><tr><th>.</th><th>.</th><th>.</th></tr></thead><tbody><tr><td><img src="https://user-gold-cdn.xitu.io/2020/4/14/171760c51633383d?w=1080&h=2340&f=jpeg&s=94977" alt></td><td><img src="https://user-gold-cdn.xitu.io/2020/4/14/171760cbc7d0ddba?w=1080&h=2340&f=jpeg&s=89001" alt></td><td><img src="https://user-gold-cdn.xitu.io/2020/4/14/171760b8c24c188f?w=1080&h=2340&f=jpeg&s=168263" alt></td></tr></tbody></table><hr><h4 id="2-字体配置"><a href="#2-字体配置" class="headerlink" title="2.字体配置"></a>2.字体配置</h4><blockquote><p>支持全局字体设置,<code>可以拓展</code></p></blockquote><table><thead><tr><th>.</th><th>.</th><th>.</th></tr></thead><tbody><tr><td><img src="https://user-gold-cdn.xitu.io/2020/4/14/1717615741f8d2e3?w=1080&h=2340&f=png&s=167438" alt></td><td><img src="https://user-gold-cdn.xitu.io/2020/4/14/171761667bbf6051?w=1080&h=2340&f=png&s=808002" alt></td><td><img src="https://user-gold-cdn.xitu.io/2020/4/14/1717617b8ab59421?w=1080&h=2340&f=png&s=796618" alt></td></tr></tbody></table><hr><h4 id="3-item样式设置"><a href="#3-item样式设置" class="headerlink" title="3.item样式设置"></a>3.item样式设置</h4><blockquote><p>支持item样式设置，<code>可以拓展，支持征集</code>，详见<code>Flutter Unit 1.0 征集方案</code></p></blockquote><table><thead><tr><th>.</th><th>.</th><th>.</th></tr></thead><tbody><tr><td><img src="https://user-gold-cdn.xitu.io/2020/4/14/1717620037fd9a50?w=1080&h=2340&f=jpeg&s=105051" alt></td><td><img src="https://user-gold-cdn.xitu.io/2020/4/14/1717620161fa89ec?w=1080&h=2340&f=jpeg&s=158327" alt></td><td><img src="https://user-gold-cdn.xitu.io/2020/4/14/171762026eb8656d?w=1080&h=2340&f=jpeg&s=146688" alt></td></tr></tbody></table><hr><h4 id="4-代码面板风格设置"><a href="#4-代码面板风格设置" class="headerlink" title="4.代码面板风格设置"></a>4.代码面板风格设置</h4><blockquote><p>支持代码风格设置，<code>可以拓展，支持征集</code>，详见<code>Flutter Unit 1.0 征集方案</code></p></blockquote><table><thead><tr><th>.</th><th>.</th></tr></thead><tbody><tr><td><img src="https://user-gold-cdn.xitu.io/2020/4/14/1717628b5fe1591c?w=1080&h=759&f=png&s=105023" alt></td><td><img src="https://user-gold-cdn.xitu.io/2020/4/14/1717629001ade9b0?w=1080&h=773&f=png&s=102672" alt></td></tr></tbody></table><hr><h3 id="三、搜索与收藏功能"><a href="#三、搜索与收藏功能" class="headerlink" title="三、搜索与收藏功能"></a>三、搜索与收藏功能</h3><h4 id="1-搜索功能"><a href="#1-搜索功能" class="headerlink" title="1.搜索功能"></a>1.搜索功能</h4><blockquote><p>由于Flutter中Widget比较杂乱，不太好分类，所以搜索是非常重要的<br>另外可以根据星级进行过滤，支持多选。目前正在考虑根据功能分类，之后会有所完善。</p></blockquote><table><thead><tr><th>.</th><th>.</th><th>.</th></tr></thead><tbody><tr><td><img src="https://user-gold-cdn.xitu.io/2020/4/14/171775fc594e4605?w=1080&h=2340&f=png&s=265281" alt></td><td><img src="https://user-gold-cdn.xitu.io/2020/4/14/171775fd99268a78?w=1080&h=2340&f=png&s=424599" alt></td><td><img src="https://user-gold-cdn.xitu.io/2020/4/14/171775fefef50fb9?w=1080&h=2340&f=png&s=414437" alt></td></tr></tbody></table><hr><h4 id="2-搜藏功能"><a href="#2-搜藏功能" class="headerlink" title="2.搜藏功能"></a>2.搜藏功能</h4><blockquote><p>搜藏页做得比较简陋，后面打算做收藏夹，可以自己创建的那种。</p></blockquote><table><thead><tr><th>.</th><th>.</th><th>.</th></tr></thead><tbody><tr><td><img src="https://user-gold-cdn.xitu.io/2020/4/14/17177668aa7fd135?w=1080&h=2340&f=png&s=640245" alt></td><td><img src="https://user-gold-cdn.xitu.io/2020/4/14/17177665c53256b4?w=1080&h=2340&f=png&s=797902" alt></td><td><img src="https://user-gold-cdn.xitu.io/2020/4/14/1717765ec688731c?w=1080&h=2340&f=png&s=272421" alt></td></tr></tbody></table><blockquote><p><code>FlutterUnit 1.0</code>目前基本就是这么多功能，可以在Github中下载打包后的apk玩玩<br>希望能对你的Flutter学习有所帮助。</p></blockquote><hr><h4 id="3-关于我与项目"><a href="#3-关于我与项目" class="headerlink" title="3.关于我与项目"></a>3.关于我与项目</h4><blockquote><p>不多说，都在图里。</p></blockquote><table><thead><tr><th>.</th><th>.</th><th>.</th></tr></thead><tbody><tr><td><img src="https://user-gold-cdn.xitu.io/2020/4/14/171777c67ed0c205?w=1080&h=2340&f=png&s=1272888" alt></td><td><img src="https://user-gold-cdn.xitu.io/2020/4/14/171777c8ccfce16b?w=1080&h=2340&f=png&s=1105006" alt></td><td><img src="https://user-gold-cdn.xitu.io/2020/4/14/171777caed85b26a?w=1080&h=2340&f=png&s=1190414" alt></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><hr><h3 id="Flutter-Unit-Bug-Feature"><a href="#Flutter-Unit-Bug-Feature" class="headerlink" title="Flutter Unit  Bug - Feature"></a>Flutter Unit  Bug - Feature</h3><ul><li><code>2020-4-16</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fixed &quot;     修改样式无法点击的问题。</span><br><span class="line">fixed &quot;     一些已知文案的错误。</span><br><span class="line">fixed &quot;     hero动画闪现不同步问题。</span><br></pre></td></tr></table></figure><hr><ul><li><code>2020-4-17</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fixed &quot;     进入收藏页，再回到首页，顶部显示不同步的问题。</span><br><span class="line">fixed &quot;     主页item双击黑屏问题。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">feature &quot;   支持详情页【相关链接的栈管理】,</span><br><span class="line">        &quot;   即: 点击多个链接，不直接返回主页.</span><br></pre></td></tr></table></figure><hr><ul><li><code>2020-4-18</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">feature &quot;   小彩蛋: 【长按】底部栏【最左侧按钮】,打开左边菜单栏</span><br><span class="line">        &quot;   【长按】底部栏【最右侧按钮】,打开右边菜单栏</span><br><span class="line"></span><br><span class="line">fixed &quot;     收藏集的AppBar背景色同主页选中色。</span><br></pre></td></tr></table></figure><hr><ul><li><code>2020-4-19</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">optimize &quot;   添加收录【LayoutBuilder】组件</span><br><span class="line">optimize &quot;   添加收录【IgnorePointer】组件</span><br><span class="line">optimize &quot;   添加收录【AbsorbPointer】组件</span><br><span class="line">optimize &quot;   添加收录【BackdropFilter】组件</span><br></pre></td></tr></table></figure><p>作者：张风捷特烈</p><p>链接：<a href="https://juejin.im/post/5e94e4d3f265da480836b943" target="_blank" rel="noopener">https://juejin.im/post/5e94e4d3f265da480836b943</a></p><p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;FlutterUnit-下载体验&quot;&gt;&lt;a href=&quot;#FlutterUnit-下载体验&quot; class=&quot;headerlink&quot; title=&quot;FlutterUnit 下载体验:&quot;&gt;&lt;/a&gt;FlutterUnit 下载体验:&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;FlutterUnit.apk 下载&lt;/th&gt;
&lt;th&gt;FlutterUnit mac版 下载&lt;/th&gt;
&lt;th&gt;Github仓库地址&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2020/5/10/171fc4325dbf90b0?w=300&amp;h=390&amp;f=png&amp;s=23688&quot; alt&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2020/5/4/171e051a0d2cbf37?w=300&amp;h=390&amp;f=png&amp;s=24001&quot; alt&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2020/5/4/171e051a0cd9efd7?w=300&amp;h=390&amp;f=png&amp;s=7596&quot; alt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Android下载链接: &lt;a href=&quot;http://photo.toly1994.com/release/FlutterUnit.apk&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://photo.toly1994.com/release/FlutterUnit.apk&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mac下载链接: &lt;a href=&quot;http://photo.toly1994.com/release$flutter_unit_mac.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://photo.toly1994.com/release$flutter_unit_mac.zip&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;✨ &lt;a href=&quot;https://github.com/toly1994328/FlutterUnit/tree/flutter_unit_mac&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Flutter Unit mac版支持 &lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;当前Flutter 版本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a1@toly ~ % flutter --version&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Flutter 1.17.0 • channel stable • https://github.com/flutter/flutter.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Framework • revision e6b34c2b5c (5 days ago) • 2020-05-02 11:39:18 -0700&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Engine • revision 540786dd51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Tools • Dart 2.8.1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Android" scheme="https://zhangmiao.cc/categories/Android/"/>
    
      <category term="Flutter Tips" scheme="https://zhangmiao.cc/categories/Android/Flutter-Tips/"/>
    
    
      <category term="Android" scheme="https://zhangmiao.cc/tags/Android/"/>
    
      <category term="Flutter Tips" scheme="https://zhangmiao.cc/tags/Flutter-Tips/"/>
    
  </entry>
  
  <entry>
    <title>flutter ListView取消头部空白</title>
    <link href="https://zhangmiao.cc/posts/c3648888.html"/>
    <id>https://zhangmiao.cc/posts/c3648888.html</id>
    <published>2020-04-18T10:08:25.000Z</published>
    <updated>2020-04-18T10:09:32.557Z</updated>
    
    <content type="html"><![CDATA[<p><strong>ListView头部有一段空白区域，是因为当ListView没有和AppBar一起使用时，头部会有一个padding，为了去掉padding，可以使用MediaQuery.removePadding:</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Widget _rubbishList()&#123;</span><br><span class="line">    <span class="keyword">return</span> MediaQuery.removePadding(</span><br><span class="line">        removeTop: <span class="keyword">true</span>,</span><br><span class="line">        context:  context,</span><br><span class="line">        child: Container(</span><br><span class="line">            margin: EdgeInsets.only(left: <span class="number">20</span>,right: <span class="number">20</span>),</span><br><span class="line">            height: ScreenUtil().setHeight(<span class="number">700</span>),</span><br><span class="line">            child: ListView.builder(</span><br><span class="line">                itemCount: rubbishList.length,</span><br><span class="line">                itemBuilder: (context,index)&#123;</span><br><span class="line">                  <span class="keyword">return</span> _cardItem(index);</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">    );</span><br><span class="line"> </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;ListView头部有一段空白区域，是因为当ListView没有和AppBar一起使用时，头部会有一个padding，为了去掉padding，可以使用MediaQuery.removePadding:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Widget _rubbishList()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; MediaQuery.removePadding(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        removeTop: &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        context:  context,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        child: Container(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            margin: EdgeInsets.only(left: &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;,right: &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            height: ScreenUtil().setHeight(&lt;span class=&quot;number&quot;&gt;700&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            child: ListView.builder(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                itemCount: rubbishList.length,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                itemBuilder: (context,index)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _cardItem(index);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Android" scheme="https://zhangmiao.cc/categories/Android/"/>
    
      <category term="Flutter Tips" scheme="https://zhangmiao.cc/categories/Android/Flutter-Tips/"/>
    
    
      <category term="Android" scheme="https://zhangmiao.cc/tags/Android/"/>
    
      <category term="Flutter Tips" scheme="https://zhangmiao.cc/tags/Flutter-Tips/"/>
    
  </entry>
  
  <entry>
    <title>Flutter常见数据类型及数据类型转换</title>
    <link href="https://zhangmiao.cc/posts/87ca1d5.html"/>
    <id>https://zhangmiao.cc/posts/87ca1d5.html</id>
    <published>2020-04-08T03:06:08.000Z</published>
    <updated>2020-04-08T03:32:08.818Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>既然 Dart 是一门语言，那么就和我们所知道语言一样，有基本的数据类型以及常见的流程处理语法，那么我们就来了解下。</p><p>Dart 的所有东西都是对象，包括数字，函数等。它们都继承自 Object ，默认是都是 null（包括数字），所以数字，字符串都可以调用各种方法。</p><h2 id="常亮与变量"><a href="#常亮与变量" class="headerlink" title="常亮与变量"></a>常亮与变量</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>使用 var 声明变量，可赋予不同类型的值；未初始化时，默认值为 null ；使用 final 声明一个只能赋值一次的变量</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">   </span><br><span class="line">  <span class="comment">// 声明一个变量 a</span></span><br><span class="line">  <span class="keyword">var</span> a;</span><br><span class="line">  <span class="built_in">print</span>(a);   <span class="comment">// 打印 a 的值，显示为 null</span></span><br><span class="line"> </span><br><span class="line">  a = <span class="number">10</span>;</span><br><span class="line">  <span class="built_in">print</span>(a);   <span class="comment">//  打印出来的结果为 10</span></span><br><span class="line"> </span><br><span class="line">  a = <span class="string">"测试字符串"</span>;</span><br><span class="line">  <span class="built_in">print</span>(a);   <span class="comment">// 打印出来的结果为 测试字符串</span></span><br><span class="line"> </span><br><span class="line">  a = <span class="number">30</span>;</span><br><span class="line">  <span class="built_in">print</span>(a);   <span class="comment">//  打印出来的结果为 30</span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">final</span> b = <span class="number">10</span>;</span><br><span class="line">  b = <span class="number">20</span>; <span class="comment">// 这个会报错，有提示： [dart] 'b', a final variable, can only be set once.</span></span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　</p><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>在 dart 中使用 const 声明常量；使用 const 声明的必须是编译期常量。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="keyword">const</span> a  = <span class="number">10</span>;</span><br><span class="line">  a = <span class="number">20</span>;   <span class="comment">// 这里也会报错：[dart] Constant variables can't be assigned a value.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a>　　<p>在上面我们可以看到 dart 的一些简单的语法。其实和 js 蛮像，声明的变量的数据类型是随便去改变的，没有一个固定的数据类型（例如：java 这种语言）。其次就是 final 和 const 都可以声明变量，并且声明了变量之后都不能修改。</p><p>这里简单的说下 final 与 const 的区别：</p><p>final 要求变量只能初始化一次，并不要求赋的值一定是编译时常量，可以是常量也可以不是。而 const 要求在声明时初始化，并且赋值必需为编译时常量。</p><h2 id="Dart中的内置类型"><a href="#Dart中的内置类型" class="headerlink" title="Dart中的内置类型"></a>Dart中的内置类型</h2><p>在Dart 有几种内置的数据类型：数值型-Number、布尔型-boolean、键值对-Map、字符串-String、列表-List、其他类型-Runes、Symbols</p><h2 id="数值型"><a href="#数值型" class="headerlink" title="数值型"></a>数值型</h2><p>Dart 中只提供了两种类型：</p><p>num<br>1、整形int<br>2、浮点型double</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">   </span><br><span class="line">  <span class="built_in">num</span> a = <span class="number">10</span>;   <span class="comment">// 整形</span></span><br><span class="line">  a = <span class="number">20.1</span>;     <span class="comment">// 浮点型</span></span><br><span class="line"> </span><br><span class="line">  <span class="built_in">int</span> i = <span class="number">10</span>;</span><br><span class="line">  i = <span class="number">10.1</span>;     <span class="comment">// 这个地方会报错，因为将 int 型的数据改为 double 型</span></span><br><span class="line"> </span><br><span class="line">  <span class="built_in">double</span> d = <span class="number">20.1</span>;</span><br><span class="line">  d = <span class="number">20</span>;       <span class="comment">// 这个地方会报错，因为将 double 型的数据改为 int 型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　</p><p>从上面可以看到如果是使用 num 声明的变量，可以随意的转换类型，但是如果是使用了int 或者 double 明确的声明，那么就不能转换了</p><h2 id="数值型的操作"><a href="#数值型的操作" class="headerlink" title="数值型的操作"></a>数值型的操作</h2><p>运算符： +、 - 、* 、/ 、 ~/ 、 %</p><p>常用属性： isNaN、isEven、isOdd</p><p>常用方法：abs()、round()、floorl()、ceil()、toInt()、toDouble()</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 由于常用的方法在其他语言中都有，就不过去的赘述，下面列出一些特殊的</span></span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">   </span><br><span class="line">  <span class="built_in">int</span> i = <span class="number">10</span>;</span><br><span class="line">  <span class="built_in">double</span> d = <span class="number">20.1</span>;</span><br><span class="line">   </span><br><span class="line">  <span class="built_in">print</span>(i/d);   <span class="comment">// 0.49751243781094523</span></span><br><span class="line">  <span class="built_in">print</span>(i~/d);  <span class="comment">// 0  这个操作是取整</span></span><br><span class="line"> </span><br><span class="line">  <span class="built_in">print</span>( i.isOdd );   <span class="comment">// 判断是奇数</span></span><br><span class="line">  <span class="built_in">print</span>( i.isEven );  <span class="comment">// 判断是偶数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一些常见的转换"><a href="#一些常见的转换" class="headerlink" title="一些常见的转换"></a>一些常见的转换</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// String -&gt; int</span></span><br><span class="line"><span class="keyword">var</span> one = <span class="built_in">int</span>.parse(<span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">assert</span>(one == <span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// String -&gt; double</span></span><br><span class="line"><span class="keyword">var</span> onePointOne = <span class="built_in">double</span>.parse(<span class="string">'1.1'</span>);</span><br><span class="line"><span class="keyword">assert</span>(onePointOne == <span class="number">1.1</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// int -&gt; String</span></span><br><span class="line"><span class="built_in">String</span> oneAsString = <span class="number">1.</span>toString();</span><br><span class="line"><span class="keyword">assert</span>(oneAsString == <span class="string">'1'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// double -&gt; String</span></span><br><span class="line"><span class="built_in">String</span> piAsString = <span class="number">3.14159</span>.toStringAsFixed(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">assert</span>(piAsString == <span class="string">'3.14'</span>);</span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="在-dart-中居然可以使用-单引号-和-双引号声明字符串。这两种方式都可以。"><a href="#在-dart-中居然可以使用-单引号-和-双引号声明字符串。这两种方式都可以。" class="headerlink" title="在 dart 中居然可以使用 单引号 和 双引号声明字符串。这两种方式都可以。"></a>在 dart 中居然可以使用 单引号 和 双引号声明字符串。这两种方式都可以。</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="built_in">String</span> string = <span class="string">'单引号声明字符串'</span>;</span><br><span class="line">  <span class="built_in">String</span> string1 = <span class="string">"双引号声明字符串"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在-String-中单、双引号互相嵌套的情况"><a href="#在-String-中单、双引号互相嵌套的情况" class="headerlink" title="在 String 中单、双引号互相嵌套的情况"></a>在 String 中单、双引号互相嵌套的情况</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">   </span><br><span class="line">  <span class="built_in">String</span> str = <span class="string">'单引号中的"双引号"'</span>;</span><br><span class="line">  <span class="built_in">String</span> str1 = <span class="string">"双引号中的'单引号'"</span>;</span><br><span class="line">  <span class="built_in">print</span>(str);</span><br><span class="line">  <span class="built_in">print</span>(str1);</span><br><span class="line"> </span><br><span class="line">  <span class="built_in">String</span> str2 = <span class="string">'单引号中的 \'单引号\' '</span>;</span><br><span class="line">  <span class="built_in">String</span> str3 = <span class="string">"双引号中的 \"双引号\" "</span>;</span><br><span class="line">  <span class="built_in">print</span>(str2);</span><br><span class="line">  <span class="built_in">print</span>(str3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串拼接的方式"><a href="#字符串拼接的方式" class="headerlink" title="字符串拼接的方式"></a>字符串拼接的方式</h3><h3 id="下面列出-dart-中拼接字符串的各种骚操作（黑魔法）。"><a href="#下面列出-dart-中拼接字符串的各种骚操作（黑魔法）。" class="headerlink" title="下面列出 dart 中拼接字符串的各种骚操作（黑魔法）。"></a>下面列出 dart 中拼接字符串的各种骚操作（黑魔法）。</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="comment">// 使用的是空格拼接，多个空格也可以</span></span><br><span class="line">  <span class="built_in">String</span> str1 = <span class="string">'单引号空格字符串'</span> <span class="string">'拼接'</span>        <span class="string">'~'</span>;    <span class="comment">// 单引号字符串空格拼接~</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 使用换行符以及空格</span></span><br><span class="line">  <span class="built_in">String</span> str2 = <span class="string">'单引号符串'</span></span><br><span class="line">    <span class="string">'换行了'</span> <span class="string">'再加空格'</span> <span class="string">'拼接'</span>;       <span class="comment">// 单引号符串换行了再加空格拼接</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 单双引号 空格拼接</span></span><br><span class="line">  <span class="built_in">String</span> str3 = <span class="string">"单双引号空格字符串"</span> <span class="string">'拼接'</span>        <span class="string">"~"</span>;    <span class="comment">// 单双引号字符串空格拼接~</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 单双引号 换行符以及空格</span></span><br><span class="line">  <span class="built_in">String</span> str4 = <span class="string">"单双引号符串"</span></span><br><span class="line">    <span class="string">'换行了'</span> <span class="string">'再加空格'</span> <span class="string">'拼接'</span>;       <span class="comment">// 单双引号符串换行了再加空格拼接</span></span><br><span class="line"> </span><br><span class="line">  <span class="built_in">String</span> str5 = <span class="string">'''</span></span><br><span class="line"><span class="string">    使用3个单引号、</span></span><br><span class="line"><span class="string">    看到我使用了么</span></span><br><span class="line"><span class="string">  '''</span>;</span><br><span class="line">           </span><br><span class="line"> </span><br><span class="line">  <span class="built_in">String</span> str6 = <span class="string">"""</span></span><br><span class="line"><span class="string">    使用3个双引号、</span></span><br><span class="line"><span class="string">    看到我使用了么</span></span><br><span class="line"><span class="string">  """</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="built_in">String</span> str7 = <span class="string">"算了，还是正常一点"</span> + <span class="string">"，使用 + 来拼接"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="从上面可以看到-dart-中可以使用空格来做为拼接。所以我们继续研究下。"><a href="#从上面可以看到-dart-中可以使用空格来做为拼接。所以我们继续研究下。" class="headerlink" title="从上面可以看到 dart 中可以使用空格来做为拼接。所以我们继续研究下。"></a>从上面可以看到 dart 中可以使用空格来做为拼接。所以我们继续研究下。</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 拼接字符串， 输出：单引号空格 或者 双引号空格</span></span><br><span class="line">  <span class="built_in">String</span> blockStr = <span class="string">'单引号'</span><span class="string">'空格'</span>;</span><br><span class="line">  <span class="built_in">String</span> blockStr1 = <span class="string">'单引号'</span> <span class="string">'空格'</span>;</span><br><span class="line">  <span class="built_in">String</span> blockStr2 = <span class="string">"双引号"</span><span class="string">"空格"</span>;</span><br><span class="line">  <span class="built_in">String</span> blockStr3 = <span class="string">"双引号"</span> <span class="string">"空格"</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 下面这两种情况会报错</span></span><br><span class="line">  <span class="comment">// String blockStr4 = '单引号''''空格';</span></span><br><span class="line">  <span class="comment">// String blockStr5 = "双引号""""空格";</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 测试中间添加字符</span></span><br><span class="line">  <span class="built_in">String</span> blockStr6 = <span class="string">'单引号'</span><span class="string">'_'</span><span class="string">'空格'</span>;   <span class="comment">// 输出：单引号_空格</span></span><br><span class="line">  <span class="built_in">String</span> blockStr7 = <span class="string">"双引号"</span><span class="string">"#"</span><span class="string">"空格"</span>;   <span class="comment">// 注意不能使用 $，$会报错, 输出：单引号#空格</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 单双引号混合使用</span></span><br><span class="line">  <span class="built_in">String</span> blockStr8 = <span class="string">'单""""引号'</span>;        <span class="comment">// 输出：单""""引号</span></span><br><span class="line">  <span class="built_in">String</span> blockStr9 = <span class="string">'单""_""引号'</span>;       <span class="comment">// 输出：单""_""引号</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 单双引号混合使用</span></span><br><span class="line">  <span class="built_in">String</span> blockStr10 = <span class="string">"双''''引号"</span>;        <span class="comment">// 输出：双''''引号</span></span><br><span class="line">  <span class="built_in">String</span> blockStr11 = <span class="string">"双''_''引号"</span>;       <span class="comment">// 输出：双''_''引号</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="表达式-的使用"><a href="#表达式-的使用" class="headerlink" title="${表达式}的使用"></a>${表达式}的使用</h3><p>类似于JS中 ES6 上面的表达式的使用，感觉是相通的。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">var</span> flag = <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">"测试字符串"</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"我们来验证字符串：<span class="subst">$&#123;str&#125;</span>"</span> <span class="string">"然后看看我们的 flag：<span class="subst">$&#123;flag&#125;</span>"</span>);</span><br><span class="line">  <span class="comment">// 最后输出的结果为：我们来验证字符串：测试字符串然后看看我们的 flag：false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h2><p>assert 是语言内置的断言函数，仅在检查模式下有效<br>在开发过程中， 除非条件为真，否则会引发异常。(断言失败则程序立刻终止)。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检查是否为空</span></span><br><span class="line"><span class="keyword">var</span> fullName = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">assert</span>(fullName.isEmpty);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 为0检查</span></span><br><span class="line"><span class="keyword">var</span> hitPoints = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">assert</span>(hitPoints &lt;= <span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 检查是否为 null.</span></span><br><span class="line"><span class="keyword">var</span> unicorn;</span><br><span class="line"><span class="keyword">assert</span>(unicorn == <span class="keyword">null</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 检查是否为 NaN.</span></span><br><span class="line"><span class="keyword">var</span> iMeantToDoThis = <span class="number">0</span> / <span class="number">0</span>;</span><br><span class="line"><span class="keyword">assert</span>(iMeantToDoThis.isNaN);</span><br></pre></td></tr></table></figure><h2 id="List列表"><a href="#List列表" class="headerlink" title="List列表"></a>List列表</h2><h3 id="实例化-List-的方法如下"><a href="#实例化-List-的方法如下" class="headerlink" title="实例化 List 的方法如下"></a>实例化 List 的方法如下</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 使用构造创建</span></span><br><span class="line">  <span class="keyword">var</span> list = <span class="keyword">new</span> <span class="built_in">List</span>();</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//创建一个int类型的list</span></span><br><span class="line">  <span class="built_in">List</span> intlist = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 创建一个常量List， 不可以改变的List</span></span><br><span class="line">  <span class="built_in">List</span> constList = <span class="keyword">const</span>[<span class="number">10</span>, <span class="number">7</span>, <span class="number">23</span>];</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dart-中数组常用的方法"><a href="#dart-中数组常用的方法" class="headerlink" title="dart 中数组常用的方法"></a>dart 中数组常用的方法</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//  在数组中可以存放多个不同类型的对象</span></span><br><span class="line">  <span class="keyword">var</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'Flutter'</span>, <span class="keyword">true</span>];</span><br><span class="line">  <span class="built_in">print</span>(list);      <span class="comment">// 输出的结果：[1, 2, 3, Flutter, true]</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 修改数组下标为2 的值</span></span><br><span class="line">  list[<span class="number">2</span>] = <span class="string">'Dart'</span>;</span><br><span class="line">  <span class="built_in">print</span>(list);      <span class="comment">// 输出的结果：[1, 2, Dart, Flutter, true]</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 获取数组的长度</span></span><br><span class="line">  <span class="built_in">print</span>(list.length);   <span class="comment">// 输出的结果：5</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 向数组中添加元素</span></span><br><span class="line">  list.add(<span class="string">"value"</span>);</span><br><span class="line">  <span class="built_in">print</span>(list);        <span class="comment">// 输出的结果：[1, 2, Dart, Flutter, true, value]</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 向数组中的指定位置添加元素</span></span><br><span class="line">  list.insert(<span class="number">1</span>, <span class="string">'element'</span>); </span><br><span class="line">  <span class="built_in">print</span>(list);      <span class="comment">// 输出的结果：[1, element, 2, Dart, Flutter, true, value]</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 移除数组中的元素</span></span><br><span class="line">  list.remove(<span class="string">"value"</span>);</span><br><span class="line">  <span class="built_in">print</span>(list);      <span class="comment">// 输出的结果：[1, element, 2, Dart, Flutter, true]</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 移除数组中指定的元素</span></span><br><span class="line">  list.removeAt(<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">print</span>(list);      <span class="comment">// 输出的结果：[1, 2, Dart, Flutter, true]</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 判断数组中是否有某个元素</span></span><br><span class="line">  <span class="built_in">print</span>(list.indexOf(<span class="string">"element"</span>));   <span class="comment">// 输出结果：-1</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 可以使用 sort() 函数来排序, 但是由于我们使用定义的数组类型不一样，就不能使用</span></span><br><span class="line">  <span class="keyword">var</span> intlist = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span> ,<span class="number">3</span>];</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 根据语法提示： List.sort([(int, int) → int compare]) → void</span></span><br><span class="line">  intlist.sort( (a, b) =&gt;  a.compareTo(b) );</span><br><span class="line">  <span class="built_in">print</span>(intlist);   <span class="comment">// 输出结果：[1, 2, 3, 5, 6]</span></span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="map-集合"><a href="#map-集合" class="headerlink" title="map 集合"></a>map 集合</h2><h3 id="创建-Map-集合"><a href="#创建-Map-集合" class="headerlink" title="创建 Map 集合"></a>创建 Map 集合</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 创建Map</span></span><br><span class="line">  <span class="keyword">var</span> language = &#123;<span class="string">'fisrt'</span>: <span class="string">'dart'</span>, <span class="string">'second'</span>: <span class="string">'java'</span>&#125;;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 创建不可变的 Map</span></span><br><span class="line">  <span class="keyword">var</span> constLanguage = <span class="keyword">const</span> &#123;<span class="string">'fisrt'</span>: <span class="string">'dart'</span>, <span class="string">'second'</span>: <span class="string">'java'</span>&#125;;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 通过构造器创建</span></span><br><span class="line">  <span class="keyword">var</span> initLanguage = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Map-中常用的方法"><a href="#Map-中常用的方法" class="headerlink" title="Map 中常用的方法"></a>Map 中常用的方法</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 创建Map</span></span><br><span class="line">  <span class="keyword">var</span> map = &#123;<span class="string">'fisrt'</span>: <span class="string">'dart'</span>, <span class="string">'second'</span>: <span class="string">'java'</span>&#125;;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 获取长度</span></span><br><span class="line">  <span class="built_in">print</span>(map.length);    <span class="comment">// 输出结果：2</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 判断是否为空</span></span><br><span class="line">  <span class="built_in">print</span>(map.isEmpty);     <span class="comment">// 输出结果：false</span></span><br><span class="line">  <span class="built_in">print</span>(map.isNotEmpty);  <span class="comment">// 输出结果：true</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 获取到所有的 key</span></span><br><span class="line">  <span class="built_in">print</span>(map.keys);        <span class="comment">// 输出结果：(fisrt, second)</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 获取到所有的 values</span></span><br><span class="line">  <span class="built_in">print</span>(map.values);      <span class="comment">// 输出结果：(dart, java)</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 判断是否包含某个key</span></span><br><span class="line">  <span class="built_in">print</span>(map.containsKey(<span class="string">"key"</span>));    <span class="comment">// 输出结果：false</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 判断是否包含某个value</span></span><br><span class="line">  <span class="built_in">print</span>(map.containsValue(<span class="string">"key"</span>));    <span class="comment">// 输出结果：false</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 添加一个新的元素进去</span></span><br><span class="line">  map[<span class="string">'third'</span>] = <span class="string">'key'</span>;</span><br><span class="line">  <span class="built_in">print</span>(map);         <span class="comment">// 输出结果：&#123;fisrt: dart, second: java, third: key&#125;</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 循环打印 代码提示：Map.forEach((String, String) → void f) → void</span></span><br><span class="line">  map.forEach( (key, value) =&gt;  getMap(key, value) );</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">void</span> getMap(key, value)&#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"key:<span class="subst">$&#123;key&#125;</span>, value:<span class="subst">$&#123;value&#125;</span>"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　</p><h2 id="dynamic-关键字"><a href="#dynamic-关键字" class="headerlink" title="dynamic 关键字"></a>dynamic 关键字</h2><p>这个关键字就类似定义我们在 JS 中定义变量的情况。先看下面的代码</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="comment">// a 的数据类型可以随意改变，这种类型就是 dynamic</span></span><br><span class="line">  <span class="keyword">var</span> a ;</span><br><span class="line">  a = <span class="number">10</span>;</span><br><span class="line">  a = <span class="string">"dart"</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 这里我们使用 dynamic 声明</span></span><br><span class="line">  <span class="keyword">dynamic</span> d = <span class="number">10</span>;</span><br><span class="line">  d = <span class="string">'dart'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;既然 Dart 是一门语言，那么就和我们所知道语言一样，有基本的数据类型以及常见的流程处理语法，那么我们就来了解下。&lt;/p&gt;
&lt;p&gt;Dart 的所有东西都是对象，包括数字，函数等。它们都继承自 Object ，默认是都是 null（包括数字），所以数字，字符串都可以调用各种方法。&lt;/p&gt;
&lt;h2 id=&quot;常亮与变量&quot;&gt;&lt;a href=&quot;#常亮与变量&quot; class=&quot;headerlink&quot; title=&quot;常亮与变量&quot;&gt;&lt;/a&gt;常亮与变量&lt;/h2&gt;&lt;h3 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h3&gt;&lt;p&gt;使用 var 声明变量，可赋予不同类型的值；未初始化时，默认值为 null ；使用 final 声明一个只能赋值一次的变量&lt;/p&gt;
&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; main()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 声明一个变量 a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(a);   &lt;span class=&quot;comment&quot;&gt;// 打印 a 的值，显示为 null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  a = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(a);   &lt;span class=&quot;comment&quot;&gt;//  打印出来的结果为 10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  a = &lt;span class=&quot;string&quot;&gt;&quot;测试字符串&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(a);   &lt;span class=&quot;comment&quot;&gt;// 打印出来的结果为 测试字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  a = &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(a);   &lt;span class=&quot;comment&quot;&gt;//  打印出来的结果为 30&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; b = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  b = &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 这个会报错，有提示： [dart] &#39;b&#39;, a final variable, can only be set once.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;　　&lt;/p&gt;
&lt;h3 id=&quot;常量&quot;&gt;&lt;a href=&quot;#常量&quot; class=&quot;headerlink&quot; title=&quot;常量&quot;&gt;&lt;/a&gt;常量&lt;/h3&gt;&lt;p&gt;在 dart 中使用 const 声明常量；使用 const 声明的必须是编译期常量。&lt;/p&gt;
&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; main()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; a  = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  a = &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;;   &lt;span class=&quot;comment&quot;&gt;// 这里也会报错：[dart] Constant variables can&#39;t be assigned a value.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Android" scheme="https://zhangmiao.cc/categories/Android/"/>
    
      <category term="Flutter Tips" scheme="https://zhangmiao.cc/categories/Android/Flutter-Tips/"/>
    
    
      <category term="Android" scheme="https://zhangmiao.cc/tags/Android/"/>
    
      <category term="Flutter Tips" scheme="https://zhangmiao.cc/tags/Flutter-Tips/"/>
    
  </entry>
  
  <entry>
    <title>flutter抓包</title>
    <link href="https://zhangmiao.cc/posts/832de89a.html"/>
    <id>https://zhangmiao.cc/posts/832de89a.html</id>
    <published>2020-04-05T06:34:26.000Z</published>
    <updated>2020-04-05T06:36:53.574Z</updated>
    
    <content type="html"><![CDATA[<h2 id="flutter抓包"><a href="#flutter抓包" class="headerlink" title="flutter抓包"></a>flutter抓包</h2><p>查看dio文档发现需要设置代理</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(dio.httpClientAdapter <span class="keyword">as</span> DefaultHttpClientAdapter).onHttpClientCreate = (HttpClient client) &#123;</span><br><span class="line">       client.findProxy = (uri) &#123;</span><br><span class="line">         <span class="comment">//proxy all request to localhost:8888</span></span><br><span class="line">         <span class="keyword">return</span> <span class="string">"PROXY 192.168.8.84:8888"</span>;</span><br><span class="line">       &#125;;</span><br><span class="line">       <span class="comment">// 你也可以自己创建一个新的HttpClient实例返回。</span></span><br><span class="line">       <span class="comment">// return new HttpClient(SecurityContext);</span></span><br><span class="line">     &#125;;</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;flutter抓包&quot;&gt;&lt;a href=&quot;#flutter抓包&quot; class=&quot;headerlink&quot; title=&quot;flutter抓包&quot;&gt;&lt;/a&gt;flutter抓包&lt;/h2&gt;&lt;p&gt;查看dio文档发现需要设置代理&lt;/p&gt;
&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(dio.httpClientAdapter &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; DefaultHttpClientAdapter).onHttpClientCreate = (HttpClient client) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       client.findProxy = (uri) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;comment&quot;&gt;//proxy all request to localhost:8888&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;PROXY 192.168.8.84:8888&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;// 你也可以自己创建一个新的HttpClient实例返回。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;// return new HttpClient(SecurityContext);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Android" scheme="https://zhangmiao.cc/categories/Android/"/>
    
      <category term="Flutter Tips" scheme="https://zhangmiao.cc/categories/Android/Flutter-Tips/"/>
    
    
      <category term="Android" scheme="https://zhangmiao.cc/tags/Android/"/>
    
      <category term="Flutter Tips" scheme="https://zhangmiao.cc/tags/Flutter-Tips/"/>
    
  </entry>
  
  <entry>
    <title>Flutter常见第三方插件</title>
    <link href="https://zhangmiao.cc/posts/9c7b53c1.html"/>
    <id>https://zhangmiao.cc/posts/9c7b53c1.html</id>
    <published>2020-04-02T08:48:09.000Z</published>
    <updated>2020-04-02T08:48:53.139Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 网络请求框架</span></span><br><span class="line"><span class="symbol">dio:</span> ^<span class="number">3.0</span>.<span class="number">7</span></span><br><span class="line"><span class="comment"># sp</span></span><br><span class="line"><span class="symbol">shared_preferences:</span> ^<span class="number">0</span>.<span class="number">5.6</span></span><br><span class="line"><span class="comment"># 微信sdk</span></span><br><span class="line"><span class="symbol">fluwx:</span> ^<span class="number">1.2</span>.<span class="number">1</span>+<span class="number">1</span></span><br><span class="line"><span class="comment"># swiper 轮播插件</span></span><br><span class="line"><span class="symbol">flutter_swiper:</span> ^<span class="number">1.1</span>.<span class="number">6</span></span><br><span class="line"><span class="comment"># 个推 sdk</span></span><br><span class="line"><span class="symbol">getuiflut:</span> ^<span class="number">0</span>.<span class="number">1.6</span></span><br><span class="line"><span class="comment"># Flutter 调试工具</span></span><br><span class="line"><span class="symbol">flutter_flipperkit:</span> ^<span class="number">0</span>.<span class="number">0</span>.<span class="number">21</span></span><br><span class="line"><span class="comment"># flipper sqflite调试</span></span><br><span class="line"><span class="symbol">flipperkit_sqflite_driver:</span> <span class="number">0</span>.<span class="number">0</span>.<span class="number">2</span></span><br><span class="line"><span class="comment"># json生成</span></span><br><span class="line"><span class="symbol">json_annotation:</span> ^<span class="number">2.2</span>.<span class="number">0</span></span><br><span class="line"><span class="comment"># 下载器</span></span><br><span class="line"><span class="symbol">flutter_downloader:</span> <span class="number">1.1</span>.<span class="number">7</span></span><br><span class="line"><span class="comment"># 获取系统路径</span></span><br><span class="line"><span class="symbol">path_provider:</span> ^<span class="number">1.3</span>.<span class="number">0</span></span><br><span class="line"><span class="comment"># 系统权限管理</span></span><br><span class="line"><span class="symbol">permission_handler:</span> ^<span class="number">4.3</span>.<span class="number">0</span></span><br><span class="line"><span class="comment"># 通知权限管理</span></span><br><span class="line"><span class="symbol">notification_permissions:</span> ^<span class="number">0</span>.<span class="number">4.4</span></span><br><span class="line"><span class="comment"># webview</span></span><br><span class="line"><span class="symbol">flutter_webview_plugin:</span> ^<span class="number">0</span>.<span class="number">3.4</span></span><br><span class="line"><span class="comment"># 唤起其他app</span></span><br><span class="line"><span class="symbol">url_launcher:</span> ^<span class="number">5.0</span>.<span class="number">2</span></span><br><span class="line"><span class="comment"># growingio 统计</span></span><br><span class="line"><span class="symbol">flutter_growingio_track:</span></span><br><span class="line"><span class="symbol">path:</span> plugins/flutter_growingio_track-<span class="number">2.6</span>.<span class="number">4</span></span><br><span class="line"><span class="comment"># 设备信息</span></span><br><span class="line"><span class="symbol">device_info:</span> ^<span class="number">0</span>.<span class="number">4.0</span></span><br><span class="line"><span class="comment"># 生成uuid</span></span><br><span class="line"><span class="symbol">uuid:</span> <span class="number">2.0</span>.<span class="number">2</span></span><br><span class="line"><span class="comment"># 事件传递</span></span><br><span class="line"><span class="symbol">event_bus:</span> ^<span class="number">1.1</span>.<span class="number">0</span></span><br><span class="line"><span class="comment"># loading 样式组件</span></span><br><span class="line"><span class="symbol">flutter_spinkit:</span> ^<span class="number">4.0</span>.<span class="number">0</span></span><br><span class="line"><span class="comment"># qq sdk</span></span><br><span class="line"><span class="symbol">flutter_qq:</span> ^<span class="number">0</span>.<span class="number">0</span>.<span class="number">5</span></span><br><span class="line"><span class="comment"># 代码包信息</span></span><br><span class="line"><span class="symbol">package_info:</span> ^<span class="number">0</span>.<span class="number">4.0</span>+<span class="number">6</span></span><br><span class="line"><span class="comment"># 状态管理</span></span><br><span class="line"><span class="symbol">provider:</span> ^<span class="number">3.0</span>.<span class="number">0</span>+<span class="number">1</span></span><br><span class="line"><span class="comment"># 选择器</span></span><br><span class="line"><span class="symbol">flutter_picker:</span> ^<span class="number">1.0</span>.<span class="number">13</span></span><br><span class="line"><span class="comment"># 图片裁剪</span></span><br><span class="line"><span class="symbol">image_cropper:</span> ^<span class="number">1.0</span>.<span class="number">2</span></span><br><span class="line"><span class="comment"># 图片选择</span></span><br><span class="line"><span class="symbol">image_picker:</span> ^<span class="number">0</span>.<span class="number">6.1</span>+<span class="number">2</span></span><br><span class="line"><span class="comment"># 路由框架</span></span><br><span class="line"><span class="symbol">fluro:</span> ^<span class="number">1.5</span>.<span class="number">1</span></span><br><span class="line"><span class="comment"># pdf浏览器</span></span><br><span class="line"><span class="symbol">flutter_full_pdf_viewer:</span> ^<span class="number">1.0</span>.<span class="number">4</span></span><br><span class="line"><span class="comment"># 避免输入框被键盘遮挡</span></span><br><span class="line"><span class="symbol">keyboard_avoider:</span> ^<span class="number">0</span>.<span class="number">1.2</span></span><br><span class="line"><span class="comment"># 屏幕适配 https://github.com/OpenFlutter/flutter_screenutil</span></span><br><span class="line"><span class="symbol">flutter_screenutil:</span> ^<span class="number">1.1</span>.<span class="number">0</span></span><br><span class="line"><span class="comment"># Toast插件 https://github.com/OpenFlutter/flutter_oktoast</span></span><br><span class="line"><span class="symbol">oktoast:</span> ^<span class="number">2.2</span>.<span class="number">0</span></span><br><span class="line"><span class="comment"># 日期选择器</span></span><br><span class="line"><span class="symbol">flutter_cupertino_date_picker:</span> ^<span class="number">1.0</span>.<span class="number">12</span></span><br><span class="line"><span class="comment"># 小红点插件 badge https://pub.dev/packages/flutter_badge</span></span><br><span class="line"><span class="symbol">flutter_badge:</span> ^<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span></span><br><span class="line"><span class="comment"># 自定义上拉加载和下拉刷新效果 flutter_easyrefresh 前提：必须是一个ListView</span></span><br><span class="line"><span class="symbol">flutter_easyrefresh:</span> ^<span class="number">1.2</span>.<span class="number">7</span></span><br><span class="line"><span class="comment"># 音频播放插件: https://pub.flutter-io.cn/packages/audioplayers</span></span><br><span class="line"><span class="symbol">audioplayers:</span> ^<span class="number">0</span>.<span class="number">13.2</span></span><br><span class="line"><span class="comment"># 录音: https://pub.flutter-io.cn/packages/audio_recorder</span></span><br><span class="line"><span class="symbol">audio_recorder:</span></span><br><span class="line"><span class="symbol">path:</span> plugins/audio_recorder-<span class="number">1.0</span>.<span class="number">1</span></span><br><span class="line"><span class="comment"># 瀑布流插件 https://github.com/letsar/flutter_staggered_grid_view</span></span><br><span class="line"><span class="symbol">flutter_staggered_grid_view:</span> ^<span class="number">0</span>.<span class="number">3.0</span></span><br><span class="line"><span class="comment"># 图片浏览器: https://pub.flutter-io.cn/packages/photo_view</span></span><br><span class="line"><span class="symbol">photo_view:</span> ^<span class="number">0</span>.<span class="number">9.0</span></span><br><span class="line"><span class="comment"># 数据加解密</span></span><br><span class="line"><span class="symbol">encrypt:</span> <span class="number">3.3</span>.<span class="number">1</span></span><br><span class="line"><span class="comment"># 网络状态插件connectivity: ^0.4.8+2</span></span><br><span class="line"><span class="symbol">connectivity:</span> ^<span class="number">0</span>.<span class="number">4.8</span>+<span class="number">2</span></span><br><span class="line"><span class="comment"># 腾讯im</span></span><br><span class="line"><span class="symbol">dim:</span></span><br><span class="line"><span class="symbol">path:</span> plugins/dim</span><br><span class="line"><span class="comment"># sql</span></span><br><span class="line"><span class="symbol">sqflite:</span> ^<span class="number">1.1</span>.<span class="number">7</span>+<span class="number">1</span></span><br><span class="line"><span class="comment"># 富文本输入</span></span><br><span class="line"><span class="symbol">extended_text_field:</span> <span class="number">0</span>.<span class="number">4.9</span></span><br><span class="line"><span class="comment"># 富文本展示</span></span><br><span class="line"><span class="symbol">extended_text:</span> ^<span class="number">0</span>.<span class="number">6.6</span></span><br><span class="line"><span class="comment"># 振动</span></span><br><span class="line"><span class="symbol">vibration:</span> <span class="number">1.2</span>.<span class="number">2</span></span><br><span class="line"><span class="comment"># 弹出气泡</span></span><br><span class="line"><span class="symbol">w_popup_menu:</span> ^<span class="number">0</span>.<span class="number">2.5</span></span><br><span class="line"><span class="comment"># 高德-仅地图</span></span><br><span class="line"><span class="symbol">amap_map_fluttify:</span></span><br><span class="line"><span class="symbol">path:</span> plugins/amap_map_fluttify-develop3</span><br><span class="line"><span class="comment">#  amap_map_fluttify: 0.18.2+c038d50</span></span><br><span class="line"><span class="comment"># 高德-仅定位</span></span><br><span class="line"><span class="symbol">amap_location_fluttify:</span> <span class="number">0</span>.<span class="number">8.11</span>+<span class="number">481</span>e45c</span><br><span class="line"><span class="comment"># 图片缓存</span></span><br><span class="line"><span class="symbol">cached_network_image:</span> <span class="number">2.0</span>.<span class="number">0</span>-rc.<span class="number">1</span></span><br><span class="line"><span class="comment"># iOS 内购</span></span><br><span class="line"><span class="symbol">flutter_inapp_purchase:</span> ^<span class="number">2.1</span>.<span class="number">0</span></span><br><span class="line"><span class="comment"># 获取设备id: https://pub.flutter-io.cn/packages/unique_ids</span></span><br><span class="line"><span class="symbol">unique_ids:</span> <span class="number">1.0</span>.<span class="number">10</span></span><br><span class="line"><span class="comment"># 获取设备user_agent</span></span><br><span class="line"><span class="symbol">flutter_user_agent:</span></span><br><span class="line"><span class="symbol">path:</span> plugins/flutter_user_agent-<span class="number">1.2</span>.<span class="number">1</span></span><br><span class="line"><span class="comment"># 颜色插件</span></span><br><span class="line"><span class="symbol">color:</span> <span class="number">2.1</span>.<span class="number">1</span></span><br><span class="line"><span class="comment"># 消息上下轮播(跑马灯)</span></span><br><span class="line"><span class="symbol">marquee:</span> <span class="number">1.3</span>.<span class="number">1</span></span><br><span class="line"><span class="comment"># 为SVG路径和代码生成创建一个纯Dart解析库</span></span><br><span class="line"><span class="symbol">path_parsing:</span> <span class="number">0</span>.<span class="number">1.4</span></span><br><span class="line"><span class="comment"># 异常捕获及日志打印</span></span><br><span class="line"><span class="comment"># https://pub.flutter-io.cn/packages/sentry</span></span><br><span class="line"><span class="symbol">sentry:</span> <span class="number">3.0</span>.<span class="number">1</span></span><br><span class="line"><span class="comment"># 基于dio的网络请求日志</span></span><br><span class="line"><span class="symbol">dio_log:</span> ^<span class="number">1.3</span>.<span class="number">3</span></span><br><span class="line"><span class="comment"># 支付代码测试</span></span><br><span class="line"><span class="symbol">iap_pay:</span></span><br><span class="line"><span class="symbol">git:</span></span><br><span class="line">  <span class="symbol">url:</span>  <span class="symbol">https:</span>/<span class="regexp">/gitee.com/</span>Steven_Hu/iap_pay.git</span><br><span class="line">  <span class="symbol">ref:</span> master</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 网络请求框架&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;dio:&lt;/span&gt; ^&lt;span class=&quot;number&quot;&gt;3.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# sp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;shared_preferences:&lt;/span&gt; ^&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;5.6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 微信sdk&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;fluwx:&lt;/span&gt; ^&lt;span class=&quot;number&quot;&gt;1.2&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# swiper 轮播插件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;flutter_swiper:&lt;/span&gt; ^&lt;span class=&quot;number&quot;&gt;1.1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 个推 sdk&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;getuiflut:&lt;/span&gt; ^&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1.6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Flutter 调试工具&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;flutter_flipperkit:&lt;/span&gt; ^&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;21&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# flipper sqflite调试&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;flipperkit_sqflite_driver:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# json生成&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;json_annotation:&lt;/span&gt; ^&lt;span class=&quot;number&quot;&gt;2.2&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 下载器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;flutter_downloader:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1.1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 获取系统路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;path_provider:&lt;/span&gt; ^&lt;span class=&quot;number&quot;&gt;1.3&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 系统权限管理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;permission_handler:&lt;/span&gt; ^&lt;span class=&quot;number&quot;&gt;4.3&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 通知权限管理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;notification_permissions:&lt;/span&gt; ^&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;4.4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# webview&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;flutter_webview_plugin:&lt;/span&gt; ^&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;3.4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 唤起其他app&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;url_launcher:&lt;/span&gt; ^&lt;span class=&quot;number&quot;&gt;5.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# growingio 统计&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;flutter_growingio_track:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;path:&lt;/span&gt; plugins/flutter_growingio_track-&lt;span class=&quot;number&quot;&gt;2.6&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 设备信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;device_info:&lt;/span&gt; ^&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;4.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 生成uuid&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;uuid:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 事件传递&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;event_bus:&lt;/span&gt; ^&lt;span class=&quot;number&quot;&gt;1.1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# loading 样式组件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;flutter_spinkit:&lt;/span&gt; ^&lt;span class=&quot;number&quot;&gt;4.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# qq sdk&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;flutter_qq:&lt;/span&gt; ^&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 代码包信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;package_info:&lt;/span&gt; ^&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;4.0&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 状态管理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;provider:&lt;/span&gt; ^&lt;span class=&quot;number&quot;&gt;3.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 选择器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;flutter_picker:&lt;/span&gt; ^&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 图片裁剪&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;image_cropper:&lt;/span&gt; ^&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 图片选择&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;image_picker:&lt;/span&gt; ^&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;6.1&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 路由框架&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;fluro:&lt;/span&gt; ^&lt;span class=&quot;number&quot;&gt;1.5&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# pdf浏览器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;flutter_full_pdf_viewer:&lt;/span&gt; ^&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 避免输入框被键盘遮挡&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;keyboard_avoider:&lt;/span&gt; ^&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1.2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 屏幕适配 https://github.com/OpenFlutter/flutter_screenutil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;flutter_screenutil:&lt;/span&gt; ^&lt;span class=&quot;number&quot;&gt;1.1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Toast插件 https://github.com/OpenFlutter/flutter_oktoast&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;oktoast:&lt;/span&gt; ^&lt;span class=&quot;number&quot;&gt;2.2&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 日期选择器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;flutter_cupertino_date_picker:&lt;/span&gt; ^&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 小红点插件 badge https://pub.dev/packages/flutter_badge&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;flutter_badge:&lt;/span&gt; ^&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 自定义上拉加载和下拉刷新效果 flutter_easyrefresh 前提：必须是一个ListView&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;flutter_easyrefresh:&lt;/span&gt; ^&lt;span class=&quot;number&quot;&gt;1.2&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 音频播放插件: https://pub.flutter-io.cn/packages/audioplayers&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;audioplayers:&lt;/span&gt; ^&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;13.2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 录音: https://pub.flutter-io.cn/packages/audio_recorder&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;audio_recorder:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;path:&lt;/span&gt; plugins/audio_recorder-&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 瀑布流插件 https://github.com/letsar/flutter_staggered_grid_view&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;flutter_staggered_grid_view:&lt;/span&gt; ^&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;3.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 图片浏览器: https://pub.flutter-io.cn/packages/photo_view&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;photo_view:&lt;/span&gt; ^&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;9.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 数据加解密&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;encrypt:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3.3&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 网络状态插件connectivity: ^0.4.8+2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;connectivity:&lt;/span&gt; ^&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;4.8&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 腾讯im&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;dim:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;path:&lt;/span&gt; plugins/dim&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# sql&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;sqflite:&lt;/span&gt; ^&lt;span class=&quot;number&quot;&gt;1.1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 富文本输入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;extended_text_field:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;4.9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 富文本展示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;extended_text:&lt;/span&gt; ^&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;6.6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 振动&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;vibration:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1.2&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 弹出气泡&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;w_popup_menu:&lt;/span&gt; ^&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;2.5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 高德-仅地图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;amap_map_fluttify:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;path:&lt;/span&gt; plugins/amap_map_fluttify-develop3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#  amap_map_fluttify: 0.18.2+c038d50&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 高德-仅定位&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;amap_location_fluttify:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;8.11&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;481&lt;/span&gt;e45c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 图片缓存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;cached_network_image:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;-rc.&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# iOS 内购&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;flutter_inapp_purchase:&lt;/span&gt; ^&lt;span class=&quot;number&quot;&gt;2.1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 获取设备id: https://pub.flutter-io.cn/packages/unique_ids&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;unique_ids:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 获取设备user_agent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;flutter_user_agent:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;path:&lt;/span&gt; plugins/flutter_user_agent-&lt;span class=&quot;number&quot;&gt;1.2&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 颜色插件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;color:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2.1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 消息上下轮播(跑马灯)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;marquee:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1.3&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 为SVG路径和代码生成创建一个纯Dart解析库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;path_parsing:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1.4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 异常捕获及日志打印&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# https://pub.flutter-io.cn/packages/sentry&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;sentry:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 基于dio的网络请求日志&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;dio_log:&lt;/span&gt; ^&lt;span class=&quot;number&quot;&gt;1.3&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 支付代码测试&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;iap_pay:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;git:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;symbol&quot;&gt;url:&lt;/span&gt;  &lt;span class=&quot;symbol&quot;&gt;https:&lt;/span&gt;/&lt;span class=&quot;regexp&quot;&gt;/gitee.com/&lt;/span&gt;Steven_Hu/iap_pay.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;symbol&quot;&gt;ref:&lt;/span&gt; master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Android" scheme="https://zhangmiao.cc/categories/Android/"/>
    
      <category term="Flutter Tips" scheme="https://zhangmiao.cc/categories/Android/Flutter-Tips/"/>
    
    
      <category term="Android" scheme="https://zhangmiao.cc/tags/Android/"/>
    
      <category term="Flutter Tips" scheme="https://zhangmiao.cc/tags/Flutter-Tips/"/>
    
  </entry>
  
  <entry>
    <title>flutter国际化本地化</title>
    <link href="https://zhangmiao.cc/posts/d1969579.html"/>
    <id>https://zhangmiao.cc/posts/d1969579.html</id>
    <published>2020-03-30T08:54:39.000Z</published>
    <updated>2020-03-30T09:04:50.700Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/zhangmiaocc/flutter_language_translate" target="_blank" rel="noopener">源码地址</a></p><h1 id="安装，配置和使用"><a href="#安装，配置和使用" class="headerlink" title="安装，配置和使用"></a>安装，配置和使用</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>将此添加到包的pubspec.yaml文件中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dependencies:</span><br><span class="line">  flutter_translate: &lt;latest version&gt;</span><br></pre></td></tr></table></figure><p>从命令行（或从您的编辑器）安装软件包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter pub get</span><br></pre></td></tr></table></figure><h2 id="组态"><a href="#组态" class="headerlink" title="组态"></a>组态</h2><p>导入flutter_translate：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">导入 &apos;package：flutter_translate / flutter_translate.dart&apos; ;</span><br></pre></td></tr></table></figure><p>将<em>json</em>本地化文件放置在项目中您选择的文件夹中。</p><p>默认情况下，<code>flutter_translate</code>将<code>assets/i18n</code>在项目根目录下的目录中搜索本地化文件。</p><p>在中声明您的资产本地化目录 <code>pubspec.yaml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flutter:</span><br><span class="line">  assets:</span><br><span class="line">    - assets/i18n</span><br></pre></td></tr></table></figure><p>在主函数中，创建本地化委托并启动应用，然后将其与LocalizedApp包装在一起</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">void main() async</span><br><span class="line">&#123;</span><br><span class="line">  var delegate = await LocalizationDelegate.create(</span><br><span class="line">        fallbackLocale: &apos;en_US&apos;,</span><br><span class="line">        supportedLocales: [&apos;en_US&apos;, &apos;es&apos;, &apos;fa&apos;]);</span><br><span class="line"></span><br><span class="line">  runApp(LocalizedApp(delegate, MyApp()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果本地化文件的资产目录与默认目录（<code>assets/i18n</code>）不同，则需要指定它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var delegate = await LocalizationDelegate.create(</span><br><span class="line">      ...</span><br><span class="line">        basePath: &apos;assets/i18n/&apos;</span><br><span class="line">      ...</span><br></pre></td></tr></table></figure><p>示例MyApp：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> localizationDelegate = LocalizedApp.of(context).delegate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> LocalizationProvider(</span><br><span class="line">      state: LocalizationProvider.of(context).state,</span><br><span class="line">      child: MaterialApp(</span><br><span class="line">        title: <span class="string">'Flutter Translate Demo'</span>,</span><br><span class="line">        localizationsDelegates: [</span><br><span class="line">          GlobalMaterialLocalizations.delegate,</span><br><span class="line">          GlobalWidgetsLocalizations.delegate,</span><br><span class="line">          localizationDelegate</span><br><span class="line">        ],</span><br><span class="line">        supportedLocales: localizationDelegate.supportedLocales,</span><br><span class="line">        locale: localizationDelegate.currentLocale,</span><br><span class="line">        theme: ThemeData(primarySwatch: Colors.blue),</span><br><span class="line">        home: MyHomePage(),</span><br><span class="line">        ),</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>翻译一个字符串：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">translate(&apos;your.localization.key&apos;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">translate(&apos;your.localization.key&apos;, args: &#123;&apos;argName1&apos;: argValue1, &apos;argName2&apos;: argValue2&#125;);</span><br></pre></td></tr></table></figure><p>进行多元翻译：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">translatePlural(&apos;plural.demo&apos;, yourNumericValue);</span><br></pre></td></tr></table></figure><p>JSON：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">"plural": &#123;</span><br><span class="line">    "demo": &#123;</span><br><span class="line">        "0": "Please start pushing the 'plus' button.",</span><br><span class="line">        "1": "You have pushed the button one time.",</span><br><span class="line">        "else": "You have pushed the button &#123;&#123;value&#125;&#125; times."</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更改语言：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">...</span><br><span class="line">  ...</span><br><span class="line">    changeLocale(context, <span class="string">'en_US'</span>);</span><br><span class="line">  ...</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="自动保存和还原所选的语言环境"><a href="#自动保存和还原所选的语言环境" class="headerlink" title="自动保存和还原所选的语言环境"></a>自动保存和还原所选的语言环境</h1><p>Flutter Translate可以自动保存选定的语言环境，并在应用程序重新启动后将其还原。</p><p>这可以通过在委托创建期间传递ITranslatePreferences的实现来完成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var delegate = await LocalizationDelegate.create(</span><br><span class="line">     ...</span><br><span class="line">       preferences: TranslatePreferences()</span><br><span class="line">     ...</span><br></pre></td></tr></table></figure><p>使用<a href="https://pub.dev/packages/shared_preferences" target="_blank" rel="noopener">shared_preferences</a>包的示例实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import &apos;dart:ui&apos;;</span><br><span class="line">import &apos;package:flutter_translate/flutter_translate.dart&apos;;</span><br><span class="line">import &apos;package:shared_preferences/shared_preferences.dart&apos;;</span><br><span class="line"></span><br><span class="line">class TranslatePreferences implements ITranslatePreferences</span><br><span class="line">&#123;</span><br><span class="line">    static const String _selectedLocaleKey = &apos;selected_locale&apos;;</span><br><span class="line"></span><br><span class="line">    @override</span><br><span class="line">    Future&lt;Locale&gt; getPreferredLocale() async</span><br><span class="line">    &#123;</span><br><span class="line">        final preferences = await SharedPreferences.getInstance();</span><br><span class="line"></span><br><span class="line">        if(!preferences.containsKey(_selectedLocaleKey)) return null;</span><br><span class="line"></span><br><span class="line">        var locale = preferences.getString(_selectedLocaleKey);</span><br><span class="line"></span><br><span class="line">        return localeFromString(locale);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @override</span><br><span class="line">    Future savePreferredLocale(Locale locale) async</span><br><span class="line">    &#123;</span><br><span class="line">        final preferences = await SharedPreferences.getInstance();</span><br><span class="line"></span><br><span class="line">        await preferences.setString(_selectedLocaleKey, localeToString(locale));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且不要忘记在pubspec.yaml中引用shared_preferences包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dependencies:</span><br><span class="line">  shared_preferences: &lt;latest version&gt;</span><br></pre></td></tr></table></figure><p>##### </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/zhangmiaocc/flutter_language_translate&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;源码地址&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;安装，配置和使用&quot;&gt;&lt;a href=&quot;#安装，配置和使用&quot; class=&quot;headerlink&quot; title=&quot;安装，配置和使用&quot;&gt;&lt;/a&gt;安装，配置和使用&lt;/h1&gt;&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;将此添加到包的pubspec.yaml文件中：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dependencies:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  flutter_translate: &amp;lt;latest version&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;从命令行（或从您的编辑器）安装软件包：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;flutter pub get&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;组态&quot;&gt;&lt;a href=&quot;#组态&quot; class=&quot;headerlink&quot; title=&quot;组态&quot;&gt;&lt;/a&gt;组态&lt;/h2&gt;&lt;p&gt;导入flutter_translate：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;导入 &amp;apos;package：flutter_translate / flutter_translate.dart&amp;apos; ;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;将&lt;em&gt;json&lt;/em&gt;本地化文件放置在项目中您选择的文件夹中。&lt;/p&gt;
&lt;p&gt;默认情况下，&lt;code&gt;flutter_translate&lt;/code&gt;将&lt;code&gt;assets/i18n&lt;/code&gt;在项目根目录下的目录中搜索本地化文件。&lt;/p&gt;
&lt;p&gt;在中声明您的资产本地化目录 &lt;code&gt;pubspec.yaml&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;flutter:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  assets:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - assets/i18n&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在主函数中，创建本地化委托并启动应用，然后将其与LocalizedApp包装在一起&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;void main() async&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var delegate = await LocalizationDelegate.create(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fallbackLocale: &amp;apos;en_US&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        supportedLocales: [&amp;apos;en_US&amp;apos;, &amp;apos;es&amp;apos;, &amp;apos;fa&amp;apos;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  runApp(LocalizedApp(delegate, MyApp()));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如果本地化文件的资产目录与默认目录（&lt;code&gt;assets/i18n&lt;/code&gt;）不同，则需要指定它：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var delegate = await LocalizationDelegate.create(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        basePath: &amp;apos;assets/i18n/&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;示例MyApp：&lt;/p&gt;
&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyApp&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;StatelessWidget&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Widget build(BuildContext context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; localizationDelegate = LocalizedApp.of(context).delegate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; LocalizationProvider(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      state: LocalizationProvider.of(context).state,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      child: MaterialApp(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        title: &lt;span class=&quot;string&quot;&gt;&#39;Flutter Translate Demo&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        localizationsDelegates: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          GlobalMaterialLocalizations.delegate,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          GlobalWidgetsLocalizations.delegate,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          localizationDelegate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        supportedLocales: localizationDelegate.supportedLocales,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        locale: localizationDelegate.currentLocale,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        theme: ThemeData(primarySwatch: Colors.blue),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        home: MyHomePage(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Android" scheme="https://zhangmiao.cc/categories/Android/"/>
    
      <category term="Flutter Tips" scheme="https://zhangmiao.cc/categories/Android/Flutter-Tips/"/>
    
    
      <category term="Android" scheme="https://zhangmiao.cc/tags/Android/"/>
    
      <category term="Flutter Tips" scheme="https://zhangmiao.cc/tags/Flutter-Tips/"/>
    
  </entry>
  
  <entry>
    <title>Flutter父子组件通信</title>
    <link href="https://zhangmiao.cc/posts/a44860d6.html"/>
    <id>https://zhangmiao.cc/posts/a44860d6.html</id>
    <published>2020-03-18T12:19:53.000Z</published>
    <updated>2020-03-18T12:23:14.467Z</updated>
    
    <content type="html"><![CDATA[<p><strong>父-&gt;子</strong></p><p>定义父组件变量 data，在子组件Child的构造方法中把data值传进去，子组件接收data。</p><p><strong>父-&gt;子</strong></p><p>子组件接收callBack并调用callBack将data值传过去。<br> 父组件定义onChanged，绑定到callBack中，接收子组件传过来的data值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParentState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Parent</span>&gt; </span>&#123;</span><br><span class="line">  String data = <span class="string">"父组件传递给子组件的值"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onChanged</span><span class="params">(val)</span></span>&#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      data = val;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="function">Widget <span class="title">build</span><span class="params">(BuildContext context)</span> </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">//省略非关键代码</span></span><br><span class="line">    <span class="keyword">new</span> Child(data: data,callBack: (value)=&gt;onChanged(value)),</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">child</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  childTwo(&#123;Key key, <span class="keyword">this</span>.data, <span class="keyword">this</span>.callBack&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="keyword">final</span> callBack;</span><br><span class="line">  String data;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">initState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    data = widget.data;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">  &#125;</span><br><span class="line">  ......</span><br><span class="line">  <span class="comment">//省略非关键代码</span></span><br><span class="line">  widget.callBack(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;父-&amp;gt;子&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;定义父组件变量 data，在子组件Child的构造方法中把data值传进去，子组件接收data。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;父-&amp;gt;子&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;子组件接收callBack并调用callBack将data值传过去。&lt;br&gt; 父组件定义onChanged，绑定到callBack中，接收子组件传过来的data值。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ParentState&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;State&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Parent&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  String data = &lt;span class=&quot;string&quot;&gt;&quot;父组件传递给子组件的值&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onChanged&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(val)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setState(() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      data = val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;Widget &lt;span class=&quot;title&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(BuildContext context)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//省略非关键代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Child(data: data,callBack: (value)=&amp;gt;onChanged(value)),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;StatefulWidget&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  childTwo(&amp;#123;Key key, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.data, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.callBack&amp;#125;) : &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(key: key);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; callBack;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  String data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;initState&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    data = widget.data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.initState();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//省略非关键代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  widget.callBack(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Android" scheme="https://zhangmiao.cc/categories/Android/"/>
    
      <category term="Flutter Tips" scheme="https://zhangmiao.cc/categories/Android/Flutter-Tips/"/>
    
    
      <category term="Android" scheme="https://zhangmiao.cc/tags/Android/"/>
    
      <category term="Flutter Tips" scheme="https://zhangmiao.cc/tags/Flutter-Tips/"/>
    
  </entry>
  
  <entry>
    <title>Flutter自定义轮播图Banner</title>
    <link href="https://zhangmiao.cc/posts/2f3abe95.html"/>
    <id>https://zhangmiao.cc/posts/2f3abe95.html</id>
    <published>2020-03-14T06:16:21.000Z</published>
    <updated>2020-03-14T06:20:45.621Z</updated>
    
    <content type="html"><![CDATA[<h3 id="widget-banner-dart"><a href="#widget-banner-dart" class="headerlink" title="widget_banner.dart"></a>widget_banner.dart</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:async'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:ajbaby/enum/enum_indicator_style.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:ajbaby/route_manager.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter_screenutil/flutter_screenutil.dart'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 自定义banner</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// ignore: must_be_immutable</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomBanner</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; images;</span><br><span class="line">  <span class="built_in">double</span> height;</span><br><span class="line">  ValueChanged&lt;<span class="built_in">int</span>&gt; onTap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  IndicatorStyle indicatorStyleStr;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  CustomBanner(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.images,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.indicatorStyleStr,</span><br><span class="line">    <span class="keyword">this</span>.height = <span class="number">375</span>,</span><br><span class="line">    <span class="keyword">this</span>.onTap,</span><br><span class="line">  &#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _CustomBannerState createState() =&gt; _CustomBannerState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_CustomBannerState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">CustomBanner</span>&gt; </span>&#123;</span><br><span class="line">  PageController _pageController;</span><br><span class="line">  <span class="built_in">int</span> _curIndex;</span><br><span class="line">  Timer _timer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    _curIndex = widget.images.length * <span class="number">5</span>;</span><br><span class="line">    _pageController = PageController(initialPage: _curIndex);</span><br><span class="line">    _initTimer();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement dispose</span></span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line"><span class="comment">//    _cancelTimer();</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Stack(</span><br><span class="line">      alignment: Alignment.bottomCenter,</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        _buildPageView(),</span><br><span class="line">        _buildIndicator(),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Widget _buildIndicator() &#123;</span><br><span class="line">    <span class="keyword">var</span> length = widget.images.length;</span><br><span class="line">    <span class="keyword">return</span> Positioned(</span><br><span class="line">      bottom: <span class="number">5</span>,</span><br><span class="line">      child: Row(</span><br><span class="line">        children: widget.images.map((s) &#123;</span><br><span class="line">          <span class="keyword">return</span> Padding(padding: <span class="keyword">const</span> EdgeInsets.symmetric(horizontal: <span class="number">3.0</span>), child: _indicatorStyle(s, length));</span><br><span class="line">        &#125;).toList(),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Widget _indicatorStyle(s, length) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (widget.indicatorStyleStr) &#123;</span><br><span class="line">      <span class="keyword">case</span> IndicatorStyle.circle:</span><br><span class="line">        <span class="keyword">return</span> Container(</span><br><span class="line">            child: ClipOval(</span><br><span class="line">          child: Container(</span><br><span class="line">            width: ScreenUtil().setWidth(<span class="number">8</span>),</span><br><span class="line">            height: ScreenUtil().setHeight(<span class="number">8</span>),</span><br><span class="line">            color: s == widget.images[_curIndex % length] ? Color(<span class="number">0xFFFF5F6D</span>) : Color(<span class="number">0xFFE0E0E0</span>),</span><br><span class="line">          ),</span><br><span class="line">        ));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> IndicatorStyle.line:</span><br><span class="line">        <span class="keyword">return</span> Container(</span><br><span class="line">            child: ClipRRect(</span><br><span class="line">          borderRadius: BorderRadius.circular(<span class="number">10.0</span>),</span><br><span class="line">          child: Container(</span><br><span class="line">            width: ScreenUtil().setWidth(<span class="number">20</span>),</span><br><span class="line">            height: ScreenUtil().setHeight(<span class="number">3</span>),</span><br><span class="line">            color: s == widget.images[_curIndex % length] ? Color(<span class="number">0xFFFF5F6D</span>) : Color(<span class="number">0xFFE0E0E0</span>),</span><br><span class="line">          ),</span><br><span class="line">        ));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Widget _buildPageView() &#123;</span><br><span class="line">    <span class="keyword">var</span> length = widget.images.length;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      height: ScreenUtil().setHeight(widget.height),</span><br><span class="line">      child: PageView.builder(</span><br><span class="line">        controller: _pageController,</span><br><span class="line">        onPageChanged: (index) &#123;</span><br><span class="line">          setState(() &#123;</span><br><span class="line">            _curIndex = index;</span><br><span class="line">            <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">              _curIndex = length;</span><br><span class="line">              _changePage();</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        itemBuilder: (context, index) &#123;</span><br><span class="line">          <span class="keyword">return</span> GestureDetector(</span><br><span class="line">            onPanDown: (details) &#123;</span><br><span class="line">              _cancelTimer();</span><br><span class="line">            &#125;,</span><br><span class="line">            onTap: () &#123;</span><br><span class="line">              <span class="comment">//弹出路由，跳转到其他页面</span></span><br><span class="line">              Navigator.of(context).pushNamed(RouteNames.productDetails);</span><br><span class="line"><span class="comment">//              Scaffold.of(context).showSnackBar(</span></span><br><span class="line"><span class="comment">//                SnackBar(</span></span><br><span class="line"><span class="comment">//                  content: Text('当前 page 为 $&#123;index % length&#125;'),</span></span><br><span class="line"><span class="comment">//                  duration: Duration(milliseconds: 500),</span></span><br><span class="line"><span class="comment">//                ),</span></span><br><span class="line"><span class="comment">//              );</span></span><br><span class="line">            &#125;,</span><br><span class="line">            child: Image.network(</span><br><span class="line">              widget.images[index % length],</span><br><span class="line">              fit: BoxFit.cover,</span><br><span class="line">            ),</span><br><span class="line">          );</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/// 点击到图片的时候取消定时任务</span></span><br><span class="line">  _cancelTimer() &#123;</span><br><span class="line">    <span class="keyword">if</span> (_timer != <span class="keyword">null</span>) &#123;</span><br><span class="line">      _timer.cancel();</span><br><span class="line">      _timer = <span class="keyword">null</span>;</span><br><span class="line">      _initTimer();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/// 初始化定时任务</span></span><br><span class="line">  _initTimer() &#123;</span><br><span class="line">    <span class="keyword">if</span> (_timer == <span class="keyword">null</span>) &#123;</span><br><span class="line">      _timer = Timer.periodic(<span class="built_in">Duration</span>(seconds: <span class="number">3</span>), (t) &#123;</span><br><span class="line">        _curIndex++;</span><br><span class="line">        _pageController.animateToPage(</span><br><span class="line">          _curIndex,</span><br><span class="line">          duration: <span class="built_in">Duration</span>(milliseconds: <span class="number">300</span>),</span><br><span class="line">          curve: Curves.linear,</span><br><span class="line">        );</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/// 切换页面，并刷新小圆点</span></span><br><span class="line">  _changePage() &#123;</span><br><span class="line">    Timer(<span class="built_in">Duration</span>(milliseconds: <span class="number">350</span>), () &#123;</span><br><span class="line">      _pageController.jumpToPage(_curIndex);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">child: CustomBanner(</span><br><span class="line">  images: _imgData,</span><br><span class="line">  indicatorStyleStr: IndicatorStyle.line,</span><br><span class="line">  height: <span class="built_in">double</span>.infinity,</span><br><span class="line">),</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;widget-banner-dart&quot;&gt;&lt;a href=&quot;#widget-banner-dart&quot; class=&quot;headerlink&quot; title=&quot;widget_banner.dart&quot;&gt;&lt;/a&gt;widget_banner.dart&lt;/h3&gt;&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;185&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;dart:async&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;package:ajbaby/enum/enum_indicator_style.dart&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;package:ajbaby/route_manager.dart&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;package:flutter/material.dart&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;package:flutter_screenutil/flutter_screenutil.dart&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 自定义banner&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ignore: must_be_immutable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CustomBanner&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;StatefulWidget&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;&amp;gt; images;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;double&lt;/span&gt; height;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ValueChanged&amp;lt;&lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;&amp;gt; onTap;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  IndicatorStyle indicatorStyleStr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  CustomBanner(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Key key,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@required&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.images,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@required&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.indicatorStyleStr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.height = &lt;span class=&quot;number&quot;&gt;375&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.onTap,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;) : &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(key: key);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  _CustomBannerState createState() =&amp;gt; _CustomBannerState();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;_CustomBannerState&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;State&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;CustomBanner&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  PageController _pageController;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; _curIndex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Timer _timer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; initState() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.initState();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _curIndex = widget.images.length * &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _pageController = PageController(initialPage: _curIndex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _initTimer();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; dispose() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// &lt;span class=&quot;doctag&quot;&gt;TODO:&lt;/span&gt; implement dispose&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.dispose();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    _cancelTimer();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Widget build(BuildContext context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Stack(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      alignment: Alignment.bottomCenter,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      children: &amp;lt;Widget&amp;gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _buildPageView(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _buildIndicator(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Widget _buildIndicator() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; length = widget.images.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Positioned(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      bottom: &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      child: Row(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        children: widget.images.map((s) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Padding(padding: &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; EdgeInsets.symmetric(horizontal: &lt;span class=&quot;number&quot;&gt;3.0&lt;/span&gt;), child: _indicatorStyle(s, length));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;).toList(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Widget _indicatorStyle(s, length) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (widget.indicatorStyleStr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; IndicatorStyle.circle:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Container(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            child: ClipOval(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          child: Container(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            width: ScreenUtil().setWidth(&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            height: ScreenUtil().setHeight(&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            color: s == widget.images[_curIndex % length] ? Color(&lt;span class=&quot;number&quot;&gt;0xFFFF5F6D&lt;/span&gt;) : Color(&lt;span class=&quot;number&quot;&gt;0xFFE0E0E0&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; IndicatorStyle.line:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Container(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            child: ClipRRect(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          borderRadius: BorderRadius.circular(&lt;span class=&quot;number&quot;&gt;10.0&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          child: Container(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            width: ScreenUtil().setWidth(&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            height: ScreenUtil().setHeight(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            color: s == widget.images[_curIndex % length] ? Color(&lt;span class=&quot;number&quot;&gt;0xFFFF5F6D&lt;/span&gt;) : Color(&lt;span class=&quot;number&quot;&gt;0xFFE0E0E0&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Widget _buildPageView() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; length = widget.images.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Container(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      height: ScreenUtil().setHeight(widget.height),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      child: PageView.builder(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        controller: _pageController,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        onPageChanged: (index) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          setState(() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            _curIndex = index;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (index == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              _curIndex = length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              _changePage();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        itemBuilder: (context, index) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; GestureDetector(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            onPanDown: (details) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              _cancelTimer();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            onTap: () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              &lt;span class=&quot;comment&quot;&gt;//弹出路由，跳转到其他页面&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              Navigator.of(context).pushNamed(RouteNames.productDetails);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//              Scaffold.of(context).showSnackBar(&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//                SnackBar(&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//                  content: Text(&#39;当前 page 为 $&amp;#123;index % length&amp;#125;&#39;),&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//                  duration: Duration(milliseconds: 500),&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//                ),&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//              );&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            child: Image.network(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              widget.images[index % length],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              fit: BoxFit.cover,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/// 点击到图片的时候取消定时任务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  _cancelTimer() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (_timer != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      _timer.cancel();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      _timer = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      _initTimer();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/// 初始化定时任务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  _initTimer() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (_timer == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      _timer = Timer.periodic(&lt;span class=&quot;built_in&quot;&gt;Duration&lt;/span&gt;(seconds: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;), (t) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _curIndex++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _pageController.animateToPage(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          _curIndex,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          duration: &lt;span class=&quot;built_in&quot;&gt;Duration&lt;/span&gt;(milliseconds: &lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          curve: Curves.linear,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/// 切换页面，并刷新小圆点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  _changePage() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Timer(&lt;span class=&quot;built_in&quot;&gt;Duration&lt;/span&gt;(milliseconds: &lt;span class=&quot;number&quot;&gt;350&lt;/span&gt;), () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      _pageController.jumpToPage(_curIndex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;引用&quot;&gt;&lt;a href=&quot;#引用&quot; class=&quot;headerlink&quot; title=&quot;引用&quot;&gt;&lt;/a&gt;引用&lt;/h3&gt;&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;child: CustomBanner(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  images: _imgData,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  indicatorStyleStr: IndicatorStyle.line,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  height: &lt;span class=&quot;built_in&quot;&gt;double&lt;/span&gt;.infinity,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;),&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Android" scheme="https://zhangmiao.cc/categories/Android/"/>
    
      <category term="Flutter Tips" scheme="https://zhangmiao.cc/categories/Android/Flutter-Tips/"/>
    
    
      <category term="Android" scheme="https://zhangmiao.cc/tags/Android/"/>
    
      <category term="Flutter Tips" scheme="https://zhangmiao.cc/tags/Flutter-Tips/"/>
    
  </entry>
  
  <entry>
    <title>Flutter自定义TabBar</title>
    <link href="https://zhangmiao.cc/posts/251aa72f.html"/>
    <id>https://zhangmiao.cc/posts/251aa72f.html</id>
    <published>2020-03-14T03:07:37.000Z</published>
    <updated>2020-03-14T06:20:57.625Z</updated>
    
    <content type="html"><![CDATA[<h3 id="custom-tabbar-dart"><a href="#custom-tabbar-dart" class="headerlink" title="custom_tabbar.dart"></a>custom_tabbar.dart</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:ajbaby/res/colors.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ignore: must_be_immutable</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomTabBar</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> <span class="keyword">implements</span> <span class="title">PreferredSizeWidget</span> </span>&#123;</span><br><span class="line">  Color containerBgColor;</span><br><span class="line">  Color labelColor;</span><br><span class="line">  Color unselectedLabelColor;</span><br><span class="line">  Color indicatorColor;</span><br><span class="line">  TabController tabController;</span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; tabsList = <span class="keyword">new</span> <span class="built_in">List</span>&lt;Widget&gt;();</span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; tabBarViewsList = <span class="keyword">new</span> <span class="built_in">List</span>&lt;Widget&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// @required声明必传参数</span></span><br><span class="line">  CustomTabBar(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.tabsList,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.tabBarViewsList,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.tabController,</span><br><span class="line">    <span class="keyword">this</span>.containerBgColor = YColors.color_FFFFFF,</span><br><span class="line">    <span class="keyword">this</span>.labelColor = YColors.color_FF5F6D,</span><br><span class="line">    <span class="keyword">this</span>.unselectedLabelColor = YColors.color_858585,</span><br><span class="line">    <span class="keyword">this</span>.indicatorColor = YColors.color_FF5F6D,</span><br><span class="line">  &#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _CustomTabBarState createState() &#123;</span><br><span class="line">    <span class="keyword">return</span> _CustomTabBarState();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> implement preferredSize</span></span><br><span class="line">  Size <span class="keyword">get</span> preferredSize =&gt; <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_CustomTabBarState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">CustomTabBar</span>&gt; <span class="title">with</span> <span class="title">AutomaticKeepAliveClientMixin</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line"><span class="comment">//    widget.tabController.dispose();</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">super</span>.build(context);</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: PreferredSize(</span><br><span class="line">          child: Container(</span><br><span class="line">            color: widget.containerBgColor,</span><br><span class="line">            child: TabBar(</span><br><span class="line">              isScrollable: <span class="keyword">true</span>,</span><br><span class="line">              controller: widget.tabController,</span><br><span class="line">              tabs: widget.tabsList,</span><br><span class="line">              labelColor: widget.labelColor,</span><br><span class="line">              unselectedLabelColor: widget.unselectedLabelColor,</span><br><span class="line">              indicatorColor: widget.indicatorColor,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          preferredSize: Size.fromHeight(kToolbarHeight)),</span><br><span class="line">      body: TabBarView(</span><br><span class="line">        controller: widget.tabController,</span><br><span class="line">        children: widget.tabBarViewsList,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> implement wantKeepAlive</span></span><br><span class="line">  <span class="built_in">bool</span> <span class="keyword">get</span> wantKeepAlive =&gt; <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">body: CustomTabBar(</span><br><span class="line">  tabsList: _tabsList,</span><br><span class="line">  tabBarViewsList: _tabBarViewsList,</span><br><span class="line">  tabController: _tabController,</span><br><span class="line">),</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;custom-tabbar-dart&quot;&gt;&lt;a href=&quot;#custom-tabbar-dart&quot; class=&quot;headerlink&quot; title=&quot;custom_tabbar.dart&quot;&gt;&lt;/a&gt;custom_tabbar.dart&lt;/h3&gt;&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;package:ajbaby/res/colors.dart&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;package:flutter/material.dart&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ignore: must_be_immutable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CustomTabBar&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;StatefulWidget&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PreferredSizeWidget&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Color containerBgColor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Color labelColor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Color unselectedLabelColor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Color indicatorColor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  TabController tabController;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;List&lt;/span&gt;&amp;lt;Widget&amp;gt; tabsList = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;List&lt;/span&gt;&amp;lt;Widget&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;List&lt;/span&gt;&amp;lt;Widget&amp;gt; tabBarViewsList = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;List&lt;/span&gt;&amp;lt;Widget&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// @required声明必传参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  CustomTabBar(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Key key,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@required&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.tabsList,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@required&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.tabBarViewsList,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@required&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.tabController,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.containerBgColor = YColors.color_FFFFFF,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.labelColor = YColors.color_FF5F6D,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.unselectedLabelColor = YColors.color_858585,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.indicatorColor = YColors.color_FF5F6D,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;) : &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(key: key);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  _CustomTabBarState createState() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _CustomTabBarState();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// &lt;span class=&quot;doctag&quot;&gt;TODO:&lt;/span&gt; implement preferredSize&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Size &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; preferredSize =&amp;gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;_CustomTabBarState&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;State&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;CustomTabBar&lt;/span&gt;&amp;gt; &lt;span class=&quot;title&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AutomaticKeepAliveClientMixin&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; initState() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.initState();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; dispose() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.dispose();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    widget.tabController.dispose();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Widget build(BuildContext context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.build(context);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Scaffold(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      appBar: PreferredSize(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          child: Container(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            color: widget.containerBgColor,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            child: TabBar(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              isScrollable: &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              controller: widget.tabController,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              tabs: widget.tabsList,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              labelColor: widget.labelColor,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              unselectedLabelColor: widget.unselectedLabelColor,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              indicatorColor: widget.indicatorColor,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          preferredSize: Size.fromHeight(kToolbarHeight)),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      body: TabBarView(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        controller: widget.tabController,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        children: widget.tabBarViewsList,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// &lt;span class=&quot;doctag&quot;&gt;TODO:&lt;/span&gt; implement wantKeepAlive&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; wantKeepAlive =&amp;gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;引用&quot;&gt;&lt;a href=&quot;#引用&quot; class=&quot;headerlink&quot; title=&quot;引用&quot;&gt;&lt;/a&gt;引用&lt;/h3&gt;&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;body: CustomTabBar(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  tabsList: _tabsList,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  tabBarViewsList: _tabBarViewsList,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  tabController: _tabController,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;),&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Android" scheme="https://zhangmiao.cc/categories/Android/"/>
    
      <category term="Flutter Tips" scheme="https://zhangmiao.cc/categories/Android/Flutter-Tips/"/>
    
    
      <category term="Android" scheme="https://zhangmiao.cc/tags/Android/"/>
    
      <category term="Flutter Tips" scheme="https://zhangmiao.cc/tags/Flutter-Tips/"/>
    
  </entry>
  
  <entry>
    <title>Flutter中管理路由栈的方法和应用</title>
    <link href="https://zhangmiao.cc/posts/be45d28e.html"/>
    <id>https://zhangmiao.cc/posts/be45d28e.html</id>
    <published>2020-03-12T09:36:03.000Z</published>
    <updated>2020-03-13T08:27:23.698Z</updated>
    
    <content type="html"><![CDATA[<p>本文首先讲的Flutter中的路由，然后主要讲下Flutter中栈管理的几种方法。</p><ul><li>了解下Route和Navigator</li><li>简单的路由</li><li>命名路由</li><li>自定义路由</li><li>Flutter中使用的路由场景</li><li>Flutter中的路由栈管理</li><li>实战</li></ul><h2 id="了解下Route和Navigator"><a href="#了解下Route和Navigator" class="headerlink" title="了解下Route和Navigator"></a>了解下Route和Navigator</h2><p>在Flutter中，我们需要在不同屏幕或者页面之间进行切换和发送数据,这些“screens”或者“pages”被称为Route(路由),是由一个Navigator的小部件进行管理。</p><p>Navigator可以管理包含若干Route对象的堆栈，并提供了管理的方法，平常我们经常用的就是[Navigator.push]和[Navigator.pop]。</p><p>尽管我们可以自己直接创建一个navigator,但是当我们创建一个WidgetsApp或者MaterialApp,Flutter会自动默认创建一个Navigator。<br> 所以我们一般是使用由[WidgetsApp]或者[MaterialApp]所创建的Navigator就行了，然后通过调用[Navigator.of]<br> 来拿到当前的Navigator的状态NavigatorState,然后调用它的pop或者push方法。</p><h2 id="简单的路由"><a href="#简单的路由" class="headerlink" title="简单的路由"></a>简单的路由</h2><p>比如要导航到一个新的页面，我们可以创建一个[MaterialPageRoute]的实例，然后调用Navigator.of(context).push()方法就将新页面添加到堆栈的顶部。</p><p>返回上一个页面，则调用Navigator.pop(context)就可以从堆栈中删除这个屏幕;</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Navigator.of(context)</span><br><span class="line">  .push(<span class="keyword">new</span> MaterialPageRoute(builder: (context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DetailPage();</span><br><span class="line">  &#125;));</span><br><span class="line"> Navigator.pop(context);</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h2><p>如果每次跳转到一个新的路由页面，都要跟上面一样的写法，创建MaterialPageRoute实例然后调用push方法，这样的话就太麻烦了。</p><p>所以，Flutter提供了另外一种方式来管理路由，可以使用命名路由，然后使用Navigator.pushNamed（）方法来弹出路由。</p><p>创建MaterialApp的时候需要传入一个routes参数，routes本质上是一个Map&lt;String,WidgetBuilder&gt;,key值对应自定义的路径名字，value值会映射到对应的WidgetBuilder,我们可以在WidgetBuilder中创建对应的页面。</p><p>Navigator.pushNamed()方法有两个参数（BuildContext，String),第一个是上下文，第二个是在路由中预定义的string。</p><p>特殊情况处理：当push一个不存在的路由页面的时候，需要进行提示操作。可以使用UnknownRoute的属性。比如下面的例子，<br> 当push一个不存在的路由的时候，会跳转到NotFoundPage的页面。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() =&gt; runApp(<span class="keyword">new</span> MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">      routes: &#123;</span><br><span class="line">        <span class="comment">//Map&lt;String, WidgetBuilder&gt;</span></span><br><span class="line">        <span class="string">"/splash"</span>: (context) =&gt; <span class="keyword">new</span> SplashPage(),</span><br><span class="line">        <span class="string">"/login"</span>: (context) =&gt; <span class="keyword">new</span> LoginPage(),</span><br><span class="line">        <span class="string">"/home"</span>: (context) =&gt; <span class="keyword">new</span> HomePage(),</span><br><span class="line">        <span class="string">"/detail"</span>: (context) =&gt; <span class="keyword">new</span> DetailPage(),</span><br><span class="line">      &#125;,</span><br><span class="line">      onUnknownRoute: (RouteSettings setting) &#123;</span><br><span class="line">        <span class="built_in">String</span> name = setting.name;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"onUnknownRoute:$name"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MaterialPageRoute(builder: (context) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> NotFoundPage();</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">      title: <span class="string">'Flutter Demo'</span>,</span><br><span class="line">      theme: <span class="keyword">new</span> ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: <span class="keyword">new</span> SplashPage(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//弹出路由，跳转到其他页面</span></span><br><span class="line"> Navigator.of(context).pushNamed(<span class="string">"/detail"</span>);</span><br></pre></td></tr></table></figure><h2 id="自定义路由"><a href="#自定义路由" class="headerlink" title="自定义路由"></a>自定义路由</h2><p>比如我们上面使用的是MaterialPageRoute，在页面切换的时候，会有默认的自适应平台的过渡动画。<br> 如果想自定义页面的进场和出场动画，那么需要使用PageRouteBuilder来创建路由。<br> PageRouteBuilder是主要的部分，一个是“pageBuilder”，用来创建所要跳转到的页面，另一个是“transitionsBuilder”，也就是我们可以自定义的转场效果。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PageRouteBuilder(&#123;</span><br><span class="line">  RouteSettings settings,</span><br><span class="line">  <span class="meta">@required</span> <span class="keyword">this</span>.pageBuilder,<span class="comment">//构造页面</span></span><br><span class="line">  <span class="keyword">this</span>.transitionsBuilder = _defaultTransitionsBuilder,<span class="comment">//创建转场动画</span></span><br><span class="line">  <span class="keyword">this</span>.transitionDuration = <span class="keyword">const</span> <span class="built_in">Duration</span>(milliseconds: <span class="number">300</span>),<span class="comment">//转场动画的持续时间</span></span><br><span class="line">  <span class="keyword">this</span>.opaque = <span class="keyword">true</span>,<span class="comment">//是否是透明的</span></span><br><span class="line">  <span class="keyword">this</span>.barrierDismissible = <span class="keyword">false</span>,<span class="comment">//举个例子，比如AlertDialog也是利用PageRouteBuilder进行创建的，barrierDismissible若为false，点击对话框周围，对话框不会关闭；若为true，点击对话框周围，对话框自动关闭。</span></span><br><span class="line">  <span class="keyword">this</span>.barrierColor,</span><br><span class="line">  <span class="keyword">this</span>.barrierLabel,</span><br><span class="line">  <span class="keyword">this</span>.maintainState = <span class="keyword">true</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只修改单独一个页面的过渡动画，可以这样操作，例如下面的代码，</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义跳转动画</span></span><br><span class="line">Navigator.push(</span><br><span class="line">  context,</span><br><span class="line">  PageRouteBuilder(</span><br><span class="line">    opaque: <span class="keyword">false</span>,</span><br><span class="line">    pageBuilder: (BuildContext context, _, __) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> HomePage();</span><br><span class="line">    &#125;,</span><br><span class="line">    transitionsBuilder: (___, Animation&lt;<span class="built_in">double</span>&gt; animation,</span><br><span class="line">                         ____, Widget child) &#123;</span><br><span class="line">      <span class="keyword">return</span> FadeTransition(</span><br><span class="line">        opacity: animation,</span><br><span class="line">        child: RotationTransition(</span><br><span class="line">          turns: Tween&lt;<span class="built_in">double</span>&gt;(begin: <span class="number">0.5</span>, end: <span class="number">1.0</span>)</span><br><span class="line">          .animate(animation),</span><br><span class="line">          child: child,</span><br><span class="line">        ),</span><br><span class="line">      );</span><br><span class="line">    &#125;));</span><br></pre></td></tr></table></figure><h2 id="Flutter中使用的路由场景"><a href="#Flutter中使用的路由场景" class="headerlink" title="Flutter中使用的路由场景"></a>Flutter中使用的路由场景</h2><p>在Flutter中，我们会使用到这些方法，例如[showDialog()], [showMenu()], and [showModalBottomSheet()]等，这些方法其实本质上是创建了一个路由的页面后，并调用Navigator的push方法去push到当前的屏幕上。</p><p>showDialog()其实是调用了showGeneralDialog()，所以下面贴了showGeneralDialog的源码，可以看出，也是利用了Navigator的push方法的。</p><p>这里插一下，关于对话框的使用，比如列表对话框，自定义对话框的使用和踩坑，可以看下我的另外一篇文章：<a href="https://juejin.im/post/5c0aa283518825444612a1eb" target="_blank" rel="noopener">Flutter之Dialog使用和踩坑</a></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Future&lt;T&gt; showGeneralDialog&lt;T&gt;(&#123;</span><br><span class="line">  <span class="meta">@required</span> BuildContext context,</span><br><span class="line">  <span class="meta">@required</span> RoutePageBuilder pageBuilder,</span><br><span class="line">  <span class="built_in">bool</span> barrierDismissible,</span><br><span class="line">  <span class="built_in">String</span> barrierLabel,</span><br><span class="line">  Color barrierColor,</span><br><span class="line">  <span class="built_in">Duration</span> transitionDuration,</span><br><span class="line">  RouteTransitionsBuilder transitionBuilder,</span><br><span class="line">&#125;) &#123;</span><br><span class="line">  <span class="keyword">return</span> Navigator.of(context, rootNavigator: <span class="keyword">true</span>).push&lt;T&gt;(_DialogRoute&lt;T&gt;(</span><br><span class="line">    pageBuilder: pageBuilder,</span><br><span class="line">    barrierDismissible: barrierDismissible,</span><br><span class="line">    barrierLabel: barrierLabel,</span><br><span class="line">    barrierColor: barrierColor,</span><br><span class="line">    transitionDuration: transitionDuration,</span><br><span class="line">    transitionBuilder: transitionBuilder,</span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Flutter中的路由栈管理"><a href="#Flutter中的路由栈管理" class="headerlink" title="Flutter中的路由栈管理"></a>Flutter中的路由栈管理</h2><p>相信大家对栈Stack都有一定的了解，push方法是将元素添加到堆栈的顶部，pop方法是删除顶部元素。</p><p>下面用图文的方式来讲解Flutter中几个管理栈的方法之间的区别。</p><h3 id="push（）"><a href="#push（）" class="headerlink" title="push（）"></a>push（）</h3><p>push()，就是直接将一个元素插入到堆栈的顶部。</p><p>这个方法很简单，并且我们会经常用到。比如从Screen1中利用navigator的push方法，将Screen2的路由弹到堆栈的顶部。堆栈的情况如下图：</p><p><img src="https://raw.githubusercontent.com/zhangmiaocc/blogImageResource/master/img/WechatIMG14.png" alt></p><p>可以利用下面的两个push方法，实现这个目的。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Navigator.of(context).pushNamed(<span class="string">"/111"</span>);</span><br><span class="line">Navigator.of(context).push(route);</span><br></pre></td></tr></table></figure><h3 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h3><p>pop(), 就是将堆栈的顶部元素进行删除，回退到上一个界面。</p><p>比如上面的例子，在Screen2中利用pop()将顶部的Screen2从堆栈中移除，之后的堆栈如下图：</p><p><img src="https://raw.githubusercontent.com/zhangmiaocc/blogImageResource/master/img/WechatIMG16.png" alt></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Navigator.of(context).pop();</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>当利用push()跳转到一个使用Scaffold的页面的时候，Scaffold会自动在其AppBar上添加一个“ 后退 ”按钮，点击按钮会自动调用Navigator.pop()。</li><li>在Android中，按下设备后退按钮也会自动调用Navigator.pop()。</li></ul><h3 id="pushReplacementNamed-和popAndPushNamed"><a href="#pushReplacementNamed-和popAndPushNamed" class="headerlink" title="pushReplacementNamed()和popAndPushNamed()"></a>pushReplacementNamed()和popAndPushNamed()</h3><p>有下面的这种场景，我们进入到Screen3页面后，要跳转到Screen4页面，不过点击返回按钮，并不想回退到Screen3页面。也就是想将Screen4的元素插入栈顶的同时，将Screen3的元素夜进行移除。</p><p><img src="https://raw.githubusercontent.com/zhangmiaocc/blogImageResource/master/img/WechatIMG17.png" alt></p><p>这个时候，我们就要用到pushReplacementNamed()或者popAndPushNamed(),pushReplacement()都可以实现这个目的。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Navigator.of(context).pushReplacementNamed(<span class="string">'/screen4'</span>);</span><br><span class="line">Navigator.popAndPushNamed(context, <span class="string">'/screen4'</span>);</span><br><span class="line">Navigator.of(context).pushReplacement(newRoute);</span><br></pre></td></tr></table></figure><h3 id="pushNamedAndRemoveUntil"><a href="#pushNamedAndRemoveUntil" class="headerlink" title="pushNamedAndRemoveUntil()"></a>pushNamedAndRemoveUntil()</h3><p>一般会有这种场景，我们在已经登录的情况下，在设置界面会有个退出用户登录的按钮，点击后会注销用户退出登录，并且会跳转到登录界面。那么路由栈的变化应该会如下图所示：</p><p><img src="https://raw.githubusercontent.com/zhangmiaocc/blogImageResource/master/img/WechatIMG18.png" alt></p><p>如果只是简单的进行push一个LoginScreen的操作的话，那么按返回键的话，会回到上一个页面，这样的逻辑是不对的。</p><p>所以我们应该删除掉路由栈中的所有route，然后再弹出LoginScreen。这个时候就要用到pushNamedAndRemoveUntil()或者pushAndRemoveUntil()了。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> RoutePredicate = <span class="built_in">bool</span> <span class="built_in">Function</span>(Route&lt;<span class="keyword">dynamic</span>&gt; route);</span><br><span class="line"><span class="comment">//第一个参数context是上下文的context，</span></span><br><span class="line"><span class="comment">//第二个参数newRouteName是新的路由所命名的路径</span></span><br><span class="line"><span class="comment">//第三个参数predicate，返回值是bool类型，按照我的理解，就是用来判断Until所结</span></span><br><span class="line"><span class="comment">//束的时机，如果为false的话，就会一直继续执行Remove的操作，直到为true的时候，停止Remove操作，然后才执行push操作。</span></span><br><span class="line">  <span class="keyword">static</span> Future&lt;T&gt; pushNamedAndRemoveUntil&lt;T <span class="keyword">extends</span> <span class="built_in">Object</span>&gt;(BuildContext context, <span class="built_in">String</span> newRouteName, RoutePredicate predicate) &#123;</span><br><span class="line">    <span class="keyword">return</span> Navigator.of(context).pushNamedAndRemoveUntil&lt;T&gt;(newRouteName, predicate);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>如果想在弹出新路由之前，删除路由栈中的所有路由，那可以使用下面的这种写法，(Route<dynamic> route) =&gt; false，这样能保证把之前所有的路由都进行删除，然后才push新的路由。</dynamic></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Navigator.of(context).pushNamedAndRemoveUntil(<span class="string">'/LoginScreen'</span>, (Route&lt;<span class="keyword">dynamic</span>&gt; route) =&gt; <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><ul><li>如果想在弹出新路由之前，删除路由栈中的部分路由。比如只弹出Screen1路由上面的Screen3和Screen2，然后再push新的Screen4，堆栈的情况如下图：</li></ul><p><img src="https://raw.githubusercontent.com/zhangmiaocc/blogImageResource/master/img/WechatIMG2031231.png" alt></p><p>利用ModalRoute.withName(name)，来执行判断，可以看下面的源码，当所传的name跟堆栈中的路由所定义的时候，会返回true值，不匹配的话，则返回false。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Navigator.of(context).pushNamedAndRemoveUntil(<span class="string">'/screen4'</span>,ModalRoute.withName(<span class="string">'/screen1'</span>));</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//ModalRoute.withName的源码</span></span><br><span class="line">   <span class="keyword">static</span> RoutePredicate withName(<span class="built_in">String</span> name) &#123;</span><br><span class="line">    <span class="keyword">return</span> (Route&lt;<span class="keyword">dynamic</span>&gt; route) &#123;</span><br><span class="line">      <span class="keyword">return</span> !route.willHandlePopInternally</span><br><span class="line">          &amp;&amp; route <span class="keyword">is</span> ModalRoute</span><br><span class="line">          &amp;&amp; route.settings.name == name;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="popUntil"><a href="#popUntil" class="headerlink" title="popUntil()"></a>popUntil()</h3><p>popUntil()方法的过程其实跟上面差不多，就是是少了push一个新页面的操作，只是单纯的进行移除路由操作。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">popUntil(RoutePredicate predicate);</span><br><span class="line">Navigator.of(context).popUntil(ModalRoute.withName(<span class="string">"/XXX"</span>));</span><br></pre></td></tr></table></figure><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>这里写了一个Demo，将上面的几种管理栈的用法都运用了一下。</p><img src="https://user-gold-cdn.xitu.io/2019/2/3/168b2f2a94dd26d2" width="300" height="600/"><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">      routes: &#123;</span><br><span class="line">        <span class="comment">//Map&lt;String, WidgetBuilder&gt;</span></span><br><span class="line">        <span class="string">"/splash"</span>: (context) =&gt; <span class="keyword">new</span> SplashPage(),</span><br><span class="line">        <span class="string">"/login"</span>: (context) =&gt; <span class="keyword">new</span> LoginPage(),</span><br><span class="line">        <span class="string">"/home"</span>: (context) =&gt; <span class="keyword">new</span> HomePage(),</span><br><span class="line">        <span class="string">"/detail"</span>: (context) =&gt; <span class="keyword">new</span> DetailPage(),</span><br><span class="line">      &#125;,</span><br><span class="line">      onUnknownRoute: (RouteSettings setting) &#123;</span><br><span class="line">        <span class="built_in">String</span> name = setting.name;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"onUnknownRoute:$name"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MaterialPageRoute(builder: (context) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> NotFoundPage();</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">      title: <span class="string">'Flutter Demo'</span>,</span><br><span class="line">      theme: <span class="keyword">new</span> ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: <span class="keyword">new</span> SplashPage(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先是定义在MaterialApp中定义多个路由，Demo中有多个路由:</p><ul><li>SplashPage 启动页面，设置2秒后自动跳转到LoginPage</li><li>LoginPage 登录页面，点击按钮，模仿登录成功的动作并跳转到HomePage</li><li>HomePage 主页，显示一个列表，点击列表项跳转到DetailPage</li><li>DetailPage 详细信息页面，并且有一个退出登录的按钮</li><li>NotFoundPage 当没有路由可以匹配的时候，弹出这个页面</li></ul><p>下面简单讲一下代码：</p><h4 id="SplashPage-gt-LoginPage-LoginPage-gt-HomePage"><a href="#SplashPage-gt-LoginPage-LoginPage-gt-HomePage" class="headerlink" title="SplashPage-&gt;LoginPage,LoginPage-&gt;HomePage"></a>SplashPage-&gt;LoginPage,LoginPage-&gt;HomePage</h4><p>用的都是pushReplacementNamed()。因为跳到登录界面后，不需要返回到SplashPage，所以需要将SplashPage从路由栈中移除。LoginPage-&gt;HomePage，也是同样的道理。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Navigator.of(context).pushReplacementNamed(<span class="string">"/login"</span>);</span><br><span class="line">Navigator.of(context).pushReplacementNamed(<span class="string">"/home"</span>);</span><br></pre></td></tr></table></figure><h4 id="HomePage-gt-DetailPage"><a href="#HomePage-gt-DetailPage" class="headerlink" title="HomePage-&gt;DetailPage"></a>HomePage-&gt;DetailPage</h4><p>使用的是简单的pushNamed()就可以了，没必要移除HomePage，因为从DetailPage点击返回后，需要返回到HomePage界面。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面的两种写法都是可以的</span></span><br><span class="line">Navigator.of(context).pushNamed(<span class="string">"/detail"</span>);</span><br><span class="line">Navigator.of(context)</span><br><span class="line">         .push(<span class="keyword">new</span> MaterialPageRoute(builder: (context) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> DetailPage();</span><br><span class="line">       &#125;));</span><br></pre></td></tr></table></figure><h4 id="DetailPage-gt-LoginPage"><a href="#DetailPage-gt-LoginPage" class="headerlink" title="DetailPage-&gt;LoginPage"></a>DetailPage-&gt;LoginPage</h4><p>利用的是从DetailPage点击退出登录按钮，会弹出路由栈中的所有路由页面，然后再将LoginPage的路由插入到栈顶。这样的话，路由栈中就只剩下LoginPage了，若是点击返回按钮的话，默认就会退出应用程序了，因为堆栈为空了。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Navigator.of(context).pushNamedAndRemoveUntil(<span class="string">"/login"</span>, (Route&lt;<span class="keyword">dynamic</span>&gt; route) =&gt; <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文首先讲的Flutter中的路由，然后主要讲下Flutter中栈管理的几种方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;了解下Route和Navigator&lt;/li&gt;
&lt;li&gt;简单的路由&lt;/li&gt;
&lt;li&gt;命名路由&lt;/li&gt;
&lt;li&gt;自定义路由&lt;/li&gt;
&lt;li&gt;Flutter中使用的路由场景&lt;/li&gt;
&lt;li&gt;Flutter中的路由栈管理&lt;/li&gt;
&lt;li&gt;实战&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;了解下Route和Navigator&quot;&gt;&lt;a href=&quot;#了解下Route和Navigator&quot; class=&quot;headerlink&quot; title=&quot;了解下Route和Navigator&quot;&gt;&lt;/a&gt;了解下Route和Navigator&lt;/h2&gt;&lt;p&gt;在Flutter中，我们需要在不同屏幕或者页面之间进行切换和发送数据,这些“screens”或者“pages”被称为Route(路由),是由一个Navigator的小部件进行管理。&lt;/p&gt;
&lt;p&gt;Navigator可以管理包含若干Route对象的堆栈，并提供了管理的方法，平常我们经常用的就是[Navigator.push]和[Navigator.pop]。&lt;/p&gt;
&lt;p&gt;尽管我们可以自己直接创建一个navigator,但是当我们创建一个WidgetsApp或者MaterialApp,Flutter会自动默认创建一个Navigator。&lt;br&gt; 所以我们一般是使用由[WidgetsApp]或者[MaterialApp]所创建的Navigator就行了，然后通过调用[Navigator.of]&lt;br&gt; 来拿到当前的Navigator的状态NavigatorState,然后调用它的pop或者push方法。&lt;/p&gt;
&lt;h2 id=&quot;简单的路由&quot;&gt;&lt;a href=&quot;#简单的路由&quot; class=&quot;headerlink&quot; title=&quot;简单的路由&quot;&gt;&lt;/a&gt;简单的路由&lt;/h2&gt;&lt;p&gt;比如要导航到一个新的页面，我们可以创建一个[MaterialPageRoute]的实例，然后调用Navigator.of(context).push()方法就将新页面添加到堆栈的顶部。&lt;/p&gt;
&lt;p&gt;返回上一个页面，则调用Navigator.pop(context)就可以从堆栈中删除这个屏幕;&lt;/p&gt;
&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Navigator.of(context)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .push(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MaterialPageRoute(builder: (context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DetailPage();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Navigator.pop(context);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Android" scheme="https://zhangmiao.cc/categories/Android/"/>
    
      <category term="Flutter Tips" scheme="https://zhangmiao.cc/categories/Android/Flutter-Tips/"/>
    
    
      <category term="Android" scheme="https://zhangmiao.cc/tags/Android/"/>
    
      <category term="Flutter Tips" scheme="https://zhangmiao.cc/tags/Flutter-Tips/"/>
    
  </entry>
  
  <entry>
    <title>Flutter自定义导航栏AppBar</title>
    <link href="https://zhangmiao.cc/posts/16d03859.html"/>
    <id>https://zhangmiao.cc/posts/16d03859.html</id>
    <published>2020-03-12T09:35:36.000Z</published>
    <updated>2020-03-14T06:20:34.898Z</updated>
    
    <content type="html"><![CDATA[<h3 id="自定义AppBar"><a href="#自定义AppBar" class="headerlink" title="自定义AppBar"></a>自定义AppBar</h3><p>源码中可以看到,AppBar只是实现了 PreferredSizeWidget接口</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppBar</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> <span class="keyword">implements</span> <span class="title">PreferredSizeWidget</span></span></span><br></pre></td></tr></table></figure><p>那么我们也可以从这进行入手，自定义一个实现了 <code>PreferredSizeWidget</code>的Widget<br>具体代码并不多，比你想象的简单，直接上代码：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter_screenutil/flutter_screenutil.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 这是一个可以指定SafeArea区域背景色的AppBar</span></span><br><span class="line"><span class="comment">/// PreferredSizeWidget提供指定高度的方法</span></span><br><span class="line"><span class="comment">/// 如果没有约束其高度，则会使用PreferredSizeWidget指定的高度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ignore: must_be_immutable</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomAppbar</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> <span class="keyword">implements</span> <span class="title">PreferredSizeWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> contentHeight; <span class="comment">//从外部指定高度</span></span><br><span class="line">  Color navigationBarBackgroundColor; <span class="comment">//设置导航栏背景的颜色</span></span><br><span class="line">  Widget leadingWidget;</span><br><span class="line">  Widget trailingWidget;</span><br><span class="line">  <span class="built_in">String</span> title;</span><br><span class="line"></span><br><span class="line">  CustomAppbar(&#123;</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.leadingWidget,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.title,</span><br><span class="line">    <span class="keyword">this</span>.contentHeight = <span class="number">44</span>,</span><br><span class="line">    <span class="keyword">this</span>.navigationBarBackgroundColor = Colors.white,</span><br><span class="line">    <span class="keyword">this</span>.trailingWidget,</span><br><span class="line">  &#125;) : <span class="keyword">super</span>();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;StatefulWidget&gt; createState() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> _CustomAppbarState();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Size <span class="keyword">get</span> preferredSize =&gt; <span class="keyword">new</span> Size.fromHeight(contentHeight);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 这里没有直接用SafeArea，而是用Container包装了一层</span></span><br><span class="line"><span class="comment">/// 因为直接用SafeArea，会把顶部的statusBar区域留出空白</span></span><br><span class="line"><span class="comment">/// 外层Container会填充SafeArea，指定外层Container背景色也会覆盖原来SafeArea的颜色</span></span><br><span class="line"><span class="comment">///     var statusheight = MediaQuery.of(context).padding.top;  获取状态栏高度</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_CustomAppbarState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">CustomAppbar</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Container(</span><br><span class="line">      color: widget.navigationBarBackgroundColor,</span><br><span class="line">      child: <span class="keyword">new</span> SafeArea(</span><br><span class="line">        top: <span class="keyword">true</span>,</span><br><span class="line">        child: <span class="keyword">new</span> Container(</span><br><span class="line">            decoration: <span class="keyword">new</span> UnderlineTabIndicator(</span><br><span class="line">              borderSide: BorderSide(width: <span class="number">1.0</span>, color: Color(<span class="number">0xFFeeeeee</span>)),</span><br><span class="line">            ),</span><br><span class="line">            height: widget.contentHeight,</span><br><span class="line">            child: <span class="keyword">new</span> Stack(</span><br><span class="line">              alignment: Alignment.center,</span><br><span class="line">              children: &lt;Widget&gt;[</span><br><span class="line">                Positioned(</span><br><span class="line">                  left: <span class="number">0</span>,</span><br><span class="line">                  child: <span class="keyword">new</span> Container(</span><br><span class="line">                    padding: <span class="keyword">const</span> EdgeInsets.only(left: <span class="number">5</span>),</span><br><span class="line">                    child: widget.leadingWidget,</span><br><span class="line">                  ),</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> Container(</span><br><span class="line">                  child: <span class="keyword">new</span> Text(</span><br><span class="line">                    widget.title,</span><br><span class="line">                    style: <span class="keyword">new</span> TextStyle(</span><br><span class="line">                        fontSize: ScreenUtil().setSp(<span class="number">33</span>, allowFontScalingSelf: <span class="keyword">true</span>),</span><br><span class="line">                        color: Color(<span class="number">0xFF333333</span>),</span><br><span class="line">                        fontWeight: FontWeight.w600),</span><br><span class="line">                  ),</span><br><span class="line">                ),</span><br><span class="line">                Positioned(</span><br><span class="line">                  right: <span class="number">0</span>,</span><br><span class="line">                  child: <span class="keyword">new</span> Container(</span><br><span class="line">                    padding: <span class="keyword">const</span> EdgeInsets.only(right: <span class="number">5</span>),</span><br><span class="line">                    child: widget.trailingWidget,</span><br><span class="line">                  ),</span><br><span class="line">                ),</span><br><span class="line">              ],</span><br><span class="line">            )),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引用的地方"><a href="#引用的地方" class="headerlink" title="引用的地方:"></a>引用的地方:</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">appBar: <span class="keyword">new</span> CustomAppbar(</span><br><span class="line">          title: <span class="string">'日历'</span>,</span><br><span class="line">          leadingWidget: leftBarButtonItemWidget(),</span><br><span class="line">          trailingWidget: rightBarButtonItemsWidget(),</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><p><code>leftBarButtonItemWidget()</code> <code>rightBarButtonItemsWidget()</code>两个方法是我自定义的导航栏按钮，实现自己需要的即可。值得说的是，可以将leadingWidget设置为非@required的，在自定义的AppBar里面做好处理即可,另外在上面的代码中并没有限制导航栏上每个Widget所占用的最大空间，如果你的导航栏子组件可能很宽，提前进行妥善处理是个好主意。</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;自定义AppBar&quot;&gt;&lt;a href=&quot;#自定义AppBar&quot; class=&quot;headerlink&quot; title=&quot;自定义AppBar&quot;&gt;&lt;/a&gt;自定义AppBar&lt;/h3&gt;&lt;p&gt;源码中可以看到,AppBar只是实现了 PreferredSizeWidget接口&lt;/p&gt;
&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AppBar&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;StatefulWidget&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PreferredSizeWidget&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;那么我们也可以从这进行入手，自定义一个实现了 &lt;code&gt;PreferredSizeWidget&lt;/code&gt;的Widget&lt;br&gt;具体代码并不多，比你想象的简单，直接上代码：&lt;/p&gt;
&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;package:flutter/material.dart&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;package:flutter_screenutil/flutter_screenutil.dart&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// 这是一个可以指定SafeArea区域背景色的AppBar&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// PreferredSizeWidget提供指定高度的方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// 如果没有约束其高度，则会使用PreferredSizeWidget指定的高度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ignore: must_be_immutable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CustomAppbar&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;StatefulWidget&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PreferredSizeWidget&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;double&lt;/span&gt; contentHeight; &lt;span class=&quot;comment&quot;&gt;//从外部指定高度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Color navigationBarBackgroundColor; &lt;span class=&quot;comment&quot;&gt;//设置导航栏背景的颜色&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Widget leadingWidget;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Widget trailingWidget;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt; title;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  CustomAppbar(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@required&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.leadingWidget,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@required&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.title,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.contentHeight = &lt;span class=&quot;number&quot;&gt;44&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.navigationBarBackgroundColor = Colors.white,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.trailingWidget,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;) : &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  State&amp;lt;StatefulWidget&amp;gt; createState() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; _CustomAppbarState();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Size &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; preferredSize =&amp;gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Size.fromHeight(contentHeight);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// 这里没有直接用SafeArea，而是用Container包装了一层&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// 因为直接用SafeArea，会把顶部的statusBar区域留出空白&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// 外层Container会填充SafeArea，指定外层Container背景色也会覆盖原来SafeArea的颜色&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;///     var statusheight = MediaQuery.of(context).padding.top;  获取状态栏高度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;_CustomAppbarState&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;State&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;CustomAppbar&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; initState() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.initState();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Widget build(BuildContext context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Container(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      color: widget.navigationBarBackgroundColor,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      child: &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SafeArea(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        top: &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        child: &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Container(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            decoration: &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; UnderlineTabIndicator(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              borderSide: BorderSide(width: &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;, color: Color(&lt;span class=&quot;number&quot;&gt;0xFFeeeeee&lt;/span&gt;)),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            height: widget.contentHeight,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            child: &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Stack(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              alignment: Alignment.center,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              children: &amp;lt;Widget&amp;gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Positioned(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  left: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  child: &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Container(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    padding: &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; EdgeInsets.only(left: &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    child: widget.leadingWidget,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Container(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  child: &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Text(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    widget.title,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    style: &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TextStyle(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        fontSize: ScreenUtil().setSp(&lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;, allowFontScalingSelf: &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        color: Color(&lt;span class=&quot;number&quot;&gt;0xFF333333&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        fontWeight: FontWeight.w600),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Positioned(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  right: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  child: &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Container(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    padding: &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; EdgeInsets.only(right: &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    child: widget.trailingWidget,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              ],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            )),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;引用的地方&quot;&gt;&lt;a href=&quot;#引用的地方&quot; class=&quot;headerlink&quot; title=&quot;引用的地方:&quot;&gt;&lt;/a&gt;引用的地方:&lt;/h3&gt;&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;appBar: &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CustomAppbar(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          title: &lt;span class=&quot;string&quot;&gt;&#39;日历&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          leadingWidget: leftBarButtonItemWidget(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          trailingWidget: rightBarButtonItemsWidget(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;leftBarButtonItemWidget()&lt;/code&gt; &lt;code&gt;rightBarButtonItemsWidget()&lt;/code&gt;两个方法是我自定义的导航栏按钮，实现自己需要的即可。值得说的是，可以将leadingWidget设置为非@required的，在自定义的AppBar里面做好处理即可,另外在上面的代码中并没有限制导航栏上每个Widget所占用的最大空间，如果你的导航栏子组件可能很宽，提前进行妥善处理是个好主意。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://zhangmiao.cc/categories/Android/"/>
    
      <category term="Flutter Tips" scheme="https://zhangmiao.cc/categories/Android/Flutter-Tips/"/>
    
    
      <category term="Android" scheme="https://zhangmiao.cc/tags/Android/"/>
    
      <category term="Flutter Tips" scheme="https://zhangmiao.cc/tags/Flutter-Tips/"/>
    
  </entry>
  
  <entry>
    <title>flutter屏幕适配方案</title>
    <link href="https://zhangmiao.cc/posts/1aaabac1.html"/>
    <id>https://zhangmiao.cc/posts/1aaabac1.html</id>
    <published>2020-03-12T09:34:05.000Z</published>
    <updated>2020-03-13T08:27:19.249Z</updated>
    
    <content type="html"><![CDATA[<h1 id="flutter-ScreenUtil"><a href="#flutter-ScreenUtil" class="headerlink" title="flutter_ScreenUtil"></a>flutter_ScreenUtil</h1><p><a href="https://pub.dartlang.org/packages/flutter_screenutil" target="_blank" rel="noopener"><img src="https://img.shields.io/pub/v/flutter_screenutil.svg" alt="pub package"></a></p><p><strong>flutter 屏幕适配方案，让你的UI在不同尺寸的屏幕上都能显示合理的布局!</strong></p><p>github: <a href="https://github.com/OpenFlutter/flutter_screenutil" target="_blank" rel="noopener">https://github.com/OpenFlutter/flutter_screenutil</a></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法:"></a>使用方法:</h2><h3 id="安装依赖："><a href="#安装依赖：" class="headerlink" title="安装依赖："></a>安装依赖：</h3><p>安装之前请查看最新版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dependencies:</span><br><span class="line">  flutter:</span><br><span class="line">    sdk: flutter</span><br><span class="line">  # 添加依赖</span><br><span class="line">  flutter_screenutil: ^1.0.2</span><br></pre></td></tr></table></figure><h3 id="在每个使用的地方导入包："><a href="#在每个使用的地方导入包：" class="headerlink" title="在每个使用的地方导入包："></a>在每个使用的地方导入包：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &apos;package:flutter_screenutil/flutter_screenutil.dart&apos;;</span><br></pre></td></tr></table></figure><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">默认值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">width</td><td align="left">double</td><td align="left">1080px</td><td align="left">设计稿中设备的宽度,单位px</td></tr><tr><td align="left">height</td><td align="left">double</td><td align="left">1920px</td><td align="left">设计稿中设备的高度,单位px</td></tr><tr><td align="left">allowFontScaling</td><td align="left">bool</td><td align="left">false</td><td align="left">设置字体大小是否根据系统的“字体大小”辅助选项来进行缩放</td></tr></tbody></table><a id="more"></a><h3 id="初始化并设置适配尺寸及字体大小是否根据系统的“字体大小”辅助选项来进行缩放"><a href="#初始化并设置适配尺寸及字体大小是否根据系统的“字体大小”辅助选项来进行缩放" class="headerlink" title="初始化并设置适配尺寸及字体大小是否根据系统的“字体大小”辅助选项来进行缩放"></a>初始化并设置适配尺寸及字体大小是否根据系统的“字体大小”辅助选项来进行缩放</h3><p>在使用之前请设置好设计稿的宽度和高度，传入设计稿的宽度和高度(单位px)<br>一定在MaterialApp的home中的页面设置(即入口文件，只需设置一次),以保证在每次使用之前设置好了适配尺寸:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//填入设计稿中设备的屏幕尺寸</span><br><span class="line"></span><br><span class="line">//默认 width : 1080px , height:1920px , allowFontScaling:false</span><br><span class="line">ScreenUtil.init(context);</span><br><span class="line"></span><br><span class="line">//假如设计稿是按iPhone6的尺寸设计的(iPhone6 750*1334) </span><br><span class="line">ScreenUtil.init(context, width: 750, height: 1334);</span><br><span class="line"></span><br><span class="line">//设置字体大小根据系统的“字体大小”辅助选项来进行缩放,默认为false</span><br><span class="line">ScreenUtil.init(context, width: 750, height: 1334, allowFontScaling: true);</span><br></pre></td></tr></table></figure><h3 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h3><h4 id="适配尺寸："><a href="#适配尺寸：" class="headerlink" title="适配尺寸："></a>适配尺寸：</h4><p>传入设计稿的px尺寸：</p><p>根据屏幕宽度适配 <code>width: ScreenUtil().setWidth(540)</code>,</p><p>根据屏幕高度适配 <code>height: ScreenUtil().setHeight(200)</code>,</p><p><strong>注意</strong></p><p>高度也根据setWidth来做适配可以保证不变形(当你想要一个正方形的时候)</p><p>setHeight方法主要是在高度上进行适配, 在你想控制UI上一屏的高度与实际中显示一样时使用.</p><p>例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//UI上是长方形:</span><br><span class="line">Container(</span><br><span class="line">           width: ScreenUtil().setWidth(375),</span><br><span class="line">           height: ScreenUtil().setHeight(200),</span><br><span class="line">            ),</span><br><span class="line">            </span><br><span class="line">//如果你想显示一个正方形:</span><br><span class="line">Container(</span><br><span class="line">           width: ScreenUtil().setWidth(300),</span><br><span class="line">           height: ScreenUtil().setWidth(300),</span><br><span class="line">            ),</span><br></pre></td></tr></table></figure><h4 id="适配字体"><a href="#适配字体" class="headerlink" title="适配字体:"></a>适配字体:</h4><p>传入设计稿的px尺寸：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//传入字体大小，默认不根据系统的“字体大小”辅助选项来进行缩放(可在初始化ScreenUtil时设置allowFontScaling)</span><br><span class="line">ScreenUtil().setSp(28)         </span><br><span class="line"> </span><br><span class="line">//传入字体大小，根据系统的“字体大小”辅助选项来进行缩放(如果某个地方不遵循全局的allowFontScaling设置)       </span><br><span class="line">ScreenUtil().setSp(24, allowFontScalingSelf: true)     </span><br><span class="line"></span><br><span class="line">//for example:</span><br><span class="line"></span><br><span class="line">Column(</span><br><span class="line">              crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class="line">              children: &lt;Widget&gt;[</span><br><span class="line">                Text(&apos;我的文字大小在设计稿上是24px，不会随着系统的文字缩放比例变化&apos;,</span><br><span class="line">                    style: TextStyle(</span><br><span class="line">                      color: Colors.black,</span><br><span class="line">                      fontSize: ScreenUtil().setSp(24),</span><br><span class="line">                    )),</span><br><span class="line">                Text(&apos;我的文字大小在设计稿上是24px，会随着系统的文字缩放比例变化&apos;,</span><br><span class="line">                    style: TextStyle(</span><br><span class="line">                        color: Colors.black,</span><br><span class="line">                        fontSize: ScreenUtil()</span><br><span class="line">                            .setSp(24, allowFontScalingSelf: true))),</span><br><span class="line">              ],</span><br><span class="line">            )</span><br></pre></td></tr></table></figure><h4 id="其他相关api："><a href="#其他相关api：" class="headerlink" title="其他相关api："></a>其他相关api：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ScreenUtil.pixelRatio       //设备的像素密度</span><br><span class="line">ScreenUtil.screenWidth      //设备宽度</span><br><span class="line">ScreenUtil.screenHeight     //设备高度</span><br><span class="line">ScreenUtil.bottomBarHeight  //底部安全区距离，适用于全面屏下面有按键的</span><br><span class="line">ScreenUtil.statusBarHeight  //状态栏高度 刘海屏会更高  单位px</span><br><span class="line">ScreenUtil.textScaleFactor //系统字体缩放比例</span><br><span class="line"></span><br><span class="line">ScreenUtil().scaleWidth  // 实际宽度的dp与设计稿px的比例</span><br><span class="line">ScreenUtil().scaleHeight // 实际高度的dp与设计稿px的比例</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter_screenutil/flutter_screenutil.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp( MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      debugShowCheckedModeBanner: <span class="keyword">false</span>,</span><br><span class="line">      title: <span class="string">'Flutter_ScreenUtil'</span>,</span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: MyHomePage(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  MyHomePage(&#123;Key key, <span class="keyword">this</span>.title&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> title;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _MyHomePageState createState() =&gt; _MyHomePageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyHomePageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyHomePage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">//设置适配尺寸 (填入设计稿中设备的屏幕尺寸) 此处假如设计稿是按iPhone6的尺寸设计的(iPhone6 750*1334)</span></span><br><span class="line">    ScreenUtil.init(context, width: <span class="number">750</span>, height: <span class="number">1334</span>, allowFontScaling: <span class="keyword">false</span>);</span><br><span class="line">    ScreenUtil.init(context);</span><br><span class="line">    ScreenUtil.init(context, width: <span class="number">750</span>, height: <span class="number">1334</span>, allowFontScaling: <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ExampleWidget(title: <span class="string">'FlutterScreenUtil示例'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleWidget</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ExampleWidget(&#123;Key key, <span class="keyword">this</span>.title&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> title;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _ExampleWidgetState createState() =&gt; _ExampleWidgetState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ExampleWidgetState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">ExampleWidget</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    printScreenInformation();</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(widget.title),</span><br><span class="line">      ),</span><br><span class="line">      body: SingleChildScrollView(</span><br><span class="line">        child: Column(</span><br><span class="line">          crossAxisAlignment: CrossAxisAlignment.center,</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            Row(</span><br><span class="line">              children: &lt;Widget&gt;[</span><br><span class="line">                Container(</span><br><span class="line">                  padding: EdgeInsets.all(ScreenUtil().setWidth(<span class="number">10</span>)),</span><br><span class="line">                  width: ScreenUtil().setWidth(<span class="number">375</span>),</span><br><span class="line">                  height: ScreenUtil().setHeight(<span class="number">200</span>),</span><br><span class="line">                  color: Colors.red,</span><br><span class="line">                  child: Text(</span><br><span class="line">                    <span class="string">'我的宽度:<span class="subst">$&#123;ScreenUtil().setWidth(<span class="number">375</span>)&#125;</span>dp \n'</span></span><br><span class="line">                    <span class="string">'我的高度:<span class="subst">$&#123;ScreenUtil().setHeight(<span class="number">200</span>)&#125;</span>dp'</span>,</span><br><span class="line">                    style: TextStyle(</span><br><span class="line">                        color: Colors.white, fontSize: ScreenUtil().setSp(<span class="number">24</span>)),</span><br><span class="line">                  ),</span><br><span class="line">                ),</span><br><span class="line">                Container(</span><br><span class="line">                  padding: EdgeInsets.all(ScreenUtil().setWidth(<span class="number">10</span>)),</span><br><span class="line">                  width: ScreenUtil().setWidth(<span class="number">375</span>),</span><br><span class="line">                  height: ScreenUtil().setHeight(<span class="number">200</span>),</span><br><span class="line">                  color: Colors.blue,</span><br><span class="line">                  child: Text(</span><br><span class="line">                      <span class="string">'我的宽度:<span class="subst">$&#123;ScreenUtil().setWidth(<span class="number">375</span>)&#125;</span>dp \n'</span></span><br><span class="line">                      <span class="string">'我的高度:<span class="subst">$&#123;ScreenUtil().setHeight(<span class="number">200</span>)&#125;</span>dp'</span>,</span><br><span class="line">                      style: TextStyle(</span><br><span class="line">                          color: Colors.white,</span><br><span class="line">                          fontSize: ScreenUtil().setSp(<span class="number">24</span>))),</span><br><span class="line">                ),</span><br><span class="line">              ],</span><br><span class="line">            ),</span><br><span class="line">            Text(<span class="string">'设备宽度:<span class="subst">$&#123;ScreenUtil.screenWidth&#125;</span>px'</span>),</span><br><span class="line">            Text(<span class="string">'设备高度:<span class="subst">$&#123;ScreenUtil.screenHeight&#125;</span>px'</span>),</span><br><span class="line">            Text(<span class="string">'设备宽度:<span class="subst">$&#123;ScreenUtil.screenWidthDp&#125;</span>dp'</span>),</span><br><span class="line">            Text(<span class="string">'设备高度:<span class="subst">$&#123;ScreenUtil.screenHeightDp&#125;</span>dp'</span>),</span><br><span class="line">            Text(<span class="string">'设备的像素密度:<span class="subst">$&#123;ScreenUtil.pixelRatio&#125;</span>'</span>),</span><br><span class="line">            Text(<span class="string">'底部安全区距离:<span class="subst">$&#123;ScreenUtil.bottomBarHeight&#125;</span>dp'</span>),</span><br><span class="line">            Text(<span class="string">'状态栏高度:<span class="subst">$&#123;ScreenUtil.statusBarHeight&#125;</span>dp'</span>),</span><br><span class="line">            Text(</span><br><span class="line">              <span class="string">'实际宽度的dp与设计稿px的比例:<span class="subst">$&#123;ScreenUtil().scaleWidth&#125;</span>'</span>,</span><br><span class="line">              textAlign: TextAlign.center,</span><br><span class="line">            ),</span><br><span class="line">            Text(</span><br><span class="line">              <span class="string">'实际高度的dp与设计稿px的比例:<span class="subst">$&#123;ScreenUtil().scaleHeight&#125;</span>'</span>,</span><br><span class="line">              textAlign: TextAlign.center,</span><br><span class="line">            ),</span><br><span class="line">            SizedBox(</span><br><span class="line">              height: ScreenUtil().setHeight(<span class="number">100</span>),</span><br><span class="line">            ),</span><br><span class="line">            Text(<span class="string">'系统的字体缩放比例:<span class="subst">$&#123;ScreenUtil.textScaleFactor&#125;</span>'</span>),</span><br><span class="line">            Column(</span><br><span class="line">              crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class="line">              children: &lt;Widget&gt;[</span><br><span class="line">                Text(<span class="string">'我的文字大小在设计稿上是24px，不会随着系统的文字缩放比例变化'</span>,</span><br><span class="line">                    style: TextStyle(</span><br><span class="line">                      color: Colors.black,</span><br><span class="line">                      fontSize: ScreenUtil().setSp(<span class="number">24</span>),</span><br><span class="line">                    )),</span><br><span class="line">                Text(<span class="string">'我的文字大小在设计稿上是24px，会随着系统的文字缩放比例变化'</span>,</span><br><span class="line">                    style: TextStyle(</span><br><span class="line">                        color: Colors.black,</span><br><span class="line">                        fontSize: ScreenUtil()</span><br><span class="line">                            .setSp(<span class="number">24</span>, allowFontScalingSelf: <span class="keyword">true</span>))),</span><br><span class="line">              ],</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        child: Icon(Icons.title),</span><br><span class="line">        onPressed: () &#123;</span><br><span class="line">          ScreenUtil.init(context,</span><br><span class="line">              width: <span class="number">1500</span>, height: <span class="number">1334</span>, allowFontScaling: <span class="keyword">false</span>);</span><br><span class="line">          setState(() &#123;&#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> printScreenInformation() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'设备宽度:<span class="subst">$&#123;ScreenUtil.screenWidth&#125;</span>'</span>); <span class="comment">//Device width</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'设备高度:<span class="subst">$&#123;ScreenUtil.screenHeight&#125;</span>'</span>); <span class="comment">//Device height</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'设备的像素密度:<span class="subst">$&#123;ScreenUtil.pixelRatio&#125;</span>'</span>); <span class="comment">//Device pixel density</span></span><br><span class="line">    <span class="built_in">print</span>(</span><br><span class="line">        <span class="string">'底部安全区距离:<span class="subst">$&#123;ScreenUtil.bottomBarHeight&#125;</span>dp'</span>); <span class="comment">//Bottom safe zone distance，suitable for buttons with full screen</span></span><br><span class="line">    <span class="built_in">print</span>(</span><br><span class="line">        <span class="string">'状态栏高度:<span class="subst">$&#123;ScreenUtil.statusBarHeight&#125;</span>dp'</span>); <span class="comment">//Status bar height , Notch will be higher Unit px</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'实际宽度的dp与设计稿px的比例:<span class="subst">$&#123;ScreenUtil().scaleWidth&#125;</span>'</span>);</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'实际高度的dp与设计稿px的比例:<span class="subst">$&#123;ScreenUtil().scaleHeight&#125;</span>'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(</span><br><span class="line">        <span class="string">'宽度和字体相对于设计稿放大的比例:<span class="subst">$&#123;ScreenUtil().scaleWidth * ScreenUtil.pixelRatio&#125;</span>'</span>);</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'高度相对于设计稿放大的比例:<span class="subst">$&#123;ScreenUtil().scaleHeight * ScreenUtil.pixelRatio&#125;</span>'</span>);</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'系统的字体缩放比例:<span class="subst">$&#123;ScreenUtil.textScaleFactor&#125;</span>'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;flutter-ScreenUtil&quot;&gt;&lt;a href=&quot;#flutter-ScreenUtil&quot; class=&quot;headerlink&quot; title=&quot;flutter_ScreenUtil&quot;&gt;&lt;/a&gt;flutter_ScreenUtil&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pub.dartlang.org/packages/flutter_screenutil&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://img.shields.io/pub/v/flutter_screenutil.svg&quot; alt=&quot;pub package&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;flutter 屏幕适配方案，让你的UI在不同尺寸的屏幕上都能显示合理的布局!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;github: &lt;a href=&quot;https://github.com/OpenFlutter/flutter_screenutil&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/OpenFlutter/flutter_screenutil&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用方法&quot;&gt;&lt;a href=&quot;#使用方法&quot; class=&quot;headerlink&quot; title=&quot;使用方法:&quot;&gt;&lt;/a&gt;使用方法:&lt;/h2&gt;&lt;h3 id=&quot;安装依赖：&quot;&gt;&lt;a href=&quot;#安装依赖：&quot; class=&quot;headerlink&quot; title=&quot;安装依赖：&quot;&gt;&lt;/a&gt;安装依赖：&lt;/h3&gt;&lt;p&gt;安装之前请查看最新版本&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dependencies:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  flutter:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sdk: flutter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  # 添加依赖&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  flutter_screenutil: ^1.0.2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;在每个使用的地方导入包：&quot;&gt;&lt;a href=&quot;#在每个使用的地方导入包：&quot; class=&quot;headerlink&quot; title=&quot;在每个使用的地方导入包：&quot;&gt;&lt;/a&gt;在每个使用的地方导入包：&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import &amp;apos;package:flutter_screenutil/flutter_screenutil.dart&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;属性&quot;&gt;&lt;a href=&quot;#属性&quot; class=&quot;headerlink&quot; title=&quot;属性&quot;&gt;&lt;/a&gt;属性&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;属性&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;类型&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;默认值&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;width&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;double&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;1080px&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;设计稿中设备的宽度,单位px&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;height&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;double&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;1920px&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;设计稿中设备的高度,单位px&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;allowFontScaling&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;bool&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;false&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;设置字体大小是否根据系统的“字体大小”辅助选项来进行缩放&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
    
    </summary>
    
      <category term="Android" scheme="https://zhangmiao.cc/categories/Android/"/>
    
      <category term="Flutter Tips" scheme="https://zhangmiao.cc/categories/Android/Flutter-Tips/"/>
    
    
      <category term="Android" scheme="https://zhangmiao.cc/tags/Android/"/>
    
      <category term="Flutter Tips" scheme="https://zhangmiao.cc/tags/Flutter-Tips/"/>
    
  </entry>
  
  <entry>
    <title>Flutter_BottomNavigationBar切换页面防止页面重绘</title>
    <link href="https://zhangmiao.cc/posts/88ab6b09.html"/>
    <id>https://zhangmiao.cc/posts/88ab6b09.html</id>
    <published>2020-03-10T07:07:10.000Z</published>
    <updated>2020-03-10T07:12:10.433Z</updated>
    
    <content type="html"><![CDATA[<p>开始尝试用flutter开发，flutter版本1.0，写类似微信底部tab切换界面时发现界面老被重置，网上找了一圈说保持状态需要子页面mixin AutomaticKeepAliveClientMixin，然后重写</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line"> <span class="built_in">bool</span> <span class="keyword">get</span> wantKeepAlive =&gt; <span class="keyword">true</span>;</span><br></pre></td></tr></table></figure><p>但发现需要配合其他组件，不是随便mixin就有用的，尝试几种写法总结BottomNavigationBar+List<widget>+AutomaticKeepAliveClientMixin是没有用的</widget></p><ol><li>首先尝试BottomNavigationBar+List<widget>实现的页面切换保持状态，一般刚开始学都会这么写：</widget></li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) =&gt; MaterialApp(</span><br><span class="line">        title: <span class="string">"demo"</span>,</span><br><span class="line">        home: MainPage(),</span><br><span class="line">      );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;StatefulWidget&gt; createState() =&gt; MainPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MainPage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> _currentIndex;</span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; _pages;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    _currentIndex = <span class="number">0</span>;</span><br><span class="line">    _pages = <span class="built_in">List</span>()..add(FirstPage(<span class="string">"第一页"</span>))..add(SecondPage(<span class="string">"第二页"</span>))..add(ThirdPage(<span class="string">"第三页"</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) =&gt; Scaffold(</span><br><span class="line">        body: _pages[_currentIndex],</span><br><span class="line">        bottomNavigationBar: BottomNavigationBar(</span><br><span class="line">          items: getItems(),</span><br><span class="line">          currentIndex: _currentIndex,</span><br><span class="line">          onTap: onTap,</span><br><span class="line">        ),</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">List</span>&lt;BottomNavigationBarItem&gt; getItems() &#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">      BottomNavigationBarItem(icon: Icon(Icons.home), title: Text(<span class="string">"Home"</span>)),</span><br><span class="line">      BottomNavigationBarItem(icon: Icon(Icons.adb), title: Text(<span class="string">"Adb"</span>)),</span><br><span class="line">      BottomNavigationBarItem(icon: Icon(Icons.person), title: Text(<span class="string">"Person"</span>))</span><br><span class="line">    ];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> onTap(<span class="built_in">int</span> index) &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _currentIndex = index;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>子页面代码,三个界面一样：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FirstPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> _title;</span><br><span class="line"></span><br><span class="line">  FirstPage(<span class="keyword">this</span>._title);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;StatefulWidget&gt; createState() =&gt; FirstPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FirstPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">FirstPage</span>&gt; <span class="title">with</span> <span class="title">AutomaticKeepAliveClientMixin</span></span>&#123;</span><br><span class="line">  <span class="built_in">int</span> _count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> <span class="keyword">get</span> wantKeepAlive =&gt; <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(widget._title),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Text(widget._title + <span class="string">":点一下加1：$_count"</span>),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">          heroTag: widget._title, child: Icon(Icons.add), onPressed: add),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> add() &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _count++;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结果无法实现保持页面"><a href="#结果无法实现保持页面" class="headerlink" title="结果无法实现保持页面"></a>结果无法实现保持页面</h4><p><img src="https://raw.githubusercontent.com/zhangmiaocc/blogImageResource/master/img/1794647-b3ba9af97689cfee.gif" alt></p><p>2.第二种BottomNavigationBar+PageView，与android的ViewPager类似,界面小改动一下，添加一个按钮，点击跳转到一个新的界面</p><p><img src="https://raw.githubusercontent.com/zhangmiaocc/blogImageResource/master/img/1794647-1fe68bcfd3625422.png" alt></p><p>代码如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) =&gt; MaterialApp(</span><br><span class="line">        title: <span class="string">"demo"</span>,</span><br><span class="line">        home: MainPage(),</span><br><span class="line">      );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;StatefulWidget&gt; createState() =&gt; MainPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MainPage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> _currentIndex;</span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; _pages;</span><br><span class="line">  PageController _controller;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    _currentIndex = <span class="number">0</span>;</span><br><span class="line">    _pages = <span class="built_in">List</span>() ..add(FirstPage(<span class="string">"第一页"</span>))  ..add(SecondPage(<span class="string">"第二页"</span>)) ..add(ThirdPage(<span class="string">"第三页"</span>));</span><br><span class="line">    _controller = PageController(initialPage: <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">    _controller.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) =&gt; Scaffold(</span><br><span class="line">        body: PageView.builder(</span><br><span class="line">            physics: NeverScrollableScrollPhysics(),<span class="comment">//viewPage禁止左右滑动</span></span><br><span class="line">            onPageChanged: _pageChange,</span><br><span class="line">            controller: _controller,</span><br><span class="line">            itemCount: _pages.length,</span><br><span class="line">            itemBuilder: (context, index) =&gt; _pages[index]),</span><br><span class="line">        bottomNavigationBar: BottomNavigationBar(</span><br><span class="line">          items: getItems(),</span><br><span class="line">          currentIndex: _currentIndex,</span><br><span class="line">          onTap: onTap,</span><br><span class="line">        ),</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">List</span>&lt;BottomNavigationBarItem&gt; getItems() &#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">      BottomNavigationBarItem(icon: Icon(Icons.home), title: Text(<span class="string">"Home"</span>)),</span><br><span class="line">      BottomNavigationBarItem(icon: Icon(Icons.adb), title: Text(<span class="string">"Adb"</span>)),</span><br><span class="line">      BottomNavigationBarItem(icon: Icon(Icons.person), title: Text(<span class="string">"Person"</span>))</span><br><span class="line">    ];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> onTap(<span class="built_in">int</span> index) &#123;</span><br><span class="line">    _controller.jumpToPage(index);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _pageChange(<span class="built_in">int</span> index) &#123;</span><br><span class="line">     <span class="keyword">if</span> (index != _currentIndex) &#123;</span><br><span class="line">      setState(() &#123;</span><br><span class="line">        _currentIndex = index;</span><br><span class="line">       &#125;);</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子界面：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FirstPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> _title;</span><br><span class="line"></span><br><span class="line">  FirstPage(<span class="keyword">this</span>._title);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;StatefulWidget&gt; createState() =&gt; FirstPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FirstPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">FirstPage</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">with</span> <span class="title">AutomaticKeepAliveClientMixin</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> _count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> <span class="keyword">get</span> wantKeepAlive =&gt; <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(widget._title),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Column(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            Text(widget._title + <span class="string">":点一下加1：$_count"</span>),</span><br><span class="line">            MaterialButton(</span><br><span class="line">                child: Text(<span class="string">"跳转"</span>),</span><br><span class="line">                color: Colors.pink,</span><br><span class="line">                onPressed: () =&gt; Navigator.push(context,</span><br><span class="line">                    MaterialPageRoute(builder: (context) =&gt; NewPage())))</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">          heroTag: widget._title, child: Icon(Icons.add), onPressed: add),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> add() &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _count++;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要跳转的一个界面：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewPage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) =&gt; Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(<span class="string">"新的界面"</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: Center(</span><br><span class="line">          child: Text(<span class="string">"我是一个新的界面"</span>),</span><br><span class="line">        ),</span><br><span class="line">      );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/zhangmiaocc/blogImageResource/master/img/1794647-daaad3aaa7b2a1ed.gif" alt></p><p>猛一看效果出来了，左右切换界面没有问题，结果跳转新界面时又出现新问题，当第一页跳转新的界面再返回，再切第二、三页发现重置了，再切回第一页发现页被重置了。</p><p>发生这种情况需要在重写Widget build(BuildContext context)时调用下父类build(context)方法，局部代码：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">//在这边加上super.build(context);</span></span><br><span class="line">    <span class="keyword">super</span>.build(context);</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(widget._title),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Column(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            Text(widget._title + <span class="string">":点一下加1：$_count"</span>),</span><br><span class="line">            MaterialButton(</span><br><span class="line">                child: Text(<span class="string">"跳转"</span>),</span><br><span class="line">                color: Colors.pink,</span><br><span class="line">                onPressed: () =&gt; Navigator.push(context,</span><br><span class="line">                    MaterialPageRoute(builder: (context) =&gt; NewPage())))</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">          heroTag: widget._title, child: Icon(Icons.add), onPressed: add),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/zhangmiaocc/blogImageResource/master/img/1794647-28e4802ac86eec75.gif" alt></p><p>这种布局样式网上还有一种用的比较多的是BottomNavigationBar+IndexedStack( )，这边就不贴出来了</p><ul><li>经过长期测试BottomNavigationBar+TabBarView方案行不通，后期会遇到其他问题，目前最好用还是viewpage和IndexedStack。</li></ul><p>最后像这种多页面使用FloatingActionButton，用它跳转新界面是一定要设置heroTag，要不然跳转会黑屏报错</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开始尝试用flutter开发，flutter版本1.0，写类似微信底部tab切换界面时发现界面老被重置，网上找了一圈说保持状态需要子页面mixin AutomaticKeepAliveClientMixin，然后重写&lt;/p&gt;
&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; wantKeepAlive =&amp;gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;但发现需要配合其他组件，不是随便mixin就有用的，尝试几种写法总结BottomNavigationBar+List&lt;widget&gt;+AutomaticKeepAliveClientMixin是没有用的&lt;/widget&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先尝试BottomNavigationBar+List&lt;widget&gt;实现的页面切换保持状态，一般刚开始学都会这么写：&lt;/widget&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; main() =&amp;gt; runApp(MyApp());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyApp&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;StatelessWidget&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Widget build(BuildContext context) =&amp;gt; MaterialApp(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        title: &lt;span class=&quot;string&quot;&gt;&quot;demo&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        home: MainPage(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MainPage&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;StatefulWidget&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  State&amp;lt;StatefulWidget&amp;gt; createState() =&amp;gt; MainPageState();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MainPageState&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;State&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;MainPage&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; _currentIndex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;List&lt;/span&gt;&amp;lt;Widget&amp;gt; _pages;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; initState() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.initState();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _currentIndex = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _pages = &lt;span class=&quot;built_in&quot;&gt;List&lt;/span&gt;()..add(FirstPage(&lt;span class=&quot;string&quot;&gt;&quot;第一页&quot;&lt;/span&gt;))..add(SecondPage(&lt;span class=&quot;string&quot;&gt;&quot;第二页&quot;&lt;/span&gt;))..add(ThirdPage(&lt;span class=&quot;string&quot;&gt;&quot;第三页&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Widget build(BuildContext context) =&amp;gt; Scaffold(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        body: _pages[_currentIndex],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        bottomNavigationBar: BottomNavigationBar(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          items: getItems(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          currentIndex: _currentIndex,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          onTap: onTap,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;List&lt;/span&gt;&amp;lt;BottomNavigationBarItem&amp;gt; getItems() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      BottomNavigationBarItem(icon: Icon(Icons.home), title: Text(&lt;span class=&quot;string&quot;&gt;&quot;Home&quot;&lt;/span&gt;)),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      BottomNavigationBarItem(icon: Icon(Icons.adb), title: Text(&lt;span class=&quot;string&quot;&gt;&quot;Adb&quot;&lt;/span&gt;)),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      BottomNavigationBarItem(icon: Icon(Icons.person), title: Text(&lt;span class=&quot;string&quot;&gt;&quot;Person&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; onTap(&lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; index) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setState(() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      _currentIndex = index;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Android" scheme="https://zhangmiao.cc/categories/Android/"/>
    
      <category term="Flutter Tips" scheme="https://zhangmiao.cc/categories/Android/Flutter-Tips/"/>
    
    
      <category term="Android" scheme="https://zhangmiao.cc/tags/Android/"/>
    
      <category term="Flutter Tips" scheme="https://zhangmiao.cc/tags/Flutter-Tips/"/>
    
  </entry>
  
  <entry>
    <title>Flutter_tabBarView切换页面防止页面重绘</title>
    <link href="https://zhangmiao.cc/posts/dffd90b2.html"/>
    <id>https://zhangmiao.cc/posts/dffd90b2.html</id>
    <published>2020-03-10T03:56:49.000Z</published>
    <updated>2020-03-10T03:58:17.752Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1：被重绘的tab页要-混入AutomaticKeepAliveClientMixin"><a href="#1：被重绘的tab页要-混入AutomaticKeepAliveClientMixin" class="headerlink" title="1：被重绘的tab页要 混入AutomaticKeepAliveClientMixin"></a>1：被重绘的tab页要 混入AutomaticKeepAliveClientMixin</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// with 混入</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DevicePageLayout</span> <span class="keyword">extends</span>  <span class="title">WidgetState</span>&lt;<span class="title">DevicePage</span>&gt;  <span class="title">with</span> <span class="title">AutomaticKeepAliveClientMixin</span></span></span><br></pre></td></tr></table></figure><p>###2：实现wantKeepAlive方法 ，返回值改成true</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> implement wantKeepAlive</span></span><br><span class="line"><span class="built_in">bool</span> <span class="keyword">get</span> wantKeepAlive =&gt; <span class="keyword">true</span>;</span><br></pre></td></tr></table></figure><p>###3：build中加入 super.build(context);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="function">Widget <span class="title">build</span><span class="params">(BuildContext context)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>.build(context);</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> implement build</span></span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1：被重绘的tab页要-混入AutomaticKeepAliveClientMixin&quot;&gt;&lt;a href=&quot;#1：被重绘的tab页要-混入AutomaticKeepAliveClientMixin&quot; class=&quot;headerlink&quot; title=&quot;1：被重绘的tab页要 混入AutomaticKeepAliveClientMixin&quot;&gt;&lt;/a&gt;1：被重绘的tab页要 混入AutomaticKeepAliveClientMixin&lt;/h3&gt;&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// with 混入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DevicePageLayout&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt;  &lt;span class=&quot;title&quot;&gt;WidgetState&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;DevicePage&lt;/span&gt;&amp;gt;  &lt;span class=&quot;title&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AutomaticKeepAliveClientMixin&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;###2：实现wantKeepAlive方法 ，返回值改成true&lt;/p&gt;
&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &lt;span class=&quot;doctag&quot;&gt;TODO:&lt;/span&gt; implement wantKeepAlive&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; wantKeepAlive =&amp;gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;###3：build中加入 super.build(context);&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;Widget &lt;span class=&quot;title&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(BuildContext context)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.build(context);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// &lt;span class=&quot;doctag&quot;&gt;TODO:&lt;/span&gt; implement build&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Android" scheme="https://zhangmiao.cc/categories/Android/"/>
    
      <category term="Flutter Tips" scheme="https://zhangmiao.cc/categories/Android/Flutter-Tips/"/>
    
    
      <category term="Android" scheme="https://zhangmiao.cc/tags/Android/"/>
    
      <category term="Flutter Tips" scheme="https://zhangmiao.cc/tags/Flutter-Tips/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio 3.6 正式版终于发布了</title>
    <link href="https://zhangmiao.cc/posts/aaf10946.html"/>
    <id>https://zhangmiao.cc/posts/aaf10946.html</id>
    <published>2020-03-04T02:54:25.000Z</published>
    <updated>2020-03-04T03:21:47.887Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/zhangmiaocc/blogImageResource/master/img/20200304110901.png" alt></p><p>如题，Android Studio 3.6 正式版终于发布了，值得兴奋呀，毕竟 3.5 大版本更新也已经差不多半年了，撒花撒花！这次更新又更新了什么呢？</p><p>包括有设计、开发、构建、测试、优化等多方面，下面我们来看看 Release Notes 写了些什么吧！</p><h2 id="Release-Notes"><a href="#Release-Notes" class="headerlink" title="Release Notes"></a>Release Notes</h2><p>我们很高兴宣布 Android Studio 3.6 发布稳定版本了，该版本内有一些针对性的新特性，主要解决了在代码编辑和调试用例中的质量问题。这是我们在 Project Marble 结束之后的第一个版本，其重点是构建强大的集成开发环境（IDE）的基本功能和流。我们从 Project Marble 中学到了很多，在 Android Studio 3.6 中，我们引入了一小部分功能，完善的现有功能，并花费了很大的精力来解决错误并改善基础性能，以确保我们达到去年设定的高质量标准。</p><p>Android Studio 3.6 的一些亮点包括一种使用 XML 快速设计、开发和预览应用布局的新方法，在设计编辑器中提供了新的拆分视图。此外，您不再需要手动键入 GPS 坐标来测试应用的位置，因为我们现在将 Google 地图直接嵌入到 Android 模拟器扩展控制面板中。最后，通过针对片段和活动的自动内存泄漏检测，我们简化了应用并查找 Bug。我们希望所有这些功能可以帮助您在 Android 上开发时更快乐、更高效。</p><p>感谢在预览版中提供早期反馈的用户。您的反馈帮助我们迭代和改进 Android Studio 3.6 中的功能。如果您已准备好迎接下一个稳定版本，并且想要使用一组新的生产力功能，Android Studio 3.6 已准备好下载，以便您入门。</p><p>以下是 Android Studio 3.6 中由主要开发人员流组织的全部新功能列表。</p><a id="more"></a><h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><h4 id="在设计编辑器中拆分视图"><a href="#在设计编辑器中拆分视图" class="headerlink" title="在设计编辑器中拆分视图"></a>在设计编辑器中拆分视图</h4><p>设计编辑器（如布局编辑器和导航编辑器）现在提供”拆分”视图，使您能够同时查看 UI 的”设计和代码”视图。拆分视图将替换和改进较早的”预览”窗口，并可以逐个文件进行配置，以保留上下文信息（如缩放因子和设计视图选项），因此您可以选择最适合每个用例的视图。要启用拆分视图，请单击编辑器窗口右上角的”拆分”图标。</p><p><img src="https://raw.githubusercontent.com/zhangmiaocc/blogImageResource/master/img/20200304111247.png" alt></p><h4 id="颜色选取器资源选项卡"><a href="#颜色选取器资源选项卡" class="headerlink" title="颜色选取器资源选项卡"></a>颜色选取器资源选项卡</h4><p>在此版本中，我们希望更轻松地应用已定义为颜色资源的颜色。在 Android Studio 3.6 中，颜色选取器将填充应用中的颜色资源，以便快速选择和替换颜色资源值。颜色选取器可在设计工具和 XML 编辑器中访问。</p><p><img src="https://raw.githubusercontent.com/zhangmiaocc/blogImageResource/master/img/20200304111308.png" alt></p><h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><h4 id="视图绑定"><a href="#视图绑定" class="headerlink" title="视图绑定"></a>视图绑定</h4><p>视图绑定是一项功能，允许您在引用代码中的视图时提供编译时安全性，从而更轻松地编写与视图交互的代码。启用后，视图绑定将为每个模块中存在的 XML 布局文件生成一个绑定类。在大多数情况下，视图绑定将替换 findViewById。您可以引用具有 ID 的所有视图，这些视图没有空指针或类强制转换异常的风险。这些差异意味着布局和代码之间的不兼容将导致生成在编译时失败，而不是在运行时。要在项目中启用视图绑定，请在每个模块的生成中包括以下内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    viewBinding.enabled = <span class="keyword">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Android-NDK-修改"><a href="#Android-NDK-修改" class="headerlink" title="Android NDK 修改"></a>Android NDK 修改</h4><p>Android Studio 中的以下 Android NDK 功能以前在 Java 中支持，现在 Kotlin 也支持：</p><ul><li>从 JNI 声明导航到 C/C++ 中的相应实现函数。通过将鼠标悬停在托管源代码文件中行号附近的 C 或C++项标记上，查看此映射。</li><li>自动为 JNI 声明创建存根实现函数。首先定义 JNI 声明，然后在要激活的 C/C++ 文件中键入”jni”或方法名称。</li></ul><h3 id="IntelliJ-平台更改"><a href="#IntelliJ-平台更改" class="headerlink" title="IntelliJ 平台更改"></a>IntelliJ 平台更改</h3><p>Android Studio 3.6 包括 IntelliJ 2019.2 平台版本。此 IntelliJ 版本包括许多改进，从新的服务工具窗口到大大缩短的启动时间。</p><h3 id="应用更改"><a href="#应用更改" class="headerlink" title="应用更改"></a>应用更改</h3><p>现在，您可以通过单击”应用代码更改”或”应用更改并重新启动活动”来添加类，然后将该代码更改部署到正在运行的应用。</p><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><h4 id="Android-Gradle-Plugin-AGP-updates"><a href="#Android-Gradle-Plugin-AGP-updates" class="headerlink" title="Android Gradle Plugin (AGP) updates"></a>Android Gradle Plugin (AGP) updates</h4><p>Android Gradle 插件 3.6 及更高版本包括对 Maven 发布 Gradle 插件的支持，该插件允许您将构建项目发布到 Apache Maven 存储库。Android Gradle 插件为应用或库模块中的每个生成变体项目创建一个组件，您可以使用该组件将出版物自定义到 Maven 存储库。此更改将更轻松地管理各种目标的发布生命周期。</p><p>此外，Android Gradle 插件在大型项目的注释处理/KAPT 方面取得了显著的性能改进。这是由 AGP 现在直接生成 R 类字节码，而不是 .java 文件引起的。</p><h4 id="新的打包工具"><a href="#新的打包工具" class="headerlink" title="新的打包工具"></a>新的打包工具</h4><p>Android 构建团队不断进行更改以提高生成性能，在此版本中，我们将默认打包工具更改为 zipflinger 以进行调试生成。用户应该看到生成速度的提高，但您也可以通过设置 <code>android.useNewApkCreator_false</code> 在您的分级中恢复使用旧的打包工具。</p><p><img src="https://raw.githubusercontent.com/zhangmiaocc/blogImageResource/master/img/20200304111433.png" alt></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="Android-模拟器-Google-地图"><a href="#Android-模拟器-Google-地图" class="headerlink" title="Android 模拟器 - Google 地图"></a>Android 模拟器 - Google 地图</h4><p>Android 模拟器 29.2.12 为应用开发人员提供了一种与模拟设备位置进行接口的新方式。我们在扩展控件菜单中嵌入了 Google 地图用户界面，以便更轻松地指定位置，并构建来自位置对的路由。可以保存单个点并将其重新发送到设备作为虚拟位置，而路由可以通过键入地址或单击两个点来生成。当路线上的位置发送到来宾 OS 时，可以实时重播这些路由。</p><p><img src="https://raw.githubusercontent.com/zhangmiaocc/blogImageResource/master/img/20200304111448.png" alt></p><h4 id="多屏支持"><a href="#多屏支持" class="headerlink" title="多屏支持"></a>多屏支持</h4><p>模拟器 29.1.10 包括对多个虚拟显示器的初步支持。由于有更多的设备具有多个显示器，因此在各种多显示器配置上测试应用非常重要。用户可以通过设置菜单（扩展控件和设置）配置多个显示器。</p><p><img src="https://raw.githubusercontent.com/zhangmiaocc/blogImageResource/master/img/20200304111510.png" alt></p><p><img src="https://raw.githubusercontent.com/zhangmiaocc/blogImageResource/master/img/20200304111526.png" alt></p><h4 id="SDK-断点续传"><a href="#SDK-断点续传" class="headerlink" title="SDK 断点续传"></a>SDK 断点续传</h4><p>当使用 Android Studio SDK 管理器下载 Android SDK 组件和工具时，Android Studio 现在允许您恢复中断的下载（例如，由于网络问题），而不是从一开始就重新启动下载。当互联网连接不可靠时，此增强功能对于大型下载（如 Android 模拟器或系统映像）特别有用。</p><p><img src="https://raw.githubusercontent.com/zhangmiaocc/blogImageResource/master/img/20200304111543.png" alt></p><h4 id="导入的-APK-可以自动更新"><a href="#导入的-APK-可以自动更新" class="headerlink" title="导入的 APK 可以自动更新"></a>导入的 APK 可以自动更新</h4><p>Android Studio 允许您导入外部构建的 APK 来调试和分析它们。以前，当对这些 APK 进行更改时，您必须再次手动导入它们并重新附加符号和源。Android Studio 3.6 现在会自动检测对导入的 APK 文件所做的更改，并为您提供就地重新导入该文件的选项。</p><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><h4 id="内存探查器中的泄漏检测"><a href="#内存探查器中的泄漏检测" class="headerlink" title="内存探查器中的泄漏检测"></a>内存探查器中的泄漏检测</h4><p>根据反馈，我们在内存探查器中添加了检测可能泄漏的活动和片段实例的能力。要开始使用，请在内存探查器中捕获或导入堆转储文件，并选中”活动/碎片泄漏”复选框以生成结果。有关 Android Studio 如何检测泄漏的详细信息，请参阅我们的文档。</p><p><img src="https://raw.githubusercontent.com/zhangmiaocc/blogImageResource/master/img/20200304111557.png" alt></p><h4 id="在-APK-分析器中去解类和方法字节码"><a href="#在-APK-分析器中去解类和方法字节码" class="headerlink" title="在 APK 分析器中去解类和方法字节码"></a>在 APK 分析器中去解类和方法字节码</h4><p>使用 APK 分析器检查 DEX 文件时，现在可以取消分类和方法字节码。在 DEX 文件查看器中，加载要分析的 APK 的 ProGuard 映射文件。加载后，您将能够通过选择”显示字节码”右键单击要检查的类或方法。</p><p><img src="https://raw.githubusercontent.com/zhangmiaocc/blogImageResource/master/img/20200304111611.png" alt></p><h2 id="概括地说，Android-Studio-3-6-包括这些新的增强功能和功能"><a href="#概括地说，Android-Studio-3-6-包括这些新的增强功能和功能" class="headerlink" title="概括地说，Android Studio 3.6 包括这些新的增强功能和功能"></a>概括地说，Android Studio 3.6 包括这些新的增强功能和功能</h2><h3 id="设计-1"><a href="#设计-1" class="headerlink" title="设计"></a>设计</h3><ul><li>设计编辑器中的拆分视图</li><li>颜色选取器资源选项卡已</li></ul><h3 id="开发-1"><a href="#开发-1" class="headerlink" title="开发"></a>开发</h3><ul><li>视图绑定</li><li>NDK 修改</li><li>Intelli J平台更改</li><li>Add classes with Apply Changes</li></ul><h2 id="构建-1"><a href="#构建-1" class="headerlink" title="构建"></a>构建</h2><ul><li>Android Gradle Plugin (AGP) 升级</li><li>新的打包工具</li></ul><h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><ul><li>Android模拟器Google Maps UI</li><li>多显示器支持</li><li>可恢复的SDK下载</li><li>导入的APK的就地更新</li></ul><h2 id="优化-1"><a href="#优化-1" class="headerlink" title="优化"></a>优化</h2><p>内存探查器中的泄漏检测<br> 在APK分析器中反混淆类和方法字节码<br> 将Kotlin来源附加到导入的APK</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>从下载页面下载 Android Studio 3.6。如果您使用的是早期版本的 Android Studio，则只需将其更新为最新版本的 Android Studio。要使用上述 Android Emulator 功能，请确保您至少运行通过 Android Studio SDK 管理器下载的 Android Emulator v29.2.12。</p><ul><li><a href="https://developer.android.com/studio" target="_blank" rel="noopener">Google 下载地址</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/zhangmiaocc/blogImageResource/master/img/20200304110901.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;如题，Android Studio 3.6 正式版终于发布了，值得兴奋呀，毕竟 3.5 大版本更新也已经差不多半年了，撒花撒花！这次更新又更新了什么呢？&lt;/p&gt;
&lt;p&gt;包括有设计、开发、构建、测试、优化等多方面，下面我们来看看 Release Notes 写了些什么吧！&lt;/p&gt;
&lt;h2 id=&quot;Release-Notes&quot;&gt;&lt;a href=&quot;#Release-Notes&quot; class=&quot;headerlink&quot; title=&quot;Release Notes&quot;&gt;&lt;/a&gt;Release Notes&lt;/h2&gt;&lt;p&gt;我们很高兴宣布 Android Studio 3.6 发布稳定版本了，该版本内有一些针对性的新特性，主要解决了在代码编辑和调试用例中的质量问题。这是我们在 Project Marble 结束之后的第一个版本，其重点是构建强大的集成开发环境（IDE）的基本功能和流。我们从 Project Marble 中学到了很多，在 Android Studio 3.6 中，我们引入了一小部分功能，完善的现有功能，并花费了很大的精力来解决错误并改善基础性能，以确保我们达到去年设定的高质量标准。&lt;/p&gt;
&lt;p&gt;Android Studio 3.6 的一些亮点包括一种使用 XML 快速设计、开发和预览应用布局的新方法，在设计编辑器中提供了新的拆分视图。此外，您不再需要手动键入 GPS 坐标来测试应用的位置，因为我们现在将 Google 地图直接嵌入到 Android 模拟器扩展控制面板中。最后，通过针对片段和活动的自动内存泄漏检测，我们简化了应用并查找 Bug。我们希望所有这些功能可以帮助您在 Android 上开发时更快乐、更高效。&lt;/p&gt;
&lt;p&gt;感谢在预览版中提供早期反馈的用户。您的反馈帮助我们迭代和改进 Android Studio 3.6 中的功能。如果您已准备好迎接下一个稳定版本，并且想要使用一组新的生产力功能，Android Studio 3.6 已准备好下载，以便您入门。&lt;/p&gt;
&lt;p&gt;以下是 Android Studio 3.6 中由主要开发人员流组织的全部新功能列表。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://zhangmiao.cc/categories/Android/"/>
    
      <category term="Android Tips" scheme="https://zhangmiao.cc/categories/Android/Android-Tips/"/>
    
    
      <category term="Android Tips" scheme="https://zhangmiao.cc/tags/Android-Tips/"/>
    
      <category term="Android Studio" scheme="https://zhangmiao.cc/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>Flutter不能热加载，热重载按钮为灰色</title>
    <link href="https://zhangmiao.cc/posts/628bd6da.html"/>
    <id>https://zhangmiao.cc/posts/628bd6da.html</id>
    <published>2020-03-03T06:50:54.000Z</published>
    <updated>2020-03-03T07:08:57.468Z</updated>
    
    <content type="html"><![CDATA[<p>前言，Flutter的热重载(hot reload)功能可以帮助您在无需重新启动应用的情况下快速、轻松地进行测试、构建用户界面、添加功能以及修复错误。</p><p>通过将更新后的源代码文件注入正在运行的Dart虚拟机（VM）中来实现热重载。</p><p>在虚拟机使用新的的字段和函数更新类后，Flutter框架会自动重新构建widget树，以便您快速查看更改的效果。</p><p>要热重载一个Flutter应用程序:</p><ol><li>从受支持的IntelliJ IDE 、Android Studio 或终端窗口运行应用程序。物理机或虚拟器都可以运行。</li><li>修改项目中的一个Dart文件。大多数类型的代码更改可以重新加载; 有关需要完全重新启动的更改列表，请参阅<a href="https://flutterchina.club/hot-reload/#limitations" target="_blank" rel="noopener">限制</a>。</li><li>如果您使用的是IntelliJ IDE 、Android Studio ，请选择<strong>Save All</strong> (<code>cmd-s</code>/<code>ctrl-s</code>)），或者单击工具栏上的Hot Reload按钮。</li></ol><a id="more"></a><h1 id="一、现象："><a href="#一、现象：" class="headerlink" title="一、现象："></a>一、现象：</h1><p>Flutter 不能热加载 热重载按钮灰色，无法点击。</p><p><img src="https://raw.githubusercontent.com/zhangmiaocc/blogImageResource/master/img/20200303145348.png" alt></p><h1 id="二、分析原因："><a href="#二、分析原因：" class="headerlink" title="二、分析原因："></a>二、分析原因：</h1><p><code>终端</code>flutter doctor 显示 NO_PROXY is not set</p><p>没有设置无代理的端口</p><p><strong>➜</strong>  <span style="color:red"><strong>~</strong> flutter doctor       </span>                            </p><p>Doctor summary (to see all details, run flutter doctor -v):</p><p><span style="color:green">[✓] Flutter(Channel stable, v1.7.8, on Mac OS X 10.14.3 18D109, locale zh-Hans-CN)</span></p><p><span style="color:green">[✓] Android toolchain - develop for Android devices (Android SDK version 29.0.1)</span></p><p><span style="color:green">[✓] Xcode - develop for iOS and macOS (Xcode 10.2.1)</span></p><p><span style="color:green">[✓] iOS tools - develop for iOS devices</span></p><p><span style="color:green">[✓] Android Studio (version 3.5)</span></p><p><span style="color:green">[✓] VS Code (version 1.41.1)</span></p><p><span style="color:orange">[!] Proxy Configuration</span></p><p>   <span style="color:orange"> <strong>!</strong> <strong>NO_PROXY is not set</strong></span></p><p><span style="color:green">[✓] Connected device (1 available) </span></p><p><span style="color:orange">! Doctor found issues in 1 category.</span></p><blockquote><p>重点在于：<strong>NO_PROXY is not set</strong></p></blockquote><h1 id="三、解决方案："><a href="#三、解决方案：" class="headerlink" title="三、解决方案："></a>三、解决方案：</h1><p>设置 <strong>NO_PROXY即可</strong></p><p>1.启动终端</p><p>2.进入当前用户的home目录</p><p>cd ~ 或者  cd /users/YourMacUserName</p><p>3.输入touch .bash_profile</p><p>查看和编辑.bash_profile文件</p><p>1.终端输入open -e .bash_profile</p><p>2.编辑文件，新增 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> no_proxy=<span class="string">"localhost,127.0.0.1"</span></span><br></pre></td></tr></table></figure><p>3.关闭保存</p><p>最后更新配置的环境变量</p><p>输入: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> .bash_profile</span><br></pre></td></tr></table></figure><p>不懂这块的话，看这里<a href="https://www.cnblogs.com/jukaiit/p/10785318.html" target="_blank" rel="noopener">设置Mac 终端走代理</a></p><p>操作如下：</p><p><strong>➜</strong>  <span style="color:red"><strong>~</strong> cd ~ </span></p><p><strong>➜</strong>  <span style="color:red"><strong>~</strong> touch .bash_profile</span></p><p><strong>➜</strong>  <span style="color:red"><strong>~</strong> open -e .bash_profile</span></p><p><strong>➜</strong>  <span style="color:red"><strong>~</strong> source .bash_profile</span></p><p><strong>➜</strong>  <span style="color:red"><strong>~</strong> flutter doctor </span>                      </p><p>Doctor summary (to see all details, run flutter doctor -v):</p><p><span style="color:green">[✓] Flutter (Channel stable, v1.7.8, on Mac OS X 10.14.3 18D109, locale zh-Hans-CN)</span></p><p><span style="color:green">[✓] Android toolchain - develop for Android devices (Android SDK version 29.0.1)</span></p><p><span style="color:green">[✓] Xcode - develop for iOS and macOS (Xcode 10.2.1)</span></p><p><span style="color:green">[✓] iOS tools - develop for iOS devices</span></p><p><span style="color:green">[✓] Android Studio (version 3.5)</span></p><p><span style="color:green">[✓] VS Code (version 1.41.1)</span></p><p><span style="color:green">[✓] Proxy Configuration</span></p><p><span style="color:green">[✓] Connected device (1 available)</span></p><p><span style="color:green">• No issues found!</span></p><p><strong>➜</strong>  <strong>~</strong> </p><h1 id="四、验证"><a href="#四、验证" class="headerlink" title="四、验证"></a>四、验证</h1><p>运行时，热重载按钮变为橙色，可以点击。</p><p>快捷键保存编辑时，自动重载。</p><p> <img src="https://raw.githubusercontent.com/zhangmiaocc/blogImageResource/master/img/20200303145307.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前言，Flutter的热重载(hot reload)功能可以帮助您在无需重新启动应用的情况下快速、轻松地进行测试、构建用户界面、添加功能以及修复错误。&lt;/p&gt;
&lt;p&gt;通过将更新后的源代码文件注入正在运行的Dart虚拟机（VM）中来实现热重载。&lt;/p&gt;
&lt;p&gt;在虚拟机使用新的的字段和函数更新类后，Flutter框架会自动重新构建widget树，以便您快速查看更改的效果。&lt;/p&gt;
&lt;p&gt;要热重载一个Flutter应用程序:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从受支持的IntelliJ IDE 、Android Studio 或终端窗口运行应用程序。物理机或虚拟器都可以运行。&lt;/li&gt;
&lt;li&gt;修改项目中的一个Dart文件。大多数类型的代码更改可以重新加载; 有关需要完全重新启动的更改列表，请参阅&lt;a href=&quot;https://flutterchina.club/hot-reload/#limitations&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;限制&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;如果您使用的是IntelliJ IDE 、Android Studio ，请选择&lt;strong&gt;Save All&lt;/strong&gt; (&lt;code&gt;cmd-s&lt;/code&gt;/&lt;code&gt;ctrl-s&lt;/code&gt;)），或者单击工具栏上的Hot Reload按钮。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Android" scheme="https://zhangmiao.cc/categories/Android/"/>
    
      <category term="Flutter" scheme="https://zhangmiao.cc/categories/Android/Flutter/"/>
    
    
      <category term="Android" scheme="https://zhangmiao.cc/tags/Android/"/>
    
      <category term="Flutter" scheme="https://zhangmiao.cc/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>SourceTree_push_remote:Invalid_username_or_password.</title>
    <link href="https://zhangmiao.cc/posts/44ceee89.html"/>
    <id>https://zhangmiao.cc/posts/44ceee89.html</id>
    <published>2020-02-27T06:08:16.000Z</published>
    <updated>2020-02-27T06:27:08.514Z</updated>
    
    <content type="html"><![CDATA[<p>在网络里面移除就行了· 再推就会要你重新输入了。<br>有点不人性化， mark 一下。</p><p><img src="https://raw.githubusercontent.com/zhangmiaocc/blogImageResource/master/img/WechatIMG196212.png" alt></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在网络里面移除就行了· 再推就会要你重新输入了。&lt;br&gt;有点不人性化， mark 一下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/zhangmiaocc/blogImageResource/master/img/WechatIMG196212.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://zhangmiao.cc/categories/Android/"/>
    
      <category term="Android Tips" scheme="https://zhangmiao.cc/categories/Android/Android-Tips/"/>
    
    
      <category term="Android" scheme="https://zhangmiao.cc/tags/Android/"/>
    
      <category term="Android Tips" scheme="https://zhangmiao.cc/tags/Android-Tips/"/>
    
  </entry>
  
</feed>
